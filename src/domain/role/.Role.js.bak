/**
 * 人狼ゲームGM支援ライブラリの役職基底クラス
 * すべての役職クラスはこのクラスを継承する
 */

const { TEAMS } = require('../../core/common/Constants');

/**
 * 役職基底クラス
 * 各役職の共通機能を提供する
 */
class Role {
  /**
   * Roleコンストラクタ
   * @param {Object} game - ゲームインスタンス
   */
  constructor(game) {
    this.game = game;
    this.name = "baseRole";            // 役職名（システム内部で識別用）
    this.displayName = "基本役職";      // 表示名（ユーザー向け）
    this.team = TEAMS.VILLAGE;         // 陣営（デフォルトは村人陣営）
    this.playerId = null;              // この役職が割り当てられたプレイヤーID
    this.isAlive = true;               // 生存状態
    
    // 役職のメタデータ
    this.metadata = {
      description: "すべての役職の基底クラスです",
      abilities: [],
      winCondition: "村人陣営の勝利条件に従います"
    };
    
    // 役職の能力に関する設定
    this.actions = [];                 // 使用可能なアクション
  }

  /**
   * プレイヤーに役職を割り当てる
   * @param {number} playerId - プレイヤーID
   */
  assignToPlayer(playerId) {
    this.playerId = playerId;
  }

  /**
   * 占い結果を返す
   * @returns {string} 占い結果 ('white'/'black')
   */
  getFortuneResult() {
    return 'white'; // デフォルトは「白」判定
  }

  /**
   * 霊媒結果を返す
   * @returns {string} 霊媒結果 ('white'/'black')
   */
  getMediumResult() {
    return 'white'; // デフォルトは「白」判定
  }

  /**
   * 能力が使用可能かどうかを判定
   * @param {number} night - 現在の夜数
   * @returns {boolean} 能力が使用可能かどうか
   */
  canUseAbility(night) {
    return false; // デフォルトは能力なし
  }

  /**
   * 能力の対象となり得るプレイヤーリストを取得
   * @returns {Array<number>} 対象プレイヤーIDのリスト
   */
  getAbilityTargets() {
    return []; // デフォルトは対象なし
  }

  /**
   * 役職情報を取得（視点付き）
   * @param {number|null} viewerId - 閲覧者のプレイヤーID（nullの場合はGM視点）
   * @returns {Object} 役職情報
   */
  getRoleInfo(viewerId = null) {
    // 自分自身の場合は完全な情報
    if (viewerId === this.playerId) {
      return {
        name: this.name,
        displayName: this.displayName,
        team: this.team,
        metadata: this.metadata
      };
    }
    
    // GM視点の場合も完全な情報
    if (viewerId === null) {
      return {
        name: this.name,
        displayName: this.displayName,
        team: this.team,
        metadata: this.metadata
      };
    }
    
    // 死亡時の役職公開設定があるかチェック
    const revealRoleOnDeath = this.game && 
                             this.game.options && 
                             this.game.options.regulations && 
                             this.game.options.regulations.revealRoleOnDeath;
    
    // 死亡して役職公開設定がある場合
    if (!this.isAlive && revealRoleOnDeath) {
      return {
        name: this.name,
        displayName: this.displayName,
        revealed: true
      };
    }
    
    // 通常は役職情報を開示しない
    return {
      name: 'unknown',
      displayName: '不明'
    };
  }

  /**
   * 夜の行動実行時処理（サブクラスでオーバーライド）
   * @param {number} target - 対象プレイヤーID
   * @param {number} night - 現在の夜数
   * @returns {Object|null} アクション結果
   */
  onNightAction(target, night) {
    // デフォルトは何もしない
    return null;
  }

  /**
   * 能力の対象になった時の処理（サブクラスでオーバーライド）
   * @param {Object} action - アクション情報
   * @param {number} source - 実行者ID
   * @returns {Object|null} 応答結果
   */
  onTargeted(action, source) {
    // デフォルトは何もしない
    return null;
  }

  /**
   * 死亡時の処理（サブクラスでオーバーライド）
   * @param {string} cause - 死因
   */
  onDeath(cause) {
    this.isAlive = false;
    // デフォルトは何もしない
  }

  /**
   * ゲーム開始時の処理（サブクラスでオーバーライド）
   */
  onGameStart() {
    // デフォルトは何もしない
  }

  /**
   * フェーズ開始時の処理（サブクラスでオーバーライド）
   * @param {string} phase - フェーズ名
   */
  onPhaseStart(phase) {
    // デフォルトは何もしない
  }

  /**
   * フェーズ終了時の処理（サブクラスでオーバーライド）
   * @param {string} phase - フェーズ名
   */
  onPhaseEnd(phase) {
    // デフォルトは何もしない
  }

  /**
   * ターン終了時の処理（サブクラスでオーバーライド）
   */
  onTurnEnd() {
    // デフォルトは何もしない
  }

  /**
   * 勝利条件を取得
   * @returns {string} 勝利条件の説明
   */
  getWinCondition() {
    return this.metadata.winCondition || "村人陣営の勝利条件に従います";
  }
}

module.exports = { Role };
