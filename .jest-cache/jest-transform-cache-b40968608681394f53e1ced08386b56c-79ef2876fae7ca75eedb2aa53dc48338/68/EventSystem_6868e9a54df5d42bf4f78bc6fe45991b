99947a7d86f73b2e212d996697b60739
/**
 * EventSystem - Core event management module for the werewolf game GM support library
 *
 * This module provides the foundation for the event-driven architecture,
 * enabling communication between different modules through events.
 */

class EventSystem {
  /**
   * Creates a new EventSystem instance
   * @param {Object} options - Configuration options
   * @param {boolean} [options.enableNamespaces=true] - Enable hierarchical event namespaces
   * @param {boolean} [options.debugMode=false] - Enable debug mode with event history
   * @param {boolean} [options.enableWildcards=false] - Enable wildcard event matching
   * @param {number} [options.historyLimit=100] - Maximum number of events to keep in history
   */
  constructor(options = {}) {
    // Default options
    this.options = {
      enableNamespaces: true,
      debugMode: false,
      enableWildcards: false,
      historyLimit: 100,
      ...options
    };

    // Map to store event listeners: { eventName => [{ callback, once, priority }] }
    this.listeners = new Map();

    // Event history for debugging (only active in debug mode)
    this.eventHistory = [];

    // Flag to track if we're currently emitting an event (to handle nested emissions)
    this._emitting = false;

    // Queue for listeners to be added/removed during emission
    this._pendingAdditions = [];
    this._pendingRemovals = [];
  }

  /**
   * Register an event listener
   * @param {string} eventName - Name of the event to listen for
   * @param {Function} callback - Function to call when the event is emitted
   * @param {number} [priority=0] - Priority of the listener (higher executes first)
   * @return {EventSystem} - Returns this instance for chaining
   * @throws {Error} If eventName is not a string or callback is not a function
   */
  on(eventName, callback, priority = 0) {
    // Validate arguments
    if (typeof eventName !== 'string' || eventName.trim() === '') {
      throw new Error('Event name must be a non-empty string');
    }
    if (typeof callback !== 'function') {
      throw new Error('Callback must be a function');
    }

    // If we're currently emitting, queue the addition
    if (this._emitting) {
      this._pendingAdditions.push({
        eventName,
        callback,
        priority,
        once: false
      });
      return this;
    }

    // Get or create the listeners array for this event
    if (!this.listeners.has(eventName)) {
      this.listeners.set(eventName, []);
    }
    const listeners = this.listeners.get(eventName);

    // Check for duplicate listener
    const existingIndex = listeners.findIndex(listener => listener.callback === callback);
    if (existingIndex !== -1) {
      // Update the existing listener's priority
      listeners[existingIndex].priority = priority;
    } else {
      // Add the new listener
      listeners.push({
        callback,
        once: false,
        priority
      });

      // Sort listeners by priority (highest first)
      listeners.sort((a, b) => b.priority - a.priority);
    }
    return this;
  }

  /**
   * Register a one-time event listener that will be removed after execution
   * @param {string} eventName - Name of the event to listen for
   * @param {Function} callback - Function to call when the event is emitted
   * @param {number} [priority=0] - Priority of the listener (higher executes first)
   * @return {EventSystem} - Returns this instance for chaining
   * @throws {Error} If eventName is not a string or callback is not a function
   */
  once(eventName, callback, priority = 0) {
    // Validate arguments
    if (typeof eventName !== 'string' || eventName.trim() === '') {
      throw new Error('Event name must be a non-empty string');
    }
    if (typeof callback !== 'function') {
      throw new Error('Callback must be a function');
    }

    // If we're currently emitting, queue the addition
    if (this._emitting) {
      this._pendingAdditions.push({
        eventName,
        callback,
        priority,
        once: true
      });
      return this;
    }

    // Get or create the listeners array for this event
    if (!this.listeners.has(eventName)) {
      this.listeners.set(eventName, []);
    }
    const listeners = this.listeners.get(eventName);

    // Check for duplicate listener
    const existingIndex = listeners.findIndex(listener => listener.callback === callback);
    if (existingIndex !== -1) {
      // Update the existing listener's priority and once flag
      listeners[existingIndex].priority = priority;
      listeners[existingIndex].once = true;
    } else {
      // Add the new listener
      listeners.push({
        callback,
        once: true,
        priority
      });

      // Sort listeners by priority (highest first)
      listeners.sort((a, b) => b.priority - a.priority);
    }
    return this;
  }

  /**
   * Remove an event listener
   * @param {string} eventName - Name of the event to remove listener from
   * @param {Function} [callback] - Specific callback to remove (if omitted, all listeners for the event are removed)
   * @return {EventSystem} - Returns this instance for chaining
   */
  off(eventName, callback = null) {
    // If we're currently emitting, queue the removal
    if (this._emitting) {
      // 通常は送信キューに入れるが、onceリスナーの場合は即座に削除する
      this._pendingRemovals.push({
        eventName,
        callback
      });

      // Onceリスナーの場合は、キュー入れに加えて即座に処理も行う
      // これはキュー処理まで待つと、同じイベントの次のマッチで再度呼ばれる可能性があるため

      // If eventName doesn't exist, nothing to do
      if (!this.listeners.has(eventName)) {
        return this;
      }

      // If callback is null, remove all listeners for this event
      if (callback === null) {
        this.listeners.delete(eventName);
        return this;
      }

      // Otherwise, only remove the specific callback
      const listeners = this.listeners.get(eventName);
      const filteredListeners = listeners.filter(listener => listener.callback !== callback);
      if (filteredListeners.length === 0) {
        // If no listeners remain, remove the event entirely
        this.listeners.delete(eventName);
      } else {
        // Otherwise, update the listeners array
        this.listeners.set(eventName, filteredListeners);
      }
      return this;
    }

    // If eventName doesn't exist, nothing to do
    if (!this.listeners.has(eventName)) {
      return this;
    }

    // If callback is null, remove all listeners for this event
    if (callback === null) {
      this.listeners.delete(eventName);
      return this;
    }

    // Otherwise, only remove the specific callback
    const listeners = this.listeners.get(eventName);
    const filteredListeners = listeners.filter(listener => listener.callback !== callback);
    if (filteredListeners.length === 0) {
      // If no listeners remain, remove the event entirely
      this.listeners.delete(eventName);
    } else {
      // Otherwise, update the listeners array
      this.listeners.set(eventName, filteredListeners);
    }
    return this;
  }

  /**
   * Emit an event to all registered listeners
   * @param {string} eventName - Name of the event to emit
   * @param {*} [data] - Data to pass to the listeners
   * @return {boolean} - True if the event had listeners, false otherwise
   */
  emit(eventName, data) {
    // Mark that we're emitting an event
    const wasEmitting = this._emitting;
    this._emitting = true;

    // Track whether any listeners were called
    let listenersCalled = false;
    try {
      // Add to history if debug mode is enabled
      if (this.options.debugMode) {
        this._addToHistory(eventName, data);
      }

      // Get all event names to emit based on the options
      const eventNamesToEmit = this._getEventNamesForEmission(eventName);

      // リスナーを呼び出す前にトラッキング用のセットを作成
      // これにより、同じイベント発火内での重複実行を防止
      const calledListeners = new Set();

      // Emit to each matched event name
      for (const name of eventNamesToEmit) {
        if (this.listeners.has(name)) {
          const listeners = this.listeners.get(name);
          const listenersToRemove = [];

          // Call each listener
          for (let i = 0; i < listeners.length; i++) {
            const {
              callback,
              once
            } = listeners[i];

            // このイベント発火内で既に呼び出されたリスナーはスキップ
            if (calledListeners.has(callback)) {
              continue;
            }
            try {
              // 呼び出し前にセットに追加
              calledListeners.add(callback);

              // Call the listener with the event data
              callback(data);
              listenersCalled = true;

              // If it's a once listener, mark it for removal
              if (once) {
                listenersToRemove.push(callback);
                // リスナーを即座に削除する
                this.off(name, callback);
              }
            } catch (error) {
              // Log the error but continue with other listeners
              console.error(`Error in event listener for '${name}':`, error);
            }
          }

          // Onceリスナーは既に削除済みなのでこの処理は不要
          /*
          // Remove once listeners (if we're not in a nested emit)
          if (!wasEmitting) {
            for (const callback of listenersToRemove) {
              this.off(name, callback);
            }
          }
          */
        }
      }

      // Process pending additions and removals (if we're not in a nested emit)
      if (!wasEmitting) {
        this._processPendingOperations();
      }
      return listenersCalled;
    } finally {
      // Only reset the emitting flag if we're the outermost emit call
      if (!wasEmitting) {
        this._emitting = false;
      }
    }
  }

  /**
   * Check if an event has any listeners
   * @param {string} eventName - Name of the event to check
   * @return {boolean} - True if the event has listeners, false otherwise
   */
  hasListeners(eventName) {
    // Direct match
    if (this.listeners.has(eventName) && this.listeners.get(eventName).length > 0) {
      return true;
    }

    // If wildcards are enabled, check for wildcard matches
    if (this.options.enableWildcards) {
      // 最適化: 最大チェック数を制限
      let checked = 0;
      const maxToCheck = 100;
      for (const [name, listeners] of this.listeners.entries()) {
        if (++checked > maxToCheck) break;
        if (listeners.length > 0 && name.includes('*') && this._matchesWildcard(name, eventName)) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Get the number of listeners for an event
   * @param {string} eventName - Name of the event to check
   * @return {number} - Number of listeners for the event
   */
  listenerCount(eventName) {
    let count = 0;

    // Direct match
    if (this.listeners.has(eventName)) {
      count += this.listeners.get(eventName).length;
    }

    // If wildcards are enabled, check for wildcard matches
    if (this.options.enableWildcards) {
      // 最適化: 最大チェック数を制限
      let checked = 0;
      const maxToCheck = 100;
      for (const [name, listeners] of this.listeners.entries()) {
        if (++checked > maxToCheck) break;
        if (name !== eventName && name.includes('*') && this._matchesWildcard(name, eventName)) {
          count += listeners.length;
        }
      }
    }
    return count;
  }

  /**
   * Get all registered event names
   * @return {string[]} - Array of registered event names
   */
  eventNames() {
    return Array.from(this.listeners.keys());
  }

  /**
   * Get the recent event history (only available in debug mode)
   * @param {number} [limit=10] - Maximum number of events to return
   * @return {Array} - Array of recent events or empty array if debug mode is disabled
   */
  getEventHistory(limit = 10) {
    if (!this.options.debugMode) {
      return [];
    }
    const actualLimit = Math.min(limit, this.eventHistory.length);
    return this.eventHistory.slice(-actualLimit);
  }

  /**
   * Clear all event listeners
   * @return {EventSystem} - Returns this instance for chaining
   */
  removeAllListeners() {
    this.listeners.clear();
    return this;
  }

  /**
   * Process pending listener additions and removals
   * @private
   */
  _processPendingOperations() {
    // 最適化: 大量のペンディング操作がある場合のガード
    const maxOperations = 1000;

    // Process removals first to avoid issues with additions that would be immediately removed
    const removalsToProcess = Math.min(this._pendingRemovals.length, maxOperations);
    for (let i = 0; i < removalsToProcess; i++) {
      const {
        eventName,
        callback
      } = this._pendingRemovals[i];
      this.off(eventName, callback);
    }

    // 処理した分だけ配列から削除
    if (removalsToProcess === this._pendingRemovals.length) {
      this._pendingRemovals = [];
    } else {
      this._pendingRemovals = this._pendingRemovals.slice(removalsToProcess);
    }

    // Then process additions
    const additionsToProcess = Math.min(this._pendingAdditions.length, maxOperations);
    for (let i = 0; i < additionsToProcess; i++) {
      const {
        eventName,
        callback,
        priority,
        once
      } = this._pendingAdditions[i];
      if (once) {
        this.once(eventName, callback, priority);
      } else {
        this.on(eventName, callback, priority);
      }
    }

    // 処理した分だけ配列から削除
    if (additionsToProcess === this._pendingAdditions.length) {
      this._pendingAdditions = [];
    } else {
      this._pendingAdditions = this._pendingAdditions.slice(additionsToProcess);
    }
  }

  /**
   * Add an event to the history
   * @param {string} eventName - Name of the emitted event
   * @param {*} data - Data passed with the event
   * @private
   */
  _addToHistory(eventName, data) {
    // Add to history with timestamp
    this.eventHistory.push({
      eventName,
      data,
      timestamp: new Date()
    });

    // Trim history if it exceeds the limit
    if (this.eventHistory.length > this.options.historyLimit) {
      this.eventHistory.shift();
    }
  }

  /**
   * Get all event names to emit based on the original event and options
   * @param {string} eventName - The original event name
   * @return {string[]} - Array of event names to emit
   * @private
   */
  _getEventNamesForEmission(eventName) {
    const eventNames = [eventName];

    // Add namespace parent events if enabled
    if (this.options.enableNamespaces && eventName.includes('.')) {
      const parts = eventName.split('.');
      // 最適化: 一度に全部を計算せず徐々に親名前空間を構築
      let parentName = '';
      for (let i = 0; i < parts.length - 1; i++) {
        parentName = parentName ? `${parentName}.${parts[i]}` : parts[i];
        eventNames.push(parentName);
      }
    }

    // 最適化: ワイルドカードが有効な場合は、必要なリスナーのみマッチングする
    if (this.options.enableWildcards) {
      // 最適化: リスナーの数が多すぎる場合は制限する
      const maxListenersToCheck = 100;
      let checkedCount = 0;
      for (const name of this.listeners.keys()) {
        // ワイルドカード文字を含む場合のみチェック
        if (!name.includes('*')) continue;

        // 処理済みのイベント名はスキップ
        if (eventNames.includes(name)) continue;

        // 最大制限に達したら停止
        if (++checkedCount > maxListenersToCheck) {
          break;
        }

        // ワイルドカードパターンの簡易チェック
        if (this._matchesWildcard(name, eventName)) {
          eventNames.push(name);
        }
      }
    }
    return eventNames;
  }

  /**
   * Check if a wildcard pattern matches an event name
   * @param {string} pattern - The wildcard pattern to check
   * @param {string} eventName - The event name to match against
   * @return {boolean} - True if the pattern matches the event name
   * @private
   */
  _matchesWildcard(pattern, eventName) {
    // パターンや名前が異常に長い場合はマッチングを諦める（安全対策）
    if (pattern.length > 1000 || eventName.length > 1000) {
      return false;
    }

    // 単純なチェック
    if (pattern === eventName) {
      return true;
    }

    // 単純なワイルドカードチェック
    if (pattern === '*') {
      return !eventName.includes('.');
    }
    if (pattern === '**') {
      return true;
    }

    // 複数階層のワイルドカード (**) の処理
    if (pattern.includes('**')) {
      const parts = pattern.split('**');

      // 最適化: 最大2つのパートのみをサポート
      if (parts.length > 2) {
        return false;
      }

      // パターンが 'game.**' のような形式の場合
      if (parts.length === 2 && parts[1] === '') {
        return eventName.startsWith(parts[0]);
      }

      // パターンが '**.end' のような形式の場合
      if (parts.length === 2 && parts[0] === '') {
        return eventName.endsWith(parts[1]);
      }

      // パターンが 'start.**.end' のような形式の場合
      if (parts.length === 2) {
        return eventName.startsWith(parts[0]) && eventName.endsWith(parts[1]);
      }
    }

    // 単一階層のワイルドカード (*) の処理
    if (pattern.includes('*') && !pattern.includes('**')) {
      // 正規表現を使わない最適化された方法
      const patternParts = pattern.split('.');
      const eventParts = eventName.split('.');
      if (patternParts.length !== eventParts.length) {
        return false;
      }
      for (let i = 0; i < patternParts.length; i++) {
        if (patternParts[i] === '*') {
          continue; // ワイルドカードは何にもマッチする
        }
        if (patternParts[i] !== eventParts[i]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
}
module.exports = EventSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudFN5c3RlbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImVuYWJsZU5hbWVzcGFjZXMiLCJkZWJ1Z01vZGUiLCJlbmFibGVXaWxkY2FyZHMiLCJoaXN0b3J5TGltaXQiLCJsaXN0ZW5lcnMiLCJNYXAiLCJldmVudEhpc3RvcnkiLCJfZW1pdHRpbmciLCJfcGVuZGluZ0FkZGl0aW9ucyIsIl9wZW5kaW5nUmVtb3ZhbHMiLCJvbiIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwicHJpb3JpdHkiLCJ0cmltIiwiRXJyb3IiLCJwdXNoIiwib25jZSIsImhhcyIsInNldCIsImdldCIsImV4aXN0aW5nSW5kZXgiLCJmaW5kSW5kZXgiLCJsaXN0ZW5lciIsInNvcnQiLCJhIiwiYiIsIm9mZiIsImRlbGV0ZSIsImZpbHRlcmVkTGlzdGVuZXJzIiwiZmlsdGVyIiwibGVuZ3RoIiwiZW1pdCIsImRhdGEiLCJ3YXNFbWl0dGluZyIsImxpc3RlbmVyc0NhbGxlZCIsIl9hZGRUb0hpc3RvcnkiLCJldmVudE5hbWVzVG9FbWl0IiwiX2dldEV2ZW50TmFtZXNGb3JFbWlzc2lvbiIsImNhbGxlZExpc3RlbmVycyIsIlNldCIsIm5hbWUiLCJsaXN0ZW5lcnNUb1JlbW92ZSIsImkiLCJhZGQiLCJlcnJvciIsImNvbnNvbGUiLCJfcHJvY2Vzc1BlbmRpbmdPcGVyYXRpb25zIiwiaGFzTGlzdGVuZXJzIiwiY2hlY2tlZCIsIm1heFRvQ2hlY2siLCJlbnRyaWVzIiwiaW5jbHVkZXMiLCJfbWF0Y2hlc1dpbGRjYXJkIiwibGlzdGVuZXJDb3VudCIsImNvdW50IiwiZXZlbnROYW1lcyIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJnZXRFdmVudEhpc3RvcnkiLCJsaW1pdCIsImFjdHVhbExpbWl0IiwiTWF0aCIsIm1pbiIsInNsaWNlIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiY2xlYXIiLCJtYXhPcGVyYXRpb25zIiwicmVtb3ZhbHNUb1Byb2Nlc3MiLCJhZGRpdGlvbnNUb1Byb2Nlc3MiLCJ0aW1lc3RhbXAiLCJEYXRlIiwic2hpZnQiLCJwYXJ0cyIsInNwbGl0IiwicGFyZW50TmFtZSIsIm1heExpc3RlbmVyc1RvQ2hlY2siLCJjaGVja2VkQ291bnQiLCJwYXR0ZXJuIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwicGF0dGVyblBhcnRzIiwiZXZlbnRQYXJ0cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJFdmVudFN5c3RlbS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV2ZW50U3lzdGVtIC0gQ29yZSBldmVudCBtYW5hZ2VtZW50IG1vZHVsZSBmb3IgdGhlIHdlcmV3b2xmIGdhbWUgR00gc3VwcG9ydCBsaWJyYXJ5XG4gKlxuICogVGhpcyBtb2R1bGUgcHJvdmlkZXMgdGhlIGZvdW5kYXRpb24gZm9yIHRoZSBldmVudC1kcml2ZW4gYXJjaGl0ZWN0dXJlLFxuICogZW5hYmxpbmcgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGRpZmZlcmVudCBtb2R1bGVzIHRocm91Z2ggZXZlbnRzLlxuICovXG5cbmNsYXNzIEV2ZW50U3lzdGVtIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRXZlbnRTeXN0ZW0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBDb25maWd1cmF0aW9uIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5lbmFibGVOYW1lc3BhY2VzPXRydWVdIC0gRW5hYmxlIGhpZXJhcmNoaWNhbCBldmVudCBuYW1lc3BhY2VzXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGVidWdNb2RlPWZhbHNlXSAtIEVuYWJsZSBkZWJ1ZyBtb2RlIHdpdGggZXZlbnQgaGlzdG9yeVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZVdpbGRjYXJkcz1mYWxzZV0gLSBFbmFibGUgd2lsZGNhcmQgZXZlbnQgbWF0Y2hpbmdcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhpc3RvcnlMaW1pdD0xMDBdIC0gTWF4aW11bSBudW1iZXIgb2YgZXZlbnRzIHRvIGtlZXAgaW4gaGlzdG9yeVxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgLy8gRGVmYXVsdCBvcHRpb25zXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgZW5hYmxlTmFtZXNwYWNlczogdHJ1ZSxcbiAgICAgIGRlYnVnTW9kZTogZmFsc2UsXG4gICAgICBlbmFibGVXaWxkY2FyZHM6IGZhbHNlLCBcbiAgICAgIGhpc3RvcnlMaW1pdDogMTAwLFxuICAgICAgLi4ub3B0aW9uc1xuICAgIH07XG5cbiAgICAvLyBNYXAgdG8gc3RvcmUgZXZlbnQgbGlzdGVuZXJzOiB7IGV2ZW50TmFtZSA9PiBbeyBjYWxsYmFjaywgb25jZSwgcHJpb3JpdHkgfV0gfVxuICAgIHRoaXMubGlzdGVuZXJzID0gbmV3IE1hcCgpO1xuXG4gICAgLy8gRXZlbnQgaGlzdG9yeSBmb3IgZGVidWdnaW5nIChvbmx5IGFjdGl2ZSBpbiBkZWJ1ZyBtb2RlKVxuICAgIHRoaXMuZXZlbnRIaXN0b3J5ID0gW107XG5cbiAgICAvLyBGbGFnIHRvIHRyYWNrIGlmIHdlJ3JlIGN1cnJlbnRseSBlbWl0dGluZyBhbiBldmVudCAodG8gaGFuZGxlIG5lc3RlZCBlbWlzc2lvbnMpXG4gICAgdGhpcy5fZW1pdHRpbmcgPSBmYWxzZTtcblxuICAgIC8vIFF1ZXVlIGZvciBsaXN0ZW5lcnMgdG8gYmUgYWRkZWQvcmVtb3ZlZCBkdXJpbmcgZW1pc3Npb25cbiAgICB0aGlzLl9wZW5kaW5nQWRkaXRpb25zID0gW107XG4gICAgdGhpcy5fcGVuZGluZ1JlbW92YWxzID0gW107XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYW4gZXZlbnQgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3JcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT0wXSAtIFByaW9yaXR5IG9mIHRoZSBsaXN0ZW5lciAoaGlnaGVyIGV4ZWN1dGVzIGZpcnN0KVxuICAgKiBAcmV0dXJuIHtFdmVudFN5c3RlbX0gLSBSZXR1cm5zIHRoaXMgaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBldmVudE5hbWUgaXMgbm90IGEgc3RyaW5nIG9yIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXG4gICAqL1xuICBvbihldmVudE5hbWUsIGNhbGxiYWNrLCBwcmlvcml0eSA9IDApIHtcbiAgICAvLyBWYWxpZGF0ZSBhcmd1bWVudHNcbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPT0gJ3N0cmluZycgfHwgZXZlbnROYW1lLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGVtaXR0aW5nLCBxdWV1ZSB0aGUgYWRkaXRpb25cbiAgICBpZiAodGhpcy5fZW1pdHRpbmcpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMucHVzaCh7IGV2ZW50TmFtZSwgY2FsbGJhY2ssIHByaW9yaXR5LCBvbmNlOiBmYWxzZSB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEdldCBvciBjcmVhdGUgdGhlIGxpc3RlbmVycyBhcnJheSBmb3IgdGhpcyBldmVudFxuICAgIGlmICghdGhpcy5saXN0ZW5lcnMuaGFzKGV2ZW50TmFtZSkpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLnNldChldmVudE5hbWUsIFtdKTtcbiAgICB9XG5cbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcblxuICAgIC8vIENoZWNrIGZvciBkdXBsaWNhdGUgbGlzdGVuZXJcbiAgICBjb25zdCBleGlzdGluZ0luZGV4ID0gbGlzdGVuZXJzLmZpbmRJbmRleChsaXN0ZW5lciA9PiBsaXN0ZW5lci5jYWxsYmFjayA9PT0gY2FsbGJhY2spO1xuICAgIGlmIChleGlzdGluZ0luZGV4ICE9PSAtMSkge1xuICAgICAgLy8gVXBkYXRlIHRoZSBleGlzdGluZyBsaXN0ZW5lcidzIHByaW9yaXR5XG4gICAgICBsaXN0ZW5lcnNbZXhpc3RpbmdJbmRleF0ucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRkIHRoZSBuZXcgbGlzdGVuZXJcbiAgICAgIGxpc3RlbmVycy5wdXNoKHsgY2FsbGJhY2ssIG9uY2U6IGZhbHNlLCBwcmlvcml0eSB9KTtcblxuICAgICAgLy8gU29ydCBsaXN0ZW5lcnMgYnkgcHJpb3JpdHkgKGhpZ2hlc3QgZmlyc3QpXG4gICAgICBsaXN0ZW5lcnMuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlZ2lzdGVyIGEgb25lLXRpbWUgZXZlbnQgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIHJlbW92ZWQgYWZ0ZXIgZXhlY3V0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB0byBsaXN0ZW4gZm9yXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gRnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSBldmVudCBpcyBlbWl0dGVkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJpb3JpdHk9MF0gLSBQcmlvcml0eSBvZiB0aGUgbGlzdGVuZXIgKGhpZ2hlciBleGVjdXRlcyBmaXJzdClcbiAgICogQHJldHVybiB7RXZlbnRTeXN0ZW19IC0gUmV0dXJucyB0aGlzIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgZXZlbnROYW1lIGlzIG5vdCBhIHN0cmluZyBvciBjYWxsYmFjayBpcyBub3QgYSBmdW5jdGlvblxuICAgKi9cbiAgb25jZShldmVudE5hbWUsIGNhbGxiYWNrLCBwcmlvcml0eSA9IDApIHtcbiAgICAvLyBWYWxpZGF0ZSBhcmd1bWVudHNcbiAgICBpZiAodHlwZW9mIGV2ZW50TmFtZSAhPT0gJ3N0cmluZycgfHwgZXZlbnROYW1lLnRyaW0oKSA9PT0gJycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQ2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IGVtaXR0aW5nLCBxdWV1ZSB0aGUgYWRkaXRpb25cbiAgICBpZiAodGhpcy5fZW1pdHRpbmcpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMucHVzaCh7IGV2ZW50TmFtZSwgY2FsbGJhY2ssIHByaW9yaXR5LCBvbmNlOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgbGlzdGVuZXJzIGFycmF5IGZvciB0aGlzIGV2ZW50XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycy5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGR1cGxpY2F0ZSBsaXN0ZW5lclxuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBsaXN0ZW5lcnMuZmluZEluZGV4KGxpc3RlbmVyID0+IGxpc3RlbmVyLmNhbGxiYWNrID09PSBjYWxsYmFjayk7XG4gICAgaWYgKGV4aXN0aW5nSW5kZXggIT09IC0xKSB7XG4gICAgICAvLyBVcGRhdGUgdGhlIGV4aXN0aW5nIGxpc3RlbmVyJ3MgcHJpb3JpdHkgYW5kIG9uY2UgZmxhZ1xuICAgICAgbGlzdGVuZXJzW2V4aXN0aW5nSW5kZXhdLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgICBsaXN0ZW5lcnNbZXhpc3RpbmdJbmRleF0ub25jZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFkZCB0aGUgbmV3IGxpc3RlbmVyXG4gICAgICBsaXN0ZW5lcnMucHVzaCh7IGNhbGxiYWNrLCBvbmNlOiB0cnVlLCBwcmlvcml0eSB9KTtcblxuICAgICAgLy8gU29ydCBsaXN0ZW5lcnMgYnkgcHJpb3JpdHkgKGhpZ2hlc3QgZmlyc3QpXG4gICAgICBsaXN0ZW5lcnMuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBldmVudCBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gcmVtb3ZlIGxpc3RlbmVyIGZyb21cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NhbGxiYWNrXSAtIFNwZWNpZmljIGNhbGxiYWNrIHRvIHJlbW92ZSAoaWYgb21pdHRlZCwgYWxsIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50IGFyZSByZW1vdmVkKVxuICAgKiBAcmV0dXJuIHtFdmVudFN5c3RlbX0gLSBSZXR1cm5zIHRoaXMgaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqL1xuICBvZmYoZXZlbnROYW1lLCBjYWxsYmFjayA9IG51bGwpIHtcbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgZW1pdHRpbmcsIHF1ZXVlIHRoZSByZW1vdmFsXG4gICAgaWYgKHRoaXMuX2VtaXR0aW5nKSB7XG4gICAgICAvLyDpgJrluLjjga/pgIHkv6Hjgq3jg6Xjg7zjgavlhaXjgozjgovjgYzjgIFvbmNl44Oq44K544OK44O844Gu5aC05ZCI44Gv5Y2z5bqn44Gr5YmK6Zmk44GZ44KLXG4gICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMucHVzaCh7IGV2ZW50TmFtZSwgY2FsbGJhY2sgfSk7XG4gICAgICBcbiAgICAgIC8vIE9uY2Xjg6rjgrnjg4rjg7zjga7loLTlkIjjga/jgIHjgq3jg6Xjg7zlhaXjgozjgavliqDjgYjjgabljbPluqfjgavlh6bnkIbjgoLooYzjgYZcbiAgICAgIC8vIOOBk+OCjOOBr+OCreODpeODvOWHpueQhuOBvuOBp+W+heOBpOOBqOOAgeWQjOOBmOOCpOODmeODs+ODiOOBruasoeOBruODnuODg+ODgeOBp+WGjeW6puWRvOOBsOOCjOOCi+WPr+iDveaAp+OBjOOBguOCi+OBn+OCgVxuICAgICAgXG4gICAgICAvLyBJZiBldmVudE5hbWUgZG9lc24ndCBleGlzdCwgbm90aGluZyB0byBkb1xuICAgICAgaWYgKCF0aGlzLmxpc3RlbmVycy5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgLy8gSWYgY2FsbGJhY2sgaXMgbnVsbCwgcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIHRoaXMgZXZlbnRcbiAgICAgIGlmIChjYWxsYmFjayA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUoZXZlbnROYW1lKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIE90aGVyd2lzZSwgb25seSByZW1vdmUgdGhlIHNwZWNpZmljIGNhbGxiYWNrXG4gICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcbiAgICAgIGNvbnN0IGZpbHRlcmVkTGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihsaXN0ZW5lciA9PiBsaXN0ZW5lci5jYWxsYmFjayAhPT0gY2FsbGJhY2spO1xuXG4gICAgICBpZiAoZmlsdGVyZWRMaXN0ZW5lcnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIElmIG5vIGxpc3RlbmVycyByZW1haW4sIHJlbW92ZSB0aGUgZXZlbnQgZW50aXJlbHlcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UsIHVwZGF0ZSB0aGUgbGlzdGVuZXJzIGFycmF5XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNldChldmVudE5hbWUsIGZpbHRlcmVkTGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gSWYgZXZlbnROYW1lIGRvZXNuJ3QgZXhpc3QsIG5vdGhpbmcgdG8gZG9cbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmhhcyhldmVudE5hbWUpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBJZiBjYWxsYmFjayBpcyBudWxsLCByZW1vdmUgYWxsIGxpc3RlbmVycyBmb3IgdGhpcyBldmVudFxuICAgIGlmIChjYWxsYmFjayA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBPdGhlcndpc2UsIG9ubHkgcmVtb3ZlIHRoZSBzcGVjaWZpYyBjYWxsYmFja1xuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuICAgIGNvbnN0IGZpbHRlcmVkTGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihsaXN0ZW5lciA9PiBsaXN0ZW5lci5jYWxsYmFjayAhPT0gY2FsbGJhY2spO1xuXG4gICAgaWYgKGZpbHRlcmVkTGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgLy8gSWYgbm8gbGlzdGVuZXJzIHJlbWFpbiwgcmVtb3ZlIHRoZSBldmVudCBlbnRpcmVseVxuICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKGV2ZW50TmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgdXBkYXRlIHRoZSBsaXN0ZW5lcnMgYXJyYXlcbiAgICAgIHRoaXMubGlzdGVuZXJzLnNldChldmVudE5hbWUsIGZpbHRlcmVkTGlzdGVuZXJzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbWl0IGFuIGV2ZW50IHRvIGFsbCByZWdpc3RlcmVkIGxpc3RlbmVyc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gZW1pdFxuICAgKiBAcGFyYW0geyp9IFtkYXRhXSAtIERhdGEgdG8gcGFzcyB0byB0aGUgbGlzdGVuZXJzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgZXZlbnQgaGFkIGxpc3RlbmVycywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBlbWl0KGV2ZW50TmFtZSwgZGF0YSkge1xuICAgIC8vIE1hcmsgdGhhdCB3ZSdyZSBlbWl0dGluZyBhbiBldmVudFxuICAgIGNvbnN0IHdhc0VtaXR0aW5nID0gdGhpcy5fZW1pdHRpbmc7XG4gICAgdGhpcy5fZW1pdHRpbmcgPSB0cnVlO1xuXG4gICAgLy8gVHJhY2sgd2hldGhlciBhbnkgbGlzdGVuZXJzIHdlcmUgY2FsbGVkXG4gICAgbGV0IGxpc3RlbmVyc0NhbGxlZCA9IGZhbHNlO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIEFkZCB0byBoaXN0b3J5IGlmIGRlYnVnIG1vZGUgaXMgZW5hYmxlZFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5kZWJ1Z01vZGUpIHtcbiAgICAgICAgdGhpcy5fYWRkVG9IaXN0b3J5KGV2ZW50TmFtZSwgZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdldCBhbGwgZXZlbnQgbmFtZXMgdG8gZW1pdCBiYXNlZCBvbiB0aGUgb3B0aW9uc1xuICAgICAgY29uc3QgZXZlbnROYW1lc1RvRW1pdCA9IHRoaXMuX2dldEV2ZW50TmFtZXNGb3JFbWlzc2lvbihldmVudE5hbWUpO1xuICAgICAgXG4gICAgICAvLyDjg6rjgrnjg4rjg7zjgpLlkbzjgbPlh7rjgZnliY3jgavjg4jjg6njg4Pjgq3jg7PjgrDnlKjjga7jgrvjg4Pjg4jjgpLkvZzmiJBcbiAgICAgIC8vIOOBk+OCjOOBq+OCiOOCiuOAgeWQjOOBmOOCpOODmeODs+ODiOeZuueBq+WGheOBp+OBrumHjeikh+Wun+ihjOOCkumYsuatolxuICAgICAgY29uc3QgY2FsbGVkTGlzdGVuZXJzID0gbmV3IFNldCgpO1xuXG4gICAgICAvLyBFbWl0IHRvIGVhY2ggbWF0Y2hlZCBldmVudCBuYW1lXG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgZXZlbnROYW1lc1RvRW1pdCkge1xuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KG5hbWUpO1xuICAgICAgICAgIGNvbnN0IGxpc3RlbmVyc1RvUmVtb3ZlID0gW107XG5cbiAgICAgICAgICAvLyBDYWxsIGVhY2ggbGlzdGVuZXJcbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgeyBjYWxsYmFjaywgb25jZSB9ID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyDjgZPjga7jgqTjg5njg7Pjg4jnmbrngavlhoXjgafml6LjgavlkbzjgbPlh7rjgZXjgozjgZ/jg6rjgrnjg4rjg7zjga/jgrnjgq3jg4Pjg5dcbiAgICAgICAgICAgIGlmIChjYWxsZWRMaXN0ZW5lcnMuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgLy8g5ZG844Gz5Ye644GX5YmN44Gr44K744OD44OI44Gr6L+95YqgXG4gICAgICAgICAgICAgIGNhbGxlZExpc3RlbmVycy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQ2FsbCB0aGUgbGlzdGVuZXIgd2l0aCB0aGUgZXZlbnQgZGF0YVxuICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcbiAgICAgICAgICAgICAgbGlzdGVuZXJzQ2FsbGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAvLyBJZiBpdCdzIGEgb25jZSBsaXN0ZW5lciwgbWFyayBpdCBmb3IgcmVtb3ZhbFxuICAgICAgICAgICAgICBpZiAob25jZSkge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1RvUmVtb3ZlLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIC8vIOODquOCueODiuODvOOCkuWNs+W6p+OBq+WJiumZpOOBmeOCi1xuICAgICAgICAgICAgICAgIHRoaXMub2ZmKG5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gTG9nIHRoZSBlcnJvciBidXQgY29udGludWUgd2l0aCBvdGhlciBsaXN0ZW5lcnNcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihgRXJyb3IgaW4gZXZlbnQgbGlzdGVuZXIgZm9yICcke25hbWV9JzpgLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT25jZeODquOCueODiuODvOOBr+aXouOBq+WJiumZpOa4iOOBv+OBquOBruOBp+OBk+OBruWHpueQhuOBr+S4jeimgVxuICAgICAgICAgIC8qXG4gICAgICAgICAgLy8gUmVtb3ZlIG9uY2UgbGlzdGVuZXJzIChpZiB3ZSdyZSBub3QgaW4gYSBuZXN0ZWQgZW1pdClcbiAgICAgICAgICBpZiAoIXdhc0VtaXR0aW5nKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNhbGxiYWNrIG9mIGxpc3RlbmVyc1RvUmVtb3ZlKSB7XG4gICAgICAgICAgICAgIHRoaXMub2ZmKG5hbWUsIGNhbGxiYWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgKi9cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQcm9jZXNzIHBlbmRpbmcgYWRkaXRpb25zIGFuZCByZW1vdmFscyAoaWYgd2UncmUgbm90IGluIGEgbmVzdGVkIGVtaXQpXG4gICAgICBpZiAoIXdhc0VtaXR0aW5nKSB7XG4gICAgICAgIHRoaXMuX3Byb2Nlc3NQZW5kaW5nT3BlcmF0aW9ucygpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGlzdGVuZXJzQ2FsbGVkO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBPbmx5IHJlc2V0IHRoZSBlbWl0dGluZyBmbGFnIGlmIHdlJ3JlIHRoZSBvdXRlcm1vc3QgZW1pdCBjYWxsXG4gICAgICBpZiAoIXdhc0VtaXR0aW5nKSB7XG4gICAgICAgIHRoaXMuX2VtaXR0aW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGV2ZW50IGhhcyBhbnkgbGlzdGVuZXJzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB0byBjaGVja1xuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRydWUgaWYgdGhlIGV2ZW50IGhhcyBsaXN0ZW5lcnMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgaGFzTGlzdGVuZXJzKGV2ZW50TmFtZSkge1xuICAgIC8vIERpcmVjdCBtYXRjaFxuICAgIGlmICh0aGlzLmxpc3RlbmVycy5oYXMoZXZlbnROYW1lKSAmJiB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKS5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyBJZiB3aWxkY2FyZHMgYXJlIGVuYWJsZWQsIGNoZWNrIGZvciB3aWxkY2FyZCBtYXRjaGVzXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVXaWxkY2FyZHMpIHtcbiAgICAgIC8vIOacgOmBqeWMljog5pyA5aSn44OB44Kn44OD44Kv5pWw44KS5Yi26ZmQXG4gICAgICBsZXQgY2hlY2tlZCA9IDA7XG4gICAgICBjb25zdCBtYXhUb0NoZWNrID0gMTAwO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBsaXN0ZW5lcnNdIG9mIHRoaXMubGlzdGVuZXJzLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoKytjaGVja2VkID4gbWF4VG9DaGVjaykgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICBpZiAobGlzdGVuZXJzLmxlbmd0aCA+IDAgJiYgbmFtZS5pbmNsdWRlcygnKicpICYmIHRoaXMuX21hdGNoZXNXaWxkY2FyZChuYW1lLCBldmVudE5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgbGlzdGVuZXJzIGZvciBhbiBldmVudFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gY2hlY2tcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIE51bWJlciBvZiBsaXN0ZW5lcnMgZm9yIHRoZSBldmVudFxuICAgKi9cbiAgbGlzdGVuZXJDb3VudChldmVudE5hbWUpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgLy8gRGlyZWN0IG1hdGNoXG4gICAgaWYgKHRoaXMubGlzdGVuZXJzLmhhcyhldmVudE5hbWUpKSB7XG4gICAgICBjb3VudCArPSB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLy8gSWYgd2lsZGNhcmRzIGFyZSBlbmFibGVkLCBjaGVjayBmb3Igd2lsZGNhcmQgbWF0Y2hlc1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlV2lsZGNhcmRzKSB7XG4gICAgICAvLyDmnIDpganljJY6IOacgOWkp+ODgeOCp+ODg+OCr+aVsOOCkuWItumZkFxuICAgICAgbGV0IGNoZWNrZWQgPSAwO1xuICAgICAgY29uc3QgbWF4VG9DaGVjayA9IDEwMDtcbiAgICAgIFxuICAgICAgZm9yIChjb25zdCBbbmFtZSwgbGlzdGVuZXJzXSBvZiB0aGlzLmxpc3RlbmVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgaWYgKCsrY2hlY2tlZCA+IG1heFRvQ2hlY2spIGJyZWFrO1xuICAgICAgICBcbiAgICAgICAgaWYgKG5hbWUgIT09IGV2ZW50TmFtZSAmJiBuYW1lLmluY2x1ZGVzKCcqJykgJiYgdGhpcy5fbWF0Y2hlc1dpbGRjYXJkKG5hbWUsIGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICBjb3VudCArPSBsaXN0ZW5lcnMubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgcmVnaXN0ZXJlZCBldmVudCBuYW1lc1xuICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gLSBBcnJheSBvZiByZWdpc3RlcmVkIGV2ZW50IG5hbWVzXG4gICAqL1xuICBldmVudE5hbWVzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMubGlzdGVuZXJzLmtleXMoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByZWNlbnQgZXZlbnQgaGlzdG9yeSAob25seSBhdmFpbGFibGUgaW4gZGVidWcgbW9kZSlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW1pdD0xMF0gLSBNYXhpbXVtIG51bWJlciBvZiBldmVudHMgdG8gcmV0dXJuXG4gICAqIEByZXR1cm4ge0FycmF5fSAtIEFycmF5IG9mIHJlY2VudCBldmVudHMgb3IgZW1wdHkgYXJyYXkgaWYgZGVidWcgbW9kZSBpcyBkaXNhYmxlZFxuICAgKi9cbiAgZ2V0RXZlbnRIaXN0b3J5KGxpbWl0ID0gMTApIHtcbiAgICBpZiAoIXRoaXMub3B0aW9ucy5kZWJ1Z01vZGUpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3R1YWxMaW1pdCA9IE1hdGgubWluKGxpbWl0LCB0aGlzLmV2ZW50SGlzdG9yeS5sZW5ndGgpO1xuICAgIHJldHVybiB0aGlzLmV2ZW50SGlzdG9yeS5zbGljZSgtYWN0dWFsTGltaXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGFsbCBldmVudCBsaXN0ZW5lcnNcbiAgICogQHJldHVybiB7RXZlbnRTeXN0ZW19IC0gUmV0dXJucyB0aGlzIGluc3RhbmNlIGZvciBjaGFpbmluZ1xuICAgKi9cbiAgcmVtb3ZlQWxsTGlzdGVuZXJzKCkge1xuICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBwZW5kaW5nIGxpc3RlbmVyIGFkZGl0aW9ucyBhbmQgcmVtb3ZhbHNcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9wcm9jZXNzUGVuZGluZ09wZXJhdGlvbnMoKSB7XG4gICAgLy8g5pyA6YGp5YyWOiDlpKfph4/jga7jg5rjg7Pjg4fjgqPjg7PjgrDmk43kvZzjgYzjgYLjgovloLTlkIjjga7jgqzjg7zjg4lcbiAgICBjb25zdCBtYXhPcGVyYXRpb25zID0gMTAwMDtcbiAgICBcbiAgICAvLyBQcm9jZXNzIHJlbW92YWxzIGZpcnN0IHRvIGF2b2lkIGlzc3VlcyB3aXRoIGFkZGl0aW9ucyB0aGF0IHdvdWxkIGJlIGltbWVkaWF0ZWx5IHJlbW92ZWRcbiAgICBjb25zdCByZW1vdmFsc1RvUHJvY2VzcyA9IE1hdGgubWluKHRoaXMuX3BlbmRpbmdSZW1vdmFscy5sZW5ndGgsIG1heE9wZXJhdGlvbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmVtb3ZhbHNUb1Byb2Nlc3M7IGkrKykge1xuICAgICAgY29uc3QgeyBldmVudE5hbWUsIGNhbGxiYWNrIH0gPSB0aGlzLl9wZW5kaW5nUmVtb3ZhbHNbaV07XG4gICAgICB0aGlzLm9mZihldmVudE5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgXG4gICAgLy8g5Yem55CG44GX44Gf5YiG44Gg44GR6YWN5YiX44GL44KJ5YmK6ZmkXG4gICAgaWYgKHJlbW92YWxzVG9Qcm9jZXNzID09PSB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGVuZGluZ1JlbW92YWxzID0gdGhpcy5fcGVuZGluZ1JlbW92YWxzLnNsaWNlKHJlbW92YWxzVG9Qcm9jZXNzKTtcbiAgICB9XG5cbiAgICAvLyBUaGVuIHByb2Nlc3MgYWRkaXRpb25zXG4gICAgY29uc3QgYWRkaXRpb25zVG9Qcm9jZXNzID0gTWF0aC5taW4odGhpcy5fcGVuZGluZ0FkZGl0aW9ucy5sZW5ndGgsIG1heE9wZXJhdGlvbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkaXRpb25zVG9Qcm9jZXNzOyBpKyspIHtcbiAgICAgIGNvbnN0IHsgZXZlbnROYW1lLCBjYWxsYmFjaywgcHJpb3JpdHksIG9uY2UgfSA9IHRoaXMuX3BlbmRpbmdBZGRpdGlvbnNbaV07XG4gICAgICBpZiAob25jZSkge1xuICAgICAgICB0aGlzLm9uY2UoZXZlbnROYW1lLCBjYWxsYmFjaywgcHJpb3JpdHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vbihldmVudE5hbWUsIGNhbGxiYWNrLCBwcmlvcml0eSk7XG4gICAgICB9XG4gICAgfVxuICAgIFxuICAgIC8vIOWHpueQhuOBl+OBn+WIhuOBoOOBkemFjeWIl+OBi+OCieWJiumZpFxuICAgIGlmIChhZGRpdGlvbnNUb1Byb2Nlc3MgPT09IHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nQWRkaXRpb25zID0gW107XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMgPSB0aGlzLl9wZW5kaW5nQWRkaXRpb25zLnNsaWNlKGFkZGl0aW9uc1RvUHJvY2Vzcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhbiBldmVudCB0byB0aGUgaGlzdG9yeVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZW1pdHRlZCBldmVudFxuICAgKiBAcGFyYW0geyp9IGRhdGEgLSBEYXRhIHBhc3NlZCB3aXRoIHRoZSBldmVudFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2FkZFRvSGlzdG9yeShldmVudE5hbWUsIGRhdGEpIHtcbiAgICAvLyBBZGQgdG8gaGlzdG9yeSB3aXRoIHRpbWVzdGFtcFxuICAgIHRoaXMuZXZlbnRIaXN0b3J5LnB1c2goe1xuICAgICAgZXZlbnROYW1lLFxuICAgICAgZGF0YSxcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgIH0pO1xuXG4gICAgLy8gVHJpbSBoaXN0b3J5IGlmIGl0IGV4Y2VlZHMgdGhlIGxpbWl0XG4gICAgaWYgKHRoaXMuZXZlbnRIaXN0b3J5Lmxlbmd0aCA+IHRoaXMub3B0aW9ucy5oaXN0b3J5TGltaXQpIHtcbiAgICAgIHRoaXMuZXZlbnRIaXN0b3J5LnNoaWZ0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgZXZlbnQgbmFtZXMgdG8gZW1pdCBiYXNlZCBvbiB0aGUgb3JpZ2luYWwgZXZlbnQgYW5kIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIFRoZSBvcmlnaW5hbCBldmVudCBuYW1lXG4gICAqIEByZXR1cm4ge3N0cmluZ1tdfSAtIEFycmF5IG9mIGV2ZW50IG5hbWVzIHRvIGVtaXRcbiAgICogQHByaXZhdGVcbiAgICovXG4gIF9nZXRFdmVudE5hbWVzRm9yRW1pc3Npb24oZXZlbnROYW1lKSB7XG4gICAgY29uc3QgZXZlbnROYW1lcyA9IFtldmVudE5hbWVdO1xuXG4gICAgLy8gQWRkIG5hbWVzcGFjZSBwYXJlbnQgZXZlbnRzIGlmIGVuYWJsZWRcbiAgICBpZiAodGhpcy5vcHRpb25zLmVuYWJsZU5hbWVzcGFjZXMgJiYgZXZlbnROYW1lLmluY2x1ZGVzKCcuJykpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gZXZlbnROYW1lLnNwbGl0KCcuJyk7XG4gICAgICAvLyDmnIDpganljJY6IOS4gOW6puOBq+WFqOmDqOOCkuioiOeul+OBm+OBmuW+kOOAheOBq+imquWQjeWJjeepuumWk+OCkuani+eviVxuICAgICAgbGV0IHBhcmVudE5hbWUgPSAnJztcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIHBhcmVudE5hbWUgPSBwYXJlbnROYW1lID8gYCR7cGFyZW50TmFtZX0uJHtwYXJ0c1tpXX1gIDogcGFydHNbaV07XG4gICAgICAgIGV2ZW50TmFtZXMucHVzaChwYXJlbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDmnIDpganljJY6IOODr+OCpOODq+ODieOCq+ODvOODieOBjOacieWKueOBquWgtOWQiOOBr+OAgeW/heimgeOBquODquOCueODiuODvOOBruOBv+ODnuODg+ODgeODs+OCsOOBmeOCi1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlV2lsZGNhcmRzKSB7XG4gICAgICAvLyDmnIDpganljJY6IOODquOCueODiuODvOOBruaVsOOBjOWkmuOBmeOBjuOCi+WgtOWQiOOBr+WItumZkOOBmeOCi1xuICAgICAgY29uc3QgbWF4TGlzdGVuZXJzVG9DaGVjayA9IDEwMDtcbiAgICAgIGxldCBjaGVja2VkQ291bnQgPSAwO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgdGhpcy5saXN0ZW5lcnMua2V5cygpKSB7XG4gICAgICAgIC8vIOODr+OCpOODq+ODieOCq+ODvOODieaWh+Wtl+OCkuWQq+OCgOWgtOWQiOOBruOBv+ODgeOCp+ODg+OCr1xuICAgICAgICBpZiAoIW5hbWUuaW5jbHVkZXMoJyonKSkgY29udGludWU7XG4gICAgICAgIFxuICAgICAgICAvLyDlh6bnkIbmuIjjgb/jga7jgqTjg5njg7Pjg4jlkI3jga/jgrnjgq3jg4Pjg5dcbiAgICAgICAgaWYgKGV2ZW50TmFtZXMuaW5jbHVkZXMobmFtZSkpIGNvbnRpbnVlO1xuICAgICAgICBcbiAgICAgICAgLy8g5pyA5aSn5Yi26ZmQ44Gr6YGU44GX44Gf44KJ5YGc5q2iXG4gICAgICAgIGlmICgrK2NoZWNrZWRDb3VudCA+IG1heExpc3RlbmVyc1RvQ2hlY2spIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g44Ov44Kk44Or44OJ44Kr44O844OJ44OR44K/44O844Oz44Gu57Ch5piT44OB44Kn44OD44KvXG4gICAgICAgIGlmICh0aGlzLl9tYXRjaGVzV2lsZGNhcmQobmFtZSwgZXZlbnROYW1lKSkge1xuICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBldmVudE5hbWVzO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgd2lsZGNhcmQgcGF0dGVybiBtYXRjaGVzIGFuIGV2ZW50IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHBhdHRlcm4gLSBUaGUgd2lsZGNhcmQgcGF0dGVybiB0byBjaGVja1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIGV2ZW50IG5hbWUgdG8gbWF0Y2ggYWdhaW5zdFxuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRydWUgaWYgdGhlIHBhdHRlcm4gbWF0Y2hlcyB0aGUgZXZlbnQgbmFtZVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX21hdGNoZXNXaWxkY2FyZChwYXR0ZXJuLCBldmVudE5hbWUpIHtcbiAgICAvLyDjg5Hjgr/jg7zjg7PjgoTlkI3liY3jgYznlbDluLjjgavplbfjgYTloLTlkIjjga/jg57jg4Pjg4Hjg7PjgrDjgpLoq6bjgoHjgovvvIjlronlhajlr77nrZbvvIlcbiAgICBpZiAocGF0dGVybi5sZW5ndGggPiAxMDAwIHx8IGV2ZW50TmFtZS5sZW5ndGggPiAxMDAwKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8g5Y2Y57SU44Gq44OB44Kn44OD44KvXG4gICAgaWYgKHBhdHRlcm4gPT09IGV2ZW50TmFtZSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8g5Y2Y57SU44Gq44Ov44Kk44Or44OJ44Kr44O844OJ44OB44Kn44OD44KvXG4gICAgaWYgKHBhdHRlcm4gPT09ICcqJykge1xuICAgICAgcmV0dXJuICFldmVudE5hbWUuaW5jbHVkZXMoJy4nKTtcbiAgICB9XG5cbiAgICBpZiAocGF0dGVybiA9PT0gJyoqJykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8g6KSH5pWw6ZqO5bGk44Gu44Ov44Kk44Or44OJ44Kr44O844OJICgqKikg44Gu5Yem55CGXG4gICAgaWYgKHBhdHRlcm4uaW5jbHVkZXMoJyoqJykpIHtcbiAgICAgIGNvbnN0IHBhcnRzID0gcGF0dGVybi5zcGxpdCgnKionKTtcbiAgICAgIFxuICAgICAgLy8g5pyA6YGp5YyWOiDmnIDlpKcy44Gk44Gu44OR44O844OI44Gu44G/44KS44K144Od44O844OIXG4gICAgICBpZiAocGFydHMubGVuZ3RoID4gMikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIOODkeOCv+ODvOODs+OBjCAnZ2FtZS4qKicg44Gu44KI44GG44Gq5b2i5byP44Gu5aC05ZCIXG4gICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyICYmIHBhcnRzWzFdID09PSAnJykge1xuICAgICAgICByZXR1cm4gZXZlbnROYW1lLnN0YXJ0c1dpdGgocGFydHNbMF0pO1xuICAgICAgfVxuXG4gICAgICAvLyDjg5Hjgr/jg7zjg7PjgYwgJyoqLmVuZCcg44Gu44KI44GG44Gq5b2i5byP44Gu5aC05ZCIXG4gICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyICYmIHBhcnRzWzBdID09PSAnJykge1xuICAgICAgICByZXR1cm4gZXZlbnROYW1lLmVuZHNXaXRoKHBhcnRzWzFdKTtcbiAgICAgIH1cblxuICAgICAgLy8g44OR44K/44O844Oz44GMICdzdGFydC4qKi5lbmQnIOOBruOCiOOBhuOBquW9ouW8j+OBruWgtOWQiFxuICAgICAgaWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgICByZXR1cm4gZXZlbnROYW1lLnN0YXJ0c1dpdGgocGFydHNbMF0pICYmIGV2ZW50TmFtZS5lbmRzV2l0aChwYXJ0c1sxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8g5Y2Y5LiA6ZqO5bGk44Gu44Ov44Kk44Or44OJ44Kr44O844OJICgqKSDjga7lh6bnkIZcbiAgICBpZiAocGF0dGVybi5pbmNsdWRlcygnKicpICYmICFwYXR0ZXJuLmluY2x1ZGVzKCcqKicpKSB7XG4gICAgICAvLyDmraPopo/ooajnj77jgpLkvb/jgo/jgarjgYTmnIDpganljJbjgZXjgozjgZ/mlrnms5VcbiAgICAgIGNvbnN0IHBhdHRlcm5QYXJ0cyA9IHBhdHRlcm4uc3BsaXQoJy4nKTtcbiAgICAgIGNvbnN0IGV2ZW50UGFydHMgPSBldmVudE5hbWUuc3BsaXQoJy4nKTtcbiAgICAgIFxuICAgICAgaWYgKHBhdHRlcm5QYXJ0cy5sZW5ndGggIT09IGV2ZW50UGFydHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXR0ZXJuUGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHBhdHRlcm5QYXJ0c1tpXSA9PT0gJyonKSB7XG4gICAgICAgICAgY29udGludWU7IC8vIOODr+OCpOODq+ODieOCq+ODvOODieOBr+S9leOBq+OCguODnuODg+ODgeOBmeOCi1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXR0ZXJuUGFydHNbaV0gIT09IGV2ZW50UGFydHNbaV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50U3lzdGVtOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLFdBQVcsQ0FBQztFQUNoQjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLFdBQVdBLENBQUNDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUN4QjtJQUNBLElBQUksQ0FBQ0EsT0FBTyxHQUFHO01BQ2JDLGdCQUFnQixFQUFFLElBQUk7TUFDdEJDLFNBQVMsRUFBRSxLQUFLO01BQ2hCQyxlQUFlLEVBQUUsS0FBSztNQUN0QkMsWUFBWSxFQUFFLEdBQUc7TUFDakIsR0FBR0o7SUFDTCxDQUFDOztJQUVEO0lBQ0EsSUFBSSxDQUFDSyxTQUFTLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7O0lBRTFCO0lBQ0EsSUFBSSxDQUFDQyxZQUFZLEdBQUcsRUFBRTs7SUFFdEI7SUFDQSxJQUFJLENBQUNDLFNBQVMsR0FBRyxLQUFLOztJQUV0QjtJQUNBLElBQUksQ0FBQ0MsaUJBQWlCLEdBQUcsRUFBRTtJQUMzQixJQUFJLENBQUNDLGdCQUFnQixHQUFHLEVBQUU7RUFDNUI7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxFQUFFQSxDQUFDQyxTQUFTLEVBQUVDLFFB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