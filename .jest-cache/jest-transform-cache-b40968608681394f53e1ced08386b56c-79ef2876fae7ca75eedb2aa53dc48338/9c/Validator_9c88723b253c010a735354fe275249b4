6127dda977577209b17282b85f2bdb0f
import ErrorCatalog from './ErrorCatalog';
import ErrorLevel from './ErrorLevel';
export default class Validator {
  constructor(errorHandler = null) {
    this.errorHandler = errorHandler;
    this.customValidators = new Map();
  }
  registerValidator(name, validatorFn) {
    this.customValidators.set(name, validatorFn);
    return this;
  }
  validateExists(value, errorCode, customMessage = null, context = {}) {
    if (value === undefined || value === null) {
      if (this.errorHandler) {
        const error = this.errorHandler.createError(errorCode, customMessage, {
          ...context,
          value
        });
        return false;
      }
      return false;
    }
    return true;
  }
  validateCondition(condition, errorCode, customMessage = null, context = {}) {
    if (!condition) {
      if (this.errorHandler) {
        const error = this.errorHandler.createError(errorCode, customMessage, context);
        return false;
      }
      return false;
    }
    return true;
  }
  validateType(value, expectedType, errorCode, customMessage = null, context = {}) {
    let isValid = false;
    switch (expectedType) {
      case 'string':
        isValid = typeof value === 'string';
        break;
      case 'number':
        isValid = typeof value === 'number' && !isNaN(value);
        break;
      case 'integer':
        isValid = Number.isInteger(value);
        break;
      case 'positive':
        isValid = typeof value === 'number' && value > 0;
        break;
      case 'nonnegative':
        isValid = typeof value === 'number' && value >= 0;
        break;
      case 'boolean':
        isValid = typeof value === 'boolean';
        break;
      case 'object':
        isValid = value !== null && typeof value === 'object' && !Array.isArray(value);
        break;
      case 'array':
        isValid = Array.isArray(value);
        break;
      case 'function':
        isValid = typeof value === 'function';
        break;
      case 'null':
        isValid = value === null;
        break;
      case 'undefined':
        isValid = value === undefined;
        break;
      default:
        isValid = false;
    }
    if (!isValid) {
      if (this.errorHandler) {
        const error = this.errorHandler.createError(errorCode, customMessage, {
          ...context,
          value,
          expectedType
        });
      }
      return false;
    }
    return true;
  }
  validate(validatorName, value, errorCode, context = {}) {
    const validator = this.customValidators.get(validatorName);
    if (!validator) {
      if (this.errorHandler) {
        this.errorHandler.createError('VALIDATOR_NOT_FOUND', `バリデータ ${validatorName} が見つかりません`, context);
      }
      throw new Error(`Validator ${validatorName} not found`);
    }
    const isValid = validator(value, context);
    if (!isValid && this.errorHandler) {
      this.errorHandler.createError(errorCode, `バリデーションに失敗しました: ${validatorName}`, context);
    }
    return isValid;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFcnJvckNhdGFsb2ciLCJFcnJvckxldmVsIiwiVmFsaWRhdG9yIiwiY29uc3RydWN0b3IiLCJlcnJvckhhbmRsZXIiLCJjdXN0b21WYWxpZGF0b3JzIiwiTWFwIiwicmVnaXN0ZXJWYWxpZGF0b3IiLCJuYW1lIiwidmFsaWRhdG9yRm4iLCJzZXQiLCJ2YWxpZGF0ZUV4aXN0cyIsInZhbHVlIiwiZXJyb3JDb2RlIiwiY3VzdG9tTWVzc2FnZSIsImNvbnRleHQiLCJ1bmRlZmluZWQiLCJlcnJvciIsImNyZWF0ZUVycm9yIiwidmFsaWRhdGVDb25kaXRpb24iLCJjb25kaXRpb24iLCJ2YWxpZGF0ZVR5cGUiLCJleHBlY3RlZFR5cGUiLCJpc1ZhbGlkIiwiaXNOYU4iLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJBcnJheSIsImlzQXJyYXkiLCJ2YWxpZGF0ZSIsInZhbGlkYXRvck5hbWUiLCJ2YWxpZGF0b3IiLCJnZXQiLCJFcnJvciJdLCJzb3VyY2VzIjpbIlZhbGlkYXRvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRXJyb3JDYXRhbG9nIGZyb20gJy4vRXJyb3JDYXRhbG9nJztcbmltcG9ydCBFcnJvckxldmVsIGZyb20gJy4vRXJyb3JMZXZlbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZhbGlkYXRvciB7XG4gIGNvbnN0cnVjdG9yKGVycm9ySGFuZGxlciA9IG51bGwpIHtcbiAgICB0aGlzLmVycm9ySGFuZGxlciA9IGVycm9ySGFuZGxlcjtcbiAgICB0aGlzLmN1c3RvbVZhbGlkYXRvcnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICByZWdpc3RlclZhbGlkYXRvcihuYW1lLCB2YWxpZGF0b3JGbikge1xuICAgIHRoaXMuY3VzdG9tVmFsaWRhdG9ycy5zZXQobmFtZSwgdmFsaWRhdG9yRm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgdmFsaWRhdGVFeGlzdHModmFsdWUsIGVycm9yQ29kZSwgY3VzdG9tTWVzc2FnZSA9IG51bGwsIGNvbnRleHQgPSB7fSkge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSB7XG4gICAgICBpZiAodGhpcy5lcnJvckhhbmRsZXIpIHtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihcbiAgICAgICAgICBlcnJvckNvZGUsXG4gICAgICAgICAgY3VzdG9tTWVzc2FnZSxcbiAgICAgICAgICB7IC4uLmNvbnRleHQsIHZhbHVlIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhbGlkYXRlQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JDb2RlLCBjdXN0b21NZXNzYWdlID0gbnVsbCwgY29udGV4dCA9IHt9KSB7XG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcikge1xuICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuZXJyb3JIYW5kbGVyLmNyZWF0ZUVycm9yKFxuICAgICAgICAgIGVycm9yQ29kZSxcbiAgICAgICAgICBjdXN0b21NZXNzYWdlLFxuICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhbGlkYXRlVHlwZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlLCBlcnJvckNvZGUsIGN1c3RvbU1lc3NhZ2UgPSBudWxsLCBjb250ZXh0ID0ge30pIHtcbiAgICBsZXQgaXNWYWxpZCA9IGZhbHNlO1xuXG4gICAgc3dpdGNoIChleHBlY3RlZFR5cGUpIHtcbiAgICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICAgIGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ251bWJlcic6XG4gICAgICAgIGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaW50ZWdlcic6XG4gICAgICAgIGlzVmFsaWQgPSBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwb3NpdGl2ZSc6XG4gICAgICAgIGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlID4gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdub25uZWdhdGl2ZSc6XG4gICAgICAgIGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmIHZhbHVlID49IDA7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICAgIGlzVmFsaWQgPSB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBpc1ZhbGlkID0gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICBpc1ZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgICBpc1ZhbGlkID0gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ251bGwnOlxuICAgICAgICBpc1ZhbGlkID0gdmFsdWUgPT09IG51bGw7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndW5kZWZpbmVkJzpcbiAgICAgICAgaXNWYWxpZCA9IHZhbHVlID09PSB1bmRlZmluZWQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaXNWYWxpZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgaWYgKHRoaXMuZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgIGNvbnN0IGVycm9yID0gdGhpcy5lcnJvckhhbmRsZXIuY3JlYXRlRXJyb3IoXG4gICAgICAgICAgZXJyb3JDb2RlLFxuICAgICAgICAgIGN1c3RvbU1lc3NhZ2UsXG4gICAgICAgICAgeyAuLi5jb250ZXh0LCB2YWx1ZSwgZXhwZWN0ZWRUeXBlIH1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhbGlkYXRlKHZhbGlkYXRvck5hbWUsIHZhbHVlLCBlcnJvckNvZGUsIGNvbnRleHQgPSB7fSkge1xuICAgIGNvbnN0IHZhbGlkYXRvciA9IHRoaXMuY3VzdG9tVmFsaWRhdG9ycy5nZXQodmFsaWRhdG9yTmFtZSk7XG4gICAgXG4gICAgaWYgKCF2YWxpZGF0b3IpIHtcbiAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcikge1xuICAgICAgICB0aGlzLmVycm9ySGFuZGxlci5jcmVhdGVFcnJvcihcbiAgICAgICAgICAnVkFMSURBVE9SX05PVF9GT1VORCcsIFxuICAgICAgICAgIGDjg5Djg6rjg4fjg7zjgr8gJHt2YWxpZGF0b3JOYW1lfSDjgYzopovjgaTjgYvjgorjgb7jgZvjgpNgLCBcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFZhbGlkYXRvciAke3ZhbGlkYXRvck5hbWV9IG5vdCBmb3VuZGApO1xuICAgIH1cblxuICAgIGNvbnN0IGlzVmFsaWQgPSB2YWxpZGF0b3IodmFsdWUsIGNvbnRleHQpO1xuICAgIFxuICAgIGlmICghaXNWYWxpZCAmJiB0aGlzLmVycm9ySGFuZGxlcikge1xuICAgICAgdGhpcy5lcnJvckhhbmRsZXIuY3JlYXRlRXJyb3IoXG4gICAgICAgIGVycm9yQ29kZSwgXG4gICAgICAgIGDjg5Djg6rjg4fjg7zjgrfjg6fjg7PjgavlpLHmlZfjgZfjgb7jgZfjgZ86ICR7dmFsaWRhdG9yTmFtZX1gLCBcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNWYWxpZDtcbiAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxZQUFZLE1BQU0sZ0JBQWdCO0FBQ3pDLE9BQU9DLFVBQVUsTUFBTSxjQUFjO0FBRXJDLGVBQWUsTUFBTUMsU0FBUyxDQUFDO0VBQzdCQyxXQUFXQSxDQUFDQyxZQUFZLEdBQUcsSUFBSSxFQUFFO0lBQy9CLElBQUksQ0FBQ0EsWUFBWSxHQUFHQSxZQUFZO0lBQ2hDLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7RUFDbkM7RUFFQUMsaUJBQWlCQSxDQUFDQyxJQUFJLEVBQUVDLFdBQVcsRUFBRTtJQUNuQyxJQUFJLENBQUNKLGdCQUFnQixDQUFDSyxHQUFHLENBQUNGLElBQUksRUFBRUMsV0FBVyxDQUFDO0lBQzVDLE9BQU8sSUFBSTtFQUNiO0VBRUFFLGNBQWNBLENBQUNDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxhQUFhLEdBQUcsSUFBSSxFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDbkUsSUFBSUgsS0FBSyxLQUFLSSxTQUFTLElBQUlKLEtBQUssS0FBSyxJQUFJLEVBQUU7TUFDekMsSUFBSSxJQUFJLENBQUNSLFlBQVksRUFBRTtRQUNyQixNQUFNYSxLQUFLLEdBQUcsSUFBSSxDQUFDYixZQUFZLENBQUNjLFdBQVcsQ0FDekNMLFNBQVMsRUFDVEMsYUFBYSxFQUNiO1VBQUUsR0FBR0MsT0FBTztVQUFFSDtRQUFNLENBQ3RCLENBQUM7UUFDRCxPQUFPLEtBQUs7TUFDZDtNQUNBLE9BQU8sS0FBSztJQUNkO0lBQ0EsT0FBTyxJQUFJO0VBQ2I7RUFFQU8saUJBQWlCQSxDQUFDQyxTQUFTLEVBQUVQLFNBQVMsRUFBRUMsYUFBYSxHQUFHLElBQUksRUFBRUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQzFFLElBQUksQ0FBQ0ssU0FBUyxFQUFFO01BQ2QsSUFBSSxJQUFJLENBQUNoQixZQUFZLEVBQUU7UUFDckIsTUFBTWEsS0FBSyxHQUFHLElBQUksQ0FBQ2IsWUFBWSxDQUFDYyxXQUFXLENBQ3pDTCxTQUFTLEVBQ1RDLGFBQWEsRUFDYkMsT0FDRixDQUFDO1FBQ0QsT0FBTyxLQUFLO01BQ2Q7TUFDQSxPQUFPLEtBQUs7SUFDZDtJQUNBLE9BQU8sSUFBSTtFQUNiO0VBRUFNLFlBQVlBLENBQUNULEtBQUssRUFBRVUsWUFBWSxFQUFFVCxTQUFTLEVBQUVDLGFBQWEsR0FBRyxJQUFJLEVBQUVDLE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRTtJQUMvRSxJQUFJUSxPQUFPLEdBQUcsS0FBSztJQUVuQixRQUFRRCxZQUFZO01BQ2xCLEtBQUssUUFBUTtRQUNYQyxPQUFPLEdBQUcsT0FBT1gsS0FBSyxLQUFLLFFBQVE7UUFDbkM7TUFDRixLQUFLLFFBQVE7UUFDWFcsT0FBTyxHQUFHLE9BQU9YLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQ1ksS0FBSyxDQUFDWixLQUFLLENBQUM7UUFDcEQ7TUFDRixLQUFLLFNBQVM7UUFDWlcsT0FBTyxHQUFHRSxNQUFNLENBQUNDLFNBQVMsQ0FBQ2QsS0FBSyxDQUFDO1FBQ2pDO01BQ0YsS0FBSyxVQUFVO1FBQ2JXLE9BQU8sR0FBRyxPQUFPWCxLQUFLLEtBQUssUUFBUSxJQUFJQSxLQUFLLEdBQUcsQ0FBQztRQUNoRDtNQUNGLEtBQUssYUFBYTtRQUNoQlcsT0FBTyxHQUFHLE9BQU9YLEtBQUssS0FBSyxRQUFRLElBQUlBLEtBQUssSUFBSSxDQUFDO1FBQ2pEO01BQ0YsS0FBSyxTQUFTO1FBQ1pXLE9BQU8sR0FBRyxPQUFPWCxLQUFLLEtBQUssU0FBUztRQUNwQztNQUNGLEtBQUssUUFBUTtRQUNYVyxPQUFPLEdBQUdYLEtBQUssS0FBSyxJQUFJLElBQUksT0FBT0EsS0FBSyxLQUFLLFFBQVEsSUFBSSxDQUFDZSxLQUFLLENBQUNDLE9BQU8sQ0FBQ2hCLEtBQUssQ0FBQztRQUM5RTtNQUNGLEtBQUssT0FBTztRQUNWVyxPQUFPLEdBQUdJLEtBQUssQ0FBQ0MsT0FBTyxDQUFDaEIsS0FBSyxDQUFDO1FBQzlCO01BQ0YsS0FBSyxVQUFVO1FBQ2JXLE9BQU8sR0FBRyxPQUFPWCxLQUFLLEtBQUssVUFBVTtRQUNyQztNQUNGLEtBQUssTUFBTTtRQUNUVyxPQUFPLEdBQUdYLEtBQUssS0FBSyxJQUFJO1FBQ3hCO01BQ0YsS0FBSyxXQUFXO1FBQ2RXLE9BQU8sR0FBR1gsS0FBSyxLQUFLSSxTQUFTO1FBQzdCO01BQ0Y7UUFDRU8sT0FBTyxHQUFHLEtBQUs7SUFDbkI7SUFFQSxJQUFJLENBQUNBLE9BQU8sRUFBRTtNQUNaLElBQUksSUFBSSxDQUFDbkIsWUFBWSxFQUFFO1FBQ3JCLE1BQU1hLEtBQUssR0FBRyxJQUFJLENBQUNiLFlBQVksQ0FBQ2MsV0FBVyxDQUN6Q0wsU0FBUyxFQUNUQyxhQUFhLEVBQ2I7VUFBRSxHQUFHQyxPQUFPO1VBQUVILEtBQUs7VUFBRVU7UUFBYSxDQUNwQyxDQUFDO01BQ0g7TUFDQSxPQUFPLEtBQUs7SUFDZDtJQUVBLE9BQU8sSUFBSTtFQUNiO0VBRUFPLFFBQVFBLENBQUNDLGFBQWEsRUFBRWxCLEtBQUssRUFBRUMsU0FBUyxFQUFFRSxPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdEQsTUFBTWdCLFNBQVMsR0FBRyxJQUFJLENBQUMxQixnQkFBZ0IsQ0FBQzJCLEdBQUcsQ0FBQ0YsYUFBYSxDQUFDO0lBRTFELElBQUksQ0FBQ0MsU0FBUyxFQUFFO01BQ2QsSUFBSSxJQUFJLENBQUMzQixZQUFZLEVBQUU7UUFDckIsSUFBSSxDQUFDQSxZQUFZLENBQUNjLFdBQVcsQ0FDM0IscUJBQXFCLEVBQ3JCLFNBQVNZLGFBQWEsV0FBVyxFQUNqQ2YsT0FDRixDQUFDO01BQ0g7TUFDQSxNQUFNLElBQUlrQixLQUFLLENBQUMsYUFBYUgsYUFBYSxZQUFZLENBQUM7SUFDekQ7SUFFQSxNQUFNUCxPQUFPLEdBQUdRLFNBQVMsQ0FBQ25CLEtBQUssRUFBRUcsT0FBTyxDQUFDO0lBRXpDLElBQUksQ0FBQ1EsT0FBTyxJQUFJLElBQUksQ0FBQ25CLFlBQVksRUFBRTtNQUNqQyxJQUFJLENBQUNBLFlBQVksQ0FBQ2MsV0FBVyxDQUMzQkwsU0FBUyxFQUNULG1CQUFtQmlCLGFBQWEsRUFBRSxFQUNsQ2YsT0FDRixDQUFDO0lBQ0g7SUFFQSxPQUFPUSxPQUFPO0VBQ2hCO0FBQ0YiLCJpZ25vcmVMaXN0IjpbXX0=