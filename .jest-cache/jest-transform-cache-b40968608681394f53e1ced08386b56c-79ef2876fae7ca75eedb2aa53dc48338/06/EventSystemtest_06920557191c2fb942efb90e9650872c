b7df3304f8b5289fa7c3a767ad467208
/**
 * Unit tests for the EventSystem module
 */

const EventSystem = require('../../../../src/core/event/EventSystem');
describe('EventSystem', () => {
  // Basic functionality tests
  describe('Basic event handling', () => {
    test('should register and trigger event listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.on('testEvent', mockCallback);
      eventSystem.emit('testEvent', {
        data: 'test'
      });
      expect(mockCallback).toHaveBeenCalledTimes(1);
      expect(mockCallback).toHaveBeenCalledWith({
        data: 'test'
      });
    });
    test('should register one-time listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.once('testEvent', mockCallback);
      eventSystem.emit('testEvent');
      eventSystem.emit('testEvent');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should remove listeners correctly', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.off('testEvent', mockCallback1);
      eventSystem.emit('testEvent');
      expect(mockCallback1).not.toHaveBeenCalled();
      expect(mockCallback2).toHaveBeenCalledTimes(1);
    });
    test('should remove all listeners for an event', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.off('testEvent');
      eventSystem.emit('testEvent');
      expect(mockCallback1).not.toHaveBeenCalled();
      expect(mockCallback2).not.toHaveBeenCalled();
    });
  });

  // Priority tests
  describe('Listener priorities', () => {
    test('should execute listeners in order of priority', () => {
      const eventSystem = new EventSystem();
      const order = [];
      eventSystem.on('testEvent', () => order.push('low'), 1);
      eventSystem.on('testEvent', () => order.push('high'), 10);
      eventSystem.on('testEvent', () => order.push('medium'), 5);
      eventSystem.emit('testEvent');
      expect(order).toEqual(['high', 'medium', 'low']);
    });
  });

  // Namespace support tests
  describe('Namespace support', () => {
    test('should propagate events to parent namespaces', () => {
      const eventSystem = new EventSystem({
        enableNamespaces: true
      });
      const mockParent = jest.fn();
      const mockChild = jest.fn();
      eventSystem.on('parent', mockParent);
      eventSystem.on('parent.child', mockChild);
      eventSystem.emit('parent.child.grandchild', 'data');
      expect(mockParent).toHaveBeenCalledTimes(1);
      expect(mockChild).toHaveBeenCalledTimes(1);
    });
    test('should not propagate events when namespaces are disabled', () => {
      const eventSystem = new EventSystem({
        enableNamespaces: false
      });
      const mockParent = jest.fn();
      eventSystem.on('parent', mockParent);
      eventSystem.emit('parent.child', 'data');
      expect(mockParent).not.toHaveBeenCalled();
    });
  });

  // Wildcard support tests
  describe('Wildcard support', () => {
    test('should match single-level wildcards', () => {
      const eventSystem = new EventSystem({
        enableWildcards: true
      });
      const mockCallback = jest.fn();
      eventSystem.on('user.*.action', mockCallback);
      eventSystem.emit('user.john.action', 'data');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should match multi-level wildcards', () => {
      const eventSystem = new EventSystem({
        enableWildcards: true
      });
      const mockCallback = jest.fn();
      eventSystem.on('game.**', mockCallback);
      eventSystem.emit('game.phase.night.start', 'data');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should not match wildcards when disabled', () => {
      const eventSystem = new EventSystem({
        enableWildcards: false
      });
      const mockCallback = jest.fn();
      eventSystem.on('user.*.action', mockCallback);
      eventSystem.emit('user.john.action', 'data');
      expect(mockCallback).not.toHaveBeenCalled();
    });
  });

  // Error handling tests
  describe('Error handling', () => {
    test('should continue executing listeners when one throws an error', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn().mockImplementation(() => {
        throw new Error('Test error');
      });
      const mockCallback2 = jest.fn();

      // Mock console.error to prevent test output pollution
      const originalConsoleError = console.error;
      console.error = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.emit('testEvent');
      expect(mockCallback1).toHaveBeenCalledTimes(1);
      expect(mockCallback2).toHaveBeenCalledTimes(1);

      // Restore console.error
      console.error = originalConsoleError;
    });
  });

  // Utility method tests
  describe('Utility methods', () => {
    test('hasListeners should detect registered listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.on('testEvent', mockCallback);
      expect(eventSystem.hasListeners('testEvent')).toBe(true);
      expect(eventSystem.hasListeners('nonExistentEvent')).toBe(false);
    });
    test('listenerCount should return the correct number of listeners', () => {
      const eventSystem = new EventSystem();
      eventSystem.on('testEvent', () => {});
      eventSystem.on('testEvent', () => {});
      expect(eventSystem.listenerCount('testEvent')).toBe(2);
      expect(eventSystem.listenerCount('nonExistentEvent')).toBe(0);
    });
    test('eventNames should return all registered event names', () => {
      const eventSystem = new EventSystem();
      eventSystem.on('event1', () => {});
      eventSystem.on('event2', () => {});
      expect(eventSystem.eventNames()).toContain('event1');
      expect(eventSystem.eventNames()).toContain('event2');
      expect(eventSystem.eventNames().length).toBe(2);
    });
  });

  // Debug mode and event history tests
  describe('Debug mode and event history', () => {
    test('should record event history in debug mode', () => {
      const eventSystem = new EventSystem({
        debugMode: true
      });
      eventSystem.emit('event1', {
        data: 1
      });
      eventSystem.emit('event2', {
        data: 2
      });
      const history = eventSystem.getEventHistory();
      expect(history.length).toBe(2);
      expect(history[0].eventName).toBe('event1');
      expect(history[1].eventName).toBe('event2');
    });
    test('should not record event history when debug mode is disabled', () => {
      const eventSystem = new EventSystem({
        debugMode: false
      });
      eventSystem.emit('event1', {
        data: 1
      });
      const history = eventSystem.getEventHistory();
      expect(history.length).toBe(0);
    });
  });

  // Edge cases
  describe('Edge cases', () => {
    test('should handle nested event emissions', () => {
      const eventSystem = new EventSystem();
      const order = [];
      eventSystem.on('event1', () => {
        order.push('event1');
        eventSystem.emit('event2');
      });
      eventSystem.on('event2', () => {
        order.push('event2');
      });
      eventSystem.emit('event1');
      expect(order).toEqual(['event1', 'event2']);
    });
    test('should handle adding/removing listeners during emission', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      const mockCallback3 = jest.fn().mockImplementation(() => {
        // Add and remove listeners during emission
        eventSystem.on('testEvent', mockCallback3);
        eventSystem.off('testEvent', mockCallback1);
      });
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback3);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.emit('testEvent');

      // The first listener should have been called once
      expect(mockCallback1).toHaveBeenCalledTimes(1);
      // The second listener should have been called once
      expect(mockCallback3).toHaveBeenCalledTimes(1);
      // The third listener should have been called once
      expect(mockCallback2).toHaveBeenCalledTimes(1);
    });
    test('should throw an error for invalid event names', () => {
      const eventSystem = new EventSystem();
      expect(() => {
        eventSystem.on('', () => {});
      }).toThrow();
      expect(() => {
        eventSystem.on(null, () => {});
      }).toThrow();
    });
    test('should throw an error for invalid callbacks', () => {
      const eventSystem = new EventSystem();
      expect(() => {
        eventSystem.on('testEvent', 'not a function');
      }).toThrow();
      expect(() => {
        eventSystem.on('testEvent', null);
      }).toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,