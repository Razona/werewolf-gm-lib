{"version":3,"names":["ErrorCatalog","ErrorLevel","getErrorByCode","getErrorsByLevel","require","describe","test","requiredCategories","forEach","category","expect","toHaveProperty","Object","keys","length","toBeGreaterThan","each","requiredErrors","errorName","error","toBeDefined","sampleErrors","categoryErrors","values","push","code","toMatch","toContain","level","message","details","codePatterns","pattern","testCases","errorObj","toBe","toBeNull","undefined","errors","Array","isArray","toEqual","fatalErrors","FATAL","some","e","SYSTEM","INTERNAL_ERROR","errorLevelErrors","ERROR","PLAYER","INVALID_PLAYER_ID","warningErrors","WARNING","DEPRECATED_FEATURE","infoErrors","INFO","GAME_STATE_CHANGE","levels","uniqueLevels","Set","size","allCodes","duplicates","has","add","totalErrorCount","reduce","count"],"sources":["ErrorCatalog.test.js"],"sourcesContent":["/**\n * ErrorCatalog unit tests\n */\n\nconst { ErrorCatalog, ErrorLevel, getErrorByCode, getErrorsByLevel } = require('../../../../src/core/error/ErrorCatalog');\n\ndescribe('ErrorCatalog', () => {\n  // Test overall structure\n  test('should have appropriate error categories', () => {\n    // Required categories\n    const requiredCategories = [\n      'PLAYER', 'ROLE', 'ACTION', 'VOTE', 'PHASE', 'SYSTEM', 'STATE', 'EXTENSION', 'WARNING', 'INFO'\n    ];\n    \n    requiredCategories.forEach(category => {\n      expect(ErrorCatalog).toHaveProperty(category);\n      expect(Object.keys(ErrorCatalog[category]).length).toBeGreaterThan(0);\n    });\n  });\n\n  // Test specific errors with parameterized tests\n  describe.each([\n    ['PLAYER', ['INVALID_PLAYER_ID', 'DEAD_PLAYER_ACTION', 'PLAYER_ALREADY_EXISTS', 'MAX_PLAYERS_REACHED']],\n    ['ROLE', ['INVALID_ROLE_ASSIGNMENT', 'RESTRICTED_ABILITY', 'INVALID_ROLE_CONFIGURATION']],\n    ['ACTION', ['INVALID_ACTION_TARGET', 'ACTION_PHASE_MISMATCH', 'DUPLICATE_ACTION']],\n    ['VOTE', ['INVALID_VOTE_TARGET', 'DUPLICATE_VOTE', 'VOTE_PHASE_MISMATCH']],\n    ['PHASE', ['INVALID_PHASE_TRANSITION', 'INCOMPLETE_PHASE_ACTIONS', 'GAME_ALREADY_STARTED']],\n    ['SYSTEM', ['INTERNAL_ERROR', 'INVALID_CONFIGURATION', 'NOT_IMPLEMENTED']]\n  ])('ErrorCatalog.%s', (category, requiredErrors) => {\n    test(`should have all required ${category} errors`, () => {\n      requiredErrors.forEach(errorName => {\n        expect(ErrorCatalog[category]).toHaveProperty(errorName);\n        const error = ErrorCatalog[category][errorName];\n        expect(error).toBeDefined();\n      });\n    });\n  });\n\n  // Test error object schema with parameterized tests\n  describe('error structure', () => {\n    // Sample multiple errors from each category\n    const sampleErrors = [];\n    Object.keys(ErrorCatalog).forEach(category => {\n      const categoryErrors = Object.values(ErrorCatalog[category]);\n      if (categoryErrors.length > 0) {\n        // Add at least one error from each category\n        sampleErrors.push(categoryErrors[0]);\n        \n        // If category has more than one error, add another\n        if (categoryErrors.length > 1) {\n          sampleErrors.push(categoryErrors[categoryErrors.length - 1]);\n        }\n      }\n    });\n    \n    test.each(sampleErrors)('should have correct structure for error %p', (error) => {\n      expect(error).toHaveProperty('code');\n      expect(error).toHaveProperty('message');\n      expect(error).toHaveProperty('details');\n      expect(error).toHaveProperty('level');\n      \n      // Check code format (E/W/I followed by 4 digits)\n      expect(error.code).toMatch(/^[EWI]\\d{4}$/);\n      \n      // Check level is a valid value\n      expect(Object.values(ErrorLevel)).toContain(error.level);\n      \n      // Message should be non-empty\n      expect(error.message.length).toBeGreaterThan(0);\n      \n      // Details should be non-empty\n      expect(error.details.length).toBeGreaterThan(0);\n    });\n  });\n\n  // Test error code convention with parameterized tests\n  describe('error code convention', () => {\n    const codePatterns = [\n      { category: 'PLAYER', pattern: /^E01\\d{2}$/ },\n      { category: 'ROLE', pattern: /^E02\\d{2}$/ },\n      { category: 'ACTION', pattern: /^E03\\d{2}$/ },\n      { category: 'VOTE', pattern: /^E04\\d{2}$/ },\n      { category: 'PHASE', pattern: /^E05\\d{2}$/ },\n      { category: 'SYSTEM', pattern: /^E06\\d{2}$/ },\n      { category: 'STATE', pattern: /^E07\\d{2}$/ },\n      { category: 'EXTENSION', pattern: /^E08\\d{2}$/ },\n      { category: 'WARNING', pattern: /^W01\\d{2}$/ },\n      { category: 'INFO', pattern: /^I01\\d{2}$/ }\n    ];\n    \n    test.each(codePatterns)('$category error codes should follow pattern $pattern', ({ category, pattern }) => {\n      Object.values(ErrorCatalog[category]).forEach(error => {\n        expect(error.code).toMatch(pattern);\n      });\n    });\n  });\n\n  // Test utility functions\n  describe('getErrorByCode', () => {\n    // Valid error codes from different categories\n    const testCases = [\n      { code: 'E0101', category: 'PLAYER', error: 'INVALID_PLAYER_ID' },\n      { code: 'E0201', category: 'ROLE', error: 'INVALID_ROLE_ASSIGNMENT' },\n      { code: 'E0301', category: 'ACTION', error: 'INVALID_ACTION_TARGET' },\n      { code: 'W0101', category: 'WARNING', error: 'DEPRECATED_FEATURE' },\n      { code: 'I0101', category: 'INFO', error: 'GAME_STATE_CHANGE' }\n    ];\n    \n    test.each(testCases)('should retrieve $category.$error with code $code', ({ code, category, error }) => {\n      const errorObj = getErrorByCode(code);\n      expect(errorObj).toBe(ErrorCatalog[category][error]);\n    });\n    \n    test('should handle non-existent error codes gracefully', () => {\n      // Test with completely invalid code\n      expect(getErrorByCode('E9999')).toBeNull();\n      \n      // Test with malformed code\n      expect(getErrorByCode('EXYZ')).toBeNull();\n      \n      // Test with empty string\n      expect(getErrorByCode('')).toBeNull();\n      \n      // Test with null\n      expect(getErrorByCode(null)).toBeNull();\n      \n      // Test with undefined\n      expect(getErrorByCode(undefined)).toBeNull();\n    });\n  });\n  \n  describe('getErrorsByLevel', () => {\n    // Test for all error levels\n    test.each(Object.values(ErrorLevel))('should return errors of level %s', (level) => {\n      const errors = getErrorsByLevel(level);\n      \n      // Should return an array\n      expect(Array.isArray(errors)).toBe(true);\n      \n      // Should have at least one error of this level\n      expect(errors.length).toBeGreaterThan(0);\n      \n      // All returned errors should have the specified level\n      errors.forEach(error => {\n        expect(error.level).toBe(level);\n      });\n    });\n    \n    test('should handle invalid levels gracefully', () => {\n      // Test with invalid level string\n      expect(getErrorsByLevel('INVALID_LEVEL')).toEqual([]);\n      \n      // Test with null\n      expect(getErrorsByLevel(null)).toEqual([]);\n      \n      // Test with undefined\n      expect(getErrorsByLevel(undefined)).toEqual([]);\n    });\n    \n    test('should find expected errors for each level', () => {\n      // FATAL level errors\n      const fatalErrors = getErrorsByLevel(ErrorLevel.FATAL);\n      expect(fatalErrors.some(e => e.code === ErrorCatalog.SYSTEM.INTERNAL_ERROR.code)).toBe(true);\n      \n      // ERROR level errors\n      const errorLevelErrors = getErrorsByLevel(ErrorLevel.ERROR);\n      expect(errorLevelErrors.some(e => e.code === ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code)).toBe(true);\n      \n      // WARNING level errors\n      const warningErrors = getErrorsByLevel(ErrorLevel.WARNING);\n      expect(warningErrors.some(e => e.code === ErrorCatalog.WARNING.DEPRECATED_FEATURE.code)).toBe(true);\n      \n      // INFO level errors\n      const infoErrors = getErrorsByLevel(ErrorLevel.INFO);\n      expect(infoErrors.some(e => e.code === ErrorCatalog.INFO.GAME_STATE_CHANGE.code)).toBe(true);\n    });\n  });\n  \n  // Test error levels\n  describe('ErrorLevel', () => {\n    test('should have appropriate error levels in order of severity', () => {\n      // Check all required levels exist\n      expect(ErrorLevel.FATAL).toBeDefined();\n      expect(ErrorLevel.ERROR).toBeDefined();\n      expect(ErrorLevel.WARNING).toBeDefined();\n      expect(ErrorLevel.INFO).toBeDefined();\n      \n      // Ensure consistent string values\n      expect(ErrorLevel.FATAL).toBe('fatal');\n      expect(ErrorLevel.ERROR).toBe('error');\n      expect(ErrorLevel.WARNING).toBe('warning');\n      expect(ErrorLevel.INFO).toBe('info');\n      \n      // Check uniqueness\n      const levels = Object.values(ErrorLevel);\n      const uniqueLevels = new Set(levels);\n      expect(uniqueLevels.size).toBe(levels.length);\n    });\n  });\n  \n  // Comprehensive check for error uniqueness\n  test('all error codes should be unique across the catalog', () => {\n    const allCodes = new Set();\n    let duplicates = [];\n    \n    // Go through all categories and errors\n    Object.values(ErrorCatalog).forEach(category => {\n      Object.values(category).forEach(error => {\n        if (allCodes.has(error.code)) {\n          duplicates.push(error.code);\n        } else {\n          allCodes.add(error.code);\n        }\n      });\n    });\n    \n    // Should have no duplicates\n    expect(duplicates).toEqual([]);\n    \n    // Check total count\n    const totalErrorCount = Object.values(ErrorCatalog).reduce(\n      (count, category) => count + Object.keys(category).length, 0\n    );\n    expect(allCodes.size).toBe(totalErrorCount);\n  });\n});\n"],"mappings":"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","ignoreList":[]}