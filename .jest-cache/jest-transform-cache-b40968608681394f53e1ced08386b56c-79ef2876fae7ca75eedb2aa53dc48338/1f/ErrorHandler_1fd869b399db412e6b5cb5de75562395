bda7ed14e18a49c8ce74dce3cbd01dfd
/**
 * ErrorHandler - Core error handling system for the werewolf game GM support library
 *
 * This module provides centralized error handling with:
 * - Error registration and management
 * - Error event emission
 * - Error handling policies
 * - Error reporting
 */

const {
  ErrorCatalog,
  ErrorLevel,
  getErrorByCode
} = require('./ErrorCatalog');

/**
 * Default error policy
 * @type {Object}
 */
const DEFAULT_ERROR_POLICY = {
  throwOnLevel: ErrorLevel.ERROR,
  // Throw for ERROR and FATAL
  emitAll: true,
  // Emit all error events
  logLevel: ErrorLevel.WARNING,
  // Log WARNING and above
  recordHistory: true,
  // Keep error history
  historyLimit: 50,
  // Keep last 50 errors in history
  diagnosticInfo: true // Include diagnostic information
};

/**
 * ErrorHandler class responsible for managing and handling errors
 */
class ErrorHandler {
  /**
   * Create a new ErrorHandler
   * @param {EventSystem} eventSystem - Event system for emitting error events
   * @param {Object} [options] - Configuration options
   */
  constructor(eventSystem, options = {}) {
    this.eventSystem = eventSystem;
    this.options = {
      ...options
    };
    this.policy = {
      ...DEFAULT_ERROR_POLICY,
      ...options.policy
    };

    // Error history for debugging and reporting
    this.errorHistory = [];

    // Track unhandled errors
    this.unhandledErrors = [];

    // Error counts by code
    this.errorCounts = new Map();
  }

  /**
   * Set the error handling policy
   * @param {Object} policy - New error policy
   * @return {ErrorHandler} - This instance for chaining
   */
  setErrorPolicy(policy) {
    this.policy = {
      ...this.policy,
      ...policy
    };

    // Emit policy change event
    if (this.eventSystem) {
      this.eventSystem.emit('error.policy.change', {
        policy: this.policy
      });
    }
    return this;
  }

  /**
   * Register an error occurrence
   * @param {string} errorCode - Error code from ErrorCatalog
   * @param {Object} [context] - Error context information
   * @return {Object} - Created error object
   */
  register(errorCode, context = {}) {
    const errorDef = getErrorByCode(errorCode);
    if (!errorDef) {
      // If the error code is not found, create a generic error
      return this.createError(ErrorCatalog.SYSTEM.INTERNAL_ERROR.code, `Unknown error code: ${errorCode}`, {
        originalCode: errorCode,
        ...context
      });
    }
    return this.createError(errorCode, null, context);
  }

  /**
   * Create a standard error object
   * @param {string} code - Error code
   * @param {string} [message] - Custom error message (overrides catalog message)
   * @param {Object} [context] - Additional context
   * @return {Object} - Error object
   */
  createError(code, message = null, context = {}) {
    const errorDef = getErrorByCode(code);
    const error = {
      code,
      message: message || (errorDef ? errorDef.message : `Error: ${code}`),
      level: errorDef ? errorDef.level : ErrorLevel.ERROR,
      context: {
        ...context
      },
      timestamp: Date.now()
    };

    // Add additional details if available and diagnostics are enabled
    if (errorDef && errorDef.details && this.policy.diagnosticInfo) {
      error.details = errorDef.details;
    }

    // Add stack trace for fatal errors
    if (error.level === ErrorLevel.FATAL && this.policy.diagnosticInfo) {
      error.stack = new Error().stack;
    }
    return error;
  }

  /**
   * Handle an error according to the current policy
   * @param {Object} error - Error object
   * @return {boolean} - False to indicate error (for validation functions)
   * @throws {Error} - If policy dictates throwing errors
   */
  handleError(error) {
    // Track error in history if enabled
    if (this.policy.recordHistory) {
      this._addToHistory(error);
    }

    // Track error counts
    this._countError(error.code);

    // Log error if enabled
    this._logError(error);

    // Emit error event if enabled and event system is available
    if (this.policy.emitAll && this.eventSystem) {
      this._emitErrorEvent(error);
    }

    // Check if we should throw the error based on level
    const shouldThrow = this._shouldThrowError(error.level);
    if (shouldThrow) {
      throw this._createNativeError(error);
    } else {
      // Track unhandled error
      this.unhandledErrors.push(error);
    }

    // Return false to indicate error (for validation functions)
    return false;
  }

  /**
   * Get errors by level
   * @param {string} level - Error level to filter by
   * @return {Array} - Array of errors with the specified level
   */
  getErrorsByLevel(level) {
    return this.errorHistory.filter(error => error.level === level);
  }

  /**
   * Get error history
   * @param {number} [limit] - Maximum number of errors to return
   * @return {Array} - Error history
   */
  getErrorHistory(limit = null) {
    if (limit === null) {
      return [...this.errorHistory];
    }
    return this.errorHistory.slice(-limit);
  }

  /**
   * Create an error report
   * @param {boolean} [detailed=false] - Whether to include detailed information
   * @return {Object} - Error report
   */
  createErrorReport(detailed = false) {
    const report = {
      timestamp: Date.now(),
      totalErrors: this.errorHistory.length,
      unhandledErrors: this.unhandledErrors.length,
      errorCounts: Object.fromEntries(this.errorCounts),
      policy: this.policy,
      lastError: this.errorHistory.length ? this.errorHistory[this.errorHistory.length - 1] : null
    };
    if (detailed) {
      report.history = this.getErrorHistory(this.policy.historyLimit);
      report.unhandledErrors = [...this.unhandledErrors];

      // Add counts by level
      report.levelCounts = {
        [ErrorLevel.FATAL]: this.getErrorsByLevel(ErrorLevel.FATAL).length,
        [ErrorLevel.ERROR]: this.getErrorsByLevel(ErrorLevel.ERROR).length,
        [ErrorLevel.WARNING]: this.getErrorsByLevel(ErrorLevel.WARNING).length,
        [ErrorLevel.INFO]: this.getErrorsByLevel(ErrorLevel.INFO).length
      };
    }
    return report;
  }

  /**
   * Clear error history
   * @return {ErrorHandler} - This instance for chaining
   */
  clearErrorHistory() {
    this.errorHistory = [];
    if (this.eventSystem) {
      this.eventSystem.emit('error.history.clear', {});
    }
    return this;
  }

  /**
   * Clear unhandled errors
   * @return {ErrorHandler} - This instance for chaining
   */
  clearUnhandledErrors() {
    this.unhandledErrors = [];
    if (this.eventSystem) {
      this.eventSystem.emit('error.unhandled.clear', {});
    }
    return this;
  }

  /**
   * Reset error counts
   * @return {ErrorHandler} - This instance for chaining
   */
  resetErrorCounts() {
    this.errorCounts.clear();
    if (this.eventSystem) {
      this.eventSystem.emit('error.counts.reset', {});
    }
    return this;
  }

  /**
   * Add an error to the history
   * @param {Object} error - Error to add
   * @private
   */
  _addToHistory(error) {
    this.errorHistory.push(error);

    // Enforce history limit
    while (this.errorHistory.length > this.policy.historyLimit) {
      this.errorHistory.shift();
    }
  }

  /**
   * Count an error occurrence
   * @param {string} code - Error code
   * @private
   */
  _countError(code) {
    const count = this.errorCounts.get(code) || 0;
    this.errorCounts.set(code, count + 1);
  }

  /**
   * Log an error based on policy
   * @param {Object} error - Error to log
   * @private
   */
  _logError(error) {
    // Get error level index for comparison
    const levelIndex = this._getLevelIndex(error.level);
    const policyLevelIndex = this._getLevelIndex(this.policy.logLevel);

    // Only log if error level is at or above policy level
    if (levelIndex >= policyLevelIndex) {
      // Format error for logging
      const logData = {
        code: error.code,
        message: error.message,
        context: error.context
      };
      switch (error.level) {
        case ErrorLevel.FATAL:
          console.error('FATAL ERROR:', logData);
          break;
        case ErrorLevel.ERROR:
          console.error('ERROR:', logData);
          break;
        case ErrorLevel.WARNING:
          console.warn('WARNING:', logData);
          break;
        default:
          console.info('INFO:', logData);
          break;
      }
    }
  }

  /**
   * Emit error event
   * @param {Object} error - Error to emit
   * @private
   */
  _emitErrorEvent(error) {
    // Emit general error event
    this.eventSystem.emit('error', error);

    // Emit level-specific error event
    this.eventSystem.emit(`error.${error.level}`, error);

    // Emit code-specific error event
    this.eventSystem.emit(`error.code.${error.code}`, error);

    // Emit context-specific events
    if (error.context) {
      // Emit player-specific error if player is involved
      if (error.context.playerId !== undefined) {
        this.eventSystem.emit(`error.player.${error.context.playerId}`, error);
      }

      // Emit phase-specific error if phase is involved
      if (error.context.phase !== undefined) {
        this.eventSystem.emit(`error.phase.${error.context.phase}`, error);
      }

      // Emit action-specific error if action is involved
      if (error.context.actionType !== undefined) {
        this.eventSystem.emit(`error.action.${error.context.actionType}`, error);
      }
    }
  }

  /**
   * Check if an error should be thrown based on its level
   * @param {string} level - Error level
   * @return {boolean} - True if error should be thrown
   * @private
   */
  _shouldThrowError(level) {
    const levelIndex = this._getLevelIndex(level);
    const policyLevelIndex = this._getLevelIndex(this.policy.throwOnLevel);
    return levelIndex >= policyLevelIndex;
  }

  /**
   * Get numeric index for error level (for comparison)
   * @param {string} level - Error level
   * @return {number} - Level index
   * @private
   */
  _getLevelIndex(level) {
    const levels = {
      [ErrorLevel.INFO]: 0,
      [ErrorLevel.WARNING]: 1,
      [ErrorLevel.ERROR]: 2,
      [ErrorLevel.FATAL]: 3
    };
    return levels[level] !== undefined ? levels[level] : -1;
  }

  /**
   * Create a native Error object from our error structure
   * @param {Object} error - Our error structure
   * @return {Error} - Native Error object
   * @private
   */
  _createNativeError(error) {
    const nativeError = new Error(error.message);
    nativeError.code = error.code;
    nativeError.level = error.level;
    nativeError.context = error.context;
    nativeError.timestamp = error.timestamp;
    nativeError.details = error.details;

    // Use the original stack trace if available
    if (error.stack) {
      nativeError.stack = error.stack;
    }
    return nativeError;
  }
}
module.exports = ErrorHandler;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,