{"version":3,"names":["ErrorCatalog","ErrorLevel","getErrorByCode","require","DEFAULT_ERROR_POLICY","throwOnLevel","ERROR","emitAll","logLevel","WARNING","recordHistory","historyLimit","diagnosticInfo","ErrorHandler","constructor","eventSystem","options","policy","errorHistory","unhandledErrors","errorCounts","Map","setErrorPolicy","emit","register","errorCode","context","errorDef","createError","SYSTEM","INTERNAL_ERROR","code","originalCode","message","error","level","timestamp","Date","now","details","FATAL","stack","Error","handleError","_addToHistory","_countError","_logError","_emitErrorEvent","shouldThrow","_shouldThrowError","_createNativeError","push","getErrorsByLevel","filter","getErrorHistory","limit","slice","createErrorReport","detailed","report","totalErrors","length","Object","fromEntries","lastError","history","levelCounts","INFO","clearErrorHistory","clearUnhandledErrors","resetErrorCounts","clear","shift","count","get","set","levelIndex","_getLevelIndex","policyLevelIndex","logData","console","warn","info","playerId","undefined","phase","actionType","levels","nativeError","module","exports"],"sources":["ErrorHandler.js"],"sourcesContent":["/**\n * ErrorHandler - Core error handling system for the werewolf game GM support library\n *\n * This module provides centralized error handling with:\n * - Error registration and management\n * - Error event emission\n * - Error handling policies\n * - Error reporting\n */\n\nconst { ErrorCatalog, ErrorLevel, getErrorByCode } = require('./ErrorCatalog');\n\n/**\n * Default error policy\n * @type {Object}\n */\nconst DEFAULT_ERROR_POLICY = {\n  throwOnLevel: ErrorLevel.ERROR, // Throw for ERROR and FATAL\n  emitAll: true,                  // Emit all error events\n  logLevel: ErrorLevel.WARNING,   // Log WARNING and above\n  recordHistory: true,            // Keep error history\n  historyLimit: 50,               // Keep last 50 errors in history\n  diagnosticInfo: true            // Include diagnostic information\n};\n\n/**\n * ErrorHandler class responsible for managing and handling errors\n */\nclass ErrorHandler {\n  /**\n   * Create a new ErrorHandler\n   * @param {EventSystem} eventSystem - Event system for emitting error events\n   * @param {Object} [options] - Configuration options\n   */\n  constructor(eventSystem, options = {}) {\n    this.eventSystem = eventSystem;\n    this.options = { ...options };\n    this.policy = { ...DEFAULT_ERROR_POLICY, ...options.policy };\n    \n    // Error history for debugging and reporting\n    this.errorHistory = [];\n    \n    // Track unhandled errors\n    this.unhandledErrors = [];\n    \n    // Error counts by code\n    this.errorCounts = new Map();\n  }\n\n  /**\n   * Set the error handling policy\n   * @param {Object} policy - New error policy\n   * @return {ErrorHandler} - This instance for chaining\n   */\n  setErrorPolicy(policy) {\n    this.policy = { ...this.policy, ...policy };\n    \n    // Emit policy change event\n    if (this.eventSystem) {\n      this.eventSystem.emit('error.policy.change', { policy: this.policy });\n    }\n    \n    return this;\n  }\n\n  /**\n   * Register an error occurrence\n   * @param {string} errorCode - Error code from ErrorCatalog\n   * @param {Object} [context] - Error context information\n   * @return {Object} - Created error object\n   */\n  register(errorCode, context = {}) {\n    const errorDef = getErrorByCode(errorCode);\n    \n    if (!errorDef) {\n      // If the error code is not found, create a generic error\n      return this.createError(\n        ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        `Unknown error code: ${errorCode}`,\n        { originalCode: errorCode, ...context }\n      );\n    }\n    \n    return this.createError(errorCode, null, context);\n  }\n\n  /**\n   * Create a standard error object\n   * @param {string} code - Error code\n   * @param {string} [message] - Custom error message (overrides catalog message)\n   * @param {Object} [context] - Additional context\n   * @return {Object} - Error object\n   */\n  createError(code, message = null, context = {}) {\n    const errorDef = getErrorByCode(code);\n    \n    const error = {\n      code,\n      message: message || (errorDef ? errorDef.message : `Error: ${code}`),\n      level: errorDef ? errorDef.level : ErrorLevel.ERROR,\n      context: { ...context },\n      timestamp: Date.now()\n    };\n    \n    // Add additional details if available and diagnostics are enabled\n    if (errorDef && errorDef.details && this.policy.diagnosticInfo) {\n      error.details = errorDef.details;\n    }\n    \n    // Add stack trace for fatal errors\n    if (error.level === ErrorLevel.FATAL && this.policy.diagnosticInfo) {\n      error.stack = new Error().stack;\n    }\n    \n    return error;\n  }\n\n  /**\n   * Handle an error according to the current policy\n   * @param {Object} error - Error object\n   * @return {boolean} - False to indicate error (for validation functions)\n   * @throws {Error} - If policy dictates throwing errors\n   */\n  handleError(error) {\n    // Track error in history if enabled\n    if (this.policy.recordHistory) {\n      this._addToHistory(error);\n    }\n    \n    // Track error counts\n    this._countError(error.code);\n    \n    // Log error if enabled\n    this._logError(error);\n    \n    // Emit error event if enabled and event system is available\n    if (this.policy.emitAll && this.eventSystem) {\n      this._emitErrorEvent(error);\n    }\n    \n    // Check if we should throw the error based on level\n    const shouldThrow = this._shouldThrowError(error.level);\n    \n    if (shouldThrow) {\n      throw this._createNativeError(error);\n    } else {\n      // Track unhandled error\n      this.unhandledErrors.push(error);\n    }\n    \n    // Return false to indicate error (for validation functions)\n    return false;\n  }\n\n  /**\n   * Get errors by level\n   * @param {string} level - Error level to filter by\n   * @return {Array} - Array of errors with the specified level\n   */\n  getErrorsByLevel(level) {\n    return this.errorHistory.filter(error => error.level === level);\n  }\n\n  /**\n   * Get error history\n   * @param {number} [limit] - Maximum number of errors to return\n   * @return {Array} - Error history\n   */\n  getErrorHistory(limit = null) {\n    if (limit === null) {\n      return [...this.errorHistory];\n    }\n    \n    return this.errorHistory.slice(-limit);\n  }\n\n  /**\n   * Create an error report\n   * @param {boolean} [detailed=false] - Whether to include detailed information\n   * @return {Object} - Error report\n   */\n  createErrorReport(detailed = false) {\n    const report = {\n      timestamp: Date.now(),\n      totalErrors: this.errorHistory.length,\n      unhandledErrors: this.unhandledErrors.length,\n      errorCounts: Object.fromEntries(this.errorCounts),\n      policy: this.policy,\n      lastError: this.errorHistory.length ? this.errorHistory[this.errorHistory.length - 1] : null\n    };\n    \n    if (detailed) {\n      report.history = this.getErrorHistory(this.policy.historyLimit);\n      report.unhandledErrors = [...this.unhandledErrors];\n      \n      // Add counts by level\n      report.levelCounts = {\n        [ErrorLevel.FATAL]: this.getErrorsByLevel(ErrorLevel.FATAL).length,\n        [ErrorLevel.ERROR]: this.getErrorsByLevel(ErrorLevel.ERROR).length,\n        [ErrorLevel.WARNING]: this.getErrorsByLevel(ErrorLevel.WARNING).length,\n        [ErrorLevel.INFO]: this.getErrorsByLevel(ErrorLevel.INFO).length\n      };\n    }\n    \n    return report;\n  }\n\n  /**\n   * Clear error history\n   * @return {ErrorHandler} - This instance for chaining\n   */\n  clearErrorHistory() {\n    this.errorHistory = [];\n    \n    if (this.eventSystem) {\n      this.eventSystem.emit('error.history.clear', {});\n    }\n    \n    return this;\n  }\n\n  /**\n   * Clear unhandled errors\n   * @return {ErrorHandler} - This instance for chaining\n   */\n  clearUnhandledErrors() {\n    this.unhandledErrors = [];\n    \n    if (this.eventSystem) {\n      this.eventSystem.emit('error.unhandled.clear', {});\n    }\n    \n    return this;\n  }\n\n  /**\n   * Reset error counts\n   * @return {ErrorHandler} - This instance for chaining\n   */\n  resetErrorCounts() {\n    this.errorCounts.clear();\n    \n    if (this.eventSystem) {\n      this.eventSystem.emit('error.counts.reset', {});\n    }\n    \n    return this;\n  }\n\n  /**\n   * Add an error to the history\n   * @param {Object} error - Error to add\n   * @private\n   */\n  _addToHistory(error) {\n    this.errorHistory.push(error);\n    \n    // Enforce history limit\n    while (this.errorHistory.length > this.policy.historyLimit) {\n      this.errorHistory.shift();\n    }\n  }\n\n  /**\n   * Count an error occurrence\n   * @param {string} code - Error code\n   * @private\n   */\n  _countError(code) {\n    const count = this.errorCounts.get(code) || 0;\n    this.errorCounts.set(code, count + 1);\n  }\n\n  /**\n   * Log an error based on policy\n   * @param {Object} error - Error to log\n   * @private\n   */\n  _logError(error) {\n    // Get error level index for comparison\n    const levelIndex = this._getLevelIndex(error.level);\n    const policyLevelIndex = this._getLevelIndex(this.policy.logLevel);\n    \n    // Only log if error level is at or above policy level\n    if (levelIndex >= policyLevelIndex) {\n      // Format error for logging\n      const logData = {\n        code: error.code,\n        message: error.message,\n        context: error.context\n      };\n      \n      switch (error.level) {\n        case ErrorLevel.FATAL:\n          console.error('FATAL ERROR:', logData);\n          break;\n        case ErrorLevel.ERROR:\n          console.error('ERROR:', logData);\n          break;\n        case ErrorLevel.WARNING:\n          console.warn('WARNING:', logData);\n          break;\n        default:\n          console.info('INFO:', logData);\n          break;\n      }\n    }\n  }\n\n  /**\n   * Emit error event\n   * @param {Object} error - Error to emit\n   * @private\n   */\n  _emitErrorEvent(error) {\n    // Emit general error event\n    this.eventSystem.emit('error', error);\n    \n    // Emit level-specific error event\n    this.eventSystem.emit(`error.${error.level}`, error);\n    \n    // Emit code-specific error event\n    this.eventSystem.emit(`error.code.${error.code}`, error);\n    \n    // Emit context-specific events\n    if (error.context) {\n      // Emit player-specific error if player is involved\n      if (error.context.playerId !== undefined) {\n        this.eventSystem.emit(`error.player.${error.context.playerId}`, error);\n      }\n      \n      // Emit phase-specific error if phase is involved\n      if (error.context.phase !== undefined) {\n        this.eventSystem.emit(`error.phase.${error.context.phase}`, error);\n      }\n      \n      // Emit action-specific error if action is involved\n      if (error.context.actionType !== undefined) {\n        this.eventSystem.emit(`error.action.${error.context.actionType}`, error);\n      }\n    }\n  }\n\n  /**\n   * Check if an error should be thrown based on its level\n   * @param {string} level - Error level\n   * @return {boolean} - True if error should be thrown\n   * @private\n   */\n  _shouldThrowError(level) {\n    const levelIndex = this._getLevelIndex(level);\n    const policyLevelIndex = this._getLevelIndex(this.policy.throwOnLevel);\n    \n    return levelIndex >= policyLevelIndex;\n  }\n\n  /**\n   * Get numeric index for error level (for comparison)\n   * @param {string} level - Error level\n   * @return {number} - Level index\n   * @private\n   */\n  _getLevelIndex(level) {\n    const levels = {\n      [ErrorLevel.INFO]: 0,\n      [ErrorLevel.WARNING]: 1,\n      [ErrorLevel.ERROR]: 2,\n      [ErrorLevel.FATAL]: 3\n    };\n    \n    return levels[level] !== undefined ? levels[level] : -1;\n  }\n\n  /**\n   * Create a native Error object from our error structure\n   * @param {Object} error - Our error structure\n   * @return {Error} - Native Error object\n   * @private\n   */\n  _createNativeError(error) {\n    const nativeError = new Error(error.message);\n    nativeError.code = error.code;\n    nativeError.level = error.level;\n    nativeError.context = error.context;\n    nativeError.timestamp = error.timestamp;\n    nativeError.details = error.details;\n    \n    // Use the original stack trace if available\n    if (error.stack) {\n      nativeError.stack = error.stack;\n    }\n    \n    return nativeError;\n  }\n}\n\nmodule.exports = ErrorHandler;\n"],"mappings":"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","ignoreList":[]}