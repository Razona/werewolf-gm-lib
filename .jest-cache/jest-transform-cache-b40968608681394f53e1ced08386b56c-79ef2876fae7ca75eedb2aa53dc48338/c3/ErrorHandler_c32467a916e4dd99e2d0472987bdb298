84e08bf62e46ed43c5d61618b1929341
import ErrorCatalog from './ErrorCatalog';
import ErrorLevel from './ErrorLevel';
export default class ErrorHandler {
  constructor(eventSystem = null) {
    this.eventSystem = eventSystem;
    this.errors = [];
    this.policy = {
      logLevel: ErrorLevel.WARNING,
      throwLevel: ErrorLevel.ERROR,
      emitAll: true,
      historyLimit: 100
    };
  }
  setErrorPolicy(newPolicy = {}) {
    this.policy = {
      ...this.policy,
      ...newPolicy
    };
    if (this.eventSystem) {
      this.eventSystem.emit('error.policy.change', {
        policy: this.policy
      });
    }
  }
  createError(errorCode, customMessage = null, context = {}) {
    const errorTemplate = ErrorCatalog.getErrorByCode(errorCode);
    if (!errorTemplate) {
      throw new Error(`無効なエラーコード: ${errorCode}`);
    }
    const error = {
      ...errorTemplate,
      timestamp: Date.now(),
      context: context,
      ...(customMessage && {
        message: customMessage
      })
    };
    this._handleError(error);
    return error;
  }
  _handleError(error) {
    // エラー履歴の管理
    if (this.errors.length >= this.policy.historyLimit) {
      this.errors.shift();
    }
    this.errors.push(error);

    // ログ出力
    this._logError(error);

    // イベント発火
    this._emitErrorEvent(error);

    // エラーレベルに応じて例外を投げる
    this._throwIfRequired(error);
  }
  _logError(error) {
    switch (error.level) {
      case ErrorLevel.FATAL:
        console.error('FATAL:', error);
        break;
      case ErrorLevel.ERROR:
        console.error('ERROR:', error);
        break;
      case ErrorLevel.WARNING:
        console.warn('WARNING:', error);
        break;
      case ErrorLevel.INFO:
        console.info('INFO:', error);
        break;
    }
  }
  _emitErrorEvent(error) {
    if (this.eventSystem && (this.policy.emitAll || error.level >= this.policy.logLevel)) {
      this.eventSystem.emit('error', error);
      this.eventSystem.emit(`error.${error.level}`, error);
    }
  }
  _throwIfRequired(error) {
    if (error.level >= this.policy.throwLevel) {
      throw new Error(`${error.message}: ${error.details}`);
    }
  }
  getErrorHistory(limit = null) {
    return limit ? this.errors.slice(-limit) : [...this.errors];
  }
  clearErrorHistory() {
    this.errors = [];
  }
  getErrorsByLevel(level) {
    return this.errors.filter(error => error.level === level);
  }
  convertToNativeError(errorStructure) {
    const nativeError = new Error(errorStructure.message);
    nativeError.name = 'WerewolfGameError';
    nativeError.code = errorStructure.code;
    nativeError.details = errorStructure.details;
    nativeError.context = errorStructure.context;
    return nativeError;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,