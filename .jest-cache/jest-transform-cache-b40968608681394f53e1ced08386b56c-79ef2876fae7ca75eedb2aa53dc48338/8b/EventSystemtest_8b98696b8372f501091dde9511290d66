d92222c63cc6276721294dde8bb6f657
/**
 * Unit tests for the EventSystem module
 */

const EventSystem = require('../../../../src/core/event/EventSystem');
describe('EventSystem', () => {
  // Basic functionality tests
  describe('Basic event handling', () => {
    test('should register and trigger event listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.on('testEvent', mockCallback);
      eventSystem.emit('testEvent', {
        data: 'test'
      });
      expect(mockCallback).toHaveBeenCalledTimes(1);
      expect(mockCallback).toHaveBeenCalledWith({
        data: 'test'
      });
    });
    test('should register one-time listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.once('testEvent', mockCallback);
      eventSystem.emit('testEvent');
      eventSystem.emit('testEvent');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should remove listeners correctly', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.off('testEvent', mockCallback1);
      eventSystem.emit('testEvent');
      expect(mockCallback1).not.toHaveBeenCalled();
      expect(mockCallback2).toHaveBeenCalledTimes(1);
    });
    test('should remove all listeners for an event', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.off('testEvent');
      eventSystem.emit('testEvent');
      expect(mockCallback1).not.toHaveBeenCalled();
      expect(mockCallback2).not.toHaveBeenCalled();
    });
  });

  // Priority tests
  describe('Listener priorities', () => {
    test('should execute listeners in order of priority', () => {
      const eventSystem = new EventSystem();
      const order = [];
      eventSystem.on('testEvent', () => order.push('low'), 1);
      eventSystem.on('testEvent', () => order.push('high'), 10);
      eventSystem.on('testEvent', () => order.push('medium'), 5);
      eventSystem.emit('testEvent');
      expect(order).toEqual(['high', 'medium', 'low']);
    });
  });

  // Namespace support tests
  describe('Namespace support', () => {
    test('should propagate events to parent namespaces', () => {
      const eventSystem = new EventSystem({
        enableNamespaces: true
      });
      const mockParent = jest.fn();
      const mockChild = jest.fn();
      eventSystem.on('parent', mockParent);
      eventSystem.on('parent.child', mockChild);
      eventSystem.emit('parent.child.grandchild', 'data');
      expect(mockParent).toHaveBeenCalledTimes(1);
      expect(mockChild).toHaveBeenCalledTimes(1);
    });
    test('should not propagate events when namespaces are disabled', () => {
      const eventSystem = new EventSystem({
        enableNamespaces: false
      });
      const mockParent = jest.fn();
      eventSystem.on('parent', mockParent);
      eventSystem.emit('parent.child', 'data');
      expect(mockParent).not.toHaveBeenCalled();
    });
  });

  // Wildcard support tests
  describe('Wildcard support', () => {
    test('should match single-level wildcards', () => {
      const eventSystem = new EventSystem({
        enableWildcards: true
      });
      const mockCallback = jest.fn();
      eventSystem.on('user.*.action', mockCallback);
      eventSystem.emit('user.john.action', 'data');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should match multi-level wildcards', () => {
      const eventSystem = new EventSystem({
        enableWildcards: true
      });
      const mockCallback = jest.fn();
      eventSystem.on('game.**', mockCallback);
      eventSystem.emit('game.phase.night.start', 'data');
      expect(mockCallback).toHaveBeenCalledTimes(1);
    });
    test('should not match wildcards when disabled', () => {
      const eventSystem = new EventSystem({
        enableWildcards: false
      });
      const mockCallback = jest.fn();
      eventSystem.on('user.*.action', mockCallback);
      eventSystem.emit('user.john.action', 'data');
      expect(mockCallback).not.toHaveBeenCalled();
    });
  });

  // Error handling tests
  describe('Error handling', () => {
    test('should continue executing listeners when one throws an error', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn().mockImplementation(() => {
        throw new Error('Test error');
      });
      const mockCallback2 = jest.fn();

      // Mock console.error to prevent test output pollution
      const originalConsoleError = console.error;
      console.error = jest.fn();
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.emit('testEvent');
      expect(mockCallback1).toHaveBeenCalledTimes(1);
      expect(mockCallback2).toHaveBeenCalledTimes(1);

      // Restore console.error
      console.error = originalConsoleError;
    });
  });

  // Utility method tests
  describe('Utility methods', () => {
    test('hasListeners should detect registered listeners', () => {
      const eventSystem = new EventSystem();
      const mockCallback = jest.fn();
      eventSystem.on('testEvent', mockCallback);
      expect(eventSystem.hasListeners('testEvent')).toBe(true);
      expect(eventSystem.hasListeners('nonExistentEvent')).toBe(false);
    });
    test('listenerCount should return the correct number of listeners', () => {
      const eventSystem = new EventSystem();
      eventSystem.on('testEvent', () => {});
      eventSystem.on('testEvent', () => {});
      expect(eventSystem.listenerCount('testEvent')).toBe(2);
      expect(eventSystem.listenerCount('nonExistentEvent')).toBe(0);
    });
    test('eventNames should return all registered event names', () => {
      const eventSystem = new EventSystem();
      eventSystem.on('event1', () => {});
      eventSystem.on('event2', () => {});
      expect(eventSystem.eventNames()).toContain('event1');
      expect(eventSystem.eventNames()).toContain('event2');
      expect(eventSystem.eventNames().length).toBe(2);
    });
  });

  // Debug mode and event history tests
  describe('Debug mode and event history', () => {
    test('should record event history in debug mode', () => {
      const eventSystem = new EventSystem({
        debugMode: true
      });
      eventSystem.emit('event1', {
        data: 1
      });
      eventSystem.emit('event2', {
        data: 2
      });
      const history = eventSystem.getEventHistory();
      expect(history.length).toBe(2);
      expect(history[0].eventName).toBe('event1');
      expect(history[1].eventName).toBe('event2');
    });
    test('should not record event history when debug mode is disabled', () => {
      const eventSystem = new EventSystem({
        debugMode: false
      });
      eventSystem.emit('event1', {
        data: 1
      });
      const history = eventSystem.getEventHistory();
      expect(history.length).toBe(0);
    });
  });

  // Edge cases
  describe('Edge cases', () => {
    test('should handle nested event emissions', () => {
      const eventSystem = new EventSystem();
      const order = [];
      eventSystem.on('event1', () => {
        order.push('event1');
        eventSystem.emit('event2');
      });
      eventSystem.on('event2', () => {
        order.push('event2');
      });
      eventSystem.emit('event1');
      expect(order).toEqual(['event1', 'event2']);
    });
    test('should handle adding/removing listeners during emission', () => {
      const eventSystem = new EventSystem();
      const mockCallback1 = jest.fn();
      const mockCallback2 = jest.fn();
      // 修正: 以前のテストでは自分自身を再度リスナーとして追加していた
      // これはメモリリークの原因となるため修正
      let alreadyRan = false;
      const mockCallback3 = jest.fn().mockImplementation(() => {
        if (!alreadyRan) {
          alreadyRan = true;
          // Add a different callback and remove the first one during emission
          const newCallback = jest.fn();
          eventSystem.on('testEvent2', newCallback);
          eventSystem.off('testEvent', mockCallback1);
        }
      });
      eventSystem.on('testEvent', mockCallback1);
      eventSystem.on('testEvent', mockCallback3);
      eventSystem.on('testEvent', mockCallback2);
      eventSystem.emit('testEvent');

      // The first listener should have been called once
      expect(mockCallback1).toHaveBeenCalledTimes(1);
      // The second listener should have been called once
      expect(mockCallback3).toHaveBeenCalledTimes(1);
      // The third listener should have been called once
      expect(mockCallback2).toHaveBeenCalledTimes(1);
    });
    test('should throw an error for invalid event names', () => {
      const eventSystem = new EventSystem();
      expect(() => {
        eventSystem.on('', () => {});
      }).toThrow();
      expect(() => {
        eventSystem.on(null, () => {});
      }).toThrow();
    });
    test('should throw an error for invalid callbacks', () => {
      const eventSystem = new EventSystem();
      expect(() => {
        eventSystem.on('testEvent', 'not a function');
      }).toThrow();
      expect(() => {
        eventSystem.on('testEvent', null);
      }).toThrow();
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudFN5c3RlbSIsInJlcXVpcmUiLCJkZXNjcmliZSIsInRlc3QiLCJldmVudFN5c3RlbSIsIm1vY2tDYWxsYmFjayIsImplc3QiLCJmbiIsIm9uIiwiZW1pdCIsImRhdGEiLCJleHBlY3QiLCJ0b0hhdmVCZWVuQ2FsbGVkVGltZXMiLCJ0b0hhdmVCZWVuQ2FsbGVkV2l0aCIsIm9uY2UiLCJtb2NrQ2FsbGJhY2sxIiwibW9ja0NhbGxiYWNrMiIsIm9mZiIsIm5vdCIsInRvSGF2ZUJlZW5DYWxsZWQiLCJvcmRlciIsInB1c2giLCJ0b0VxdWFsIiwiZW5hYmxlTmFtZXNwYWNlcyIsIm1vY2tQYXJlbnQiLCJtb2NrQ2hpbGQiLCJlbmFibGVXaWxkY2FyZHMiLCJtb2NrSW1wbGVtZW50YXRpb24iLCJFcnJvciIsIm9yaWdpbmFsQ29uc29sZUVycm9yIiwiY29uc29sZSIsImVycm9yIiwiaGFzTGlzdGVuZXJzIiwidG9CZSIsImxpc3RlbmVyQ291bnQiLCJldmVudE5hbWVzIiwidG9Db250YWluIiwibGVuZ3RoIiwiZGVidWdNb2RlIiwiaGlzdG9yeSIsImdldEV2ZW50SGlzdG9yeSIsImV2ZW50TmFtZSIsImFscmVhZHlSYW4iLCJtb2NrQ2FsbGJhY2szIiwibmV3Q2FsbGJhY2siLCJ0b1Rocm93Il0sInNvdXJjZXMiOlsiRXZlbnRTeXN0ZW0udGVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFVuaXQgdGVzdHMgZm9yIHRoZSBFdmVudFN5c3RlbSBtb2R1bGVcbiAqL1xuXG5jb25zdCBFdmVudFN5c3RlbSA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uL3NyYy9jb3JlL2V2ZW50L0V2ZW50U3lzdGVtJyk7XG5cbmRlc2NyaWJlKCdFdmVudFN5c3RlbScsICgpID0+IHtcbiAgLy8gQmFzaWMgZnVuY3Rpb25hbGl0eSB0ZXN0c1xuICBkZXNjcmliZSgnQmFzaWMgZXZlbnQgaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlZ2lzdGVyIGFuZCB0cmlnZ2VyIGV2ZW50IGxpc3RlbmVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2sgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCd0ZXN0RXZlbnQnLCBtb2NrQ2FsbGJhY2spO1xuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndGVzdEV2ZW50JywgeyBkYXRhOiAndGVzdCcgfSk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKHsgZGF0YTogJ3Rlc3QnIH0pO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCByZWdpc3RlciBvbmUtdGltZSBsaXN0ZW5lcnMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSgpO1xuICAgICAgY29uc3QgbW9ja0NhbGxiYWNrID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5vbmNlKCd0ZXN0RXZlbnQnLCBtb2NrQ2FsbGJhY2spO1xuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndGVzdEV2ZW50Jyk7XG4gICAgICBldmVudFN5c3RlbS5lbWl0KCd0ZXN0RXZlbnQnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG1vY2tDYWxsYmFjaykudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCByZW1vdmUgbGlzdGVuZXJzIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2sxID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja0NhbGxiYWNrMiA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazEpO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazIpO1xuICAgICAgZXZlbnRTeXN0ZW0ub2ZmKCd0ZXN0RXZlbnQnLCBtb2NrQ2FsbGJhY2sxKTtcbiAgICAgIGV2ZW50U3lzdGVtLmVtaXQoJ3Rlc3RFdmVudCcpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja0NhbGxiYWNrMSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2syKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgnc2hvdWxkIHJlbW92ZSBhbGwgbGlzdGVuZXJzIGZvciBhbiBldmVudCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2sxID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja0NhbGxiYWNrMiA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazEpO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazIpO1xuICAgICAgZXZlbnRTeXN0ZW0ub2ZmKCd0ZXN0RXZlbnQnKTtcbiAgICAgIGV2ZW50U3lzdGVtLmVtaXQoJ3Rlc3RFdmVudCcpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja0NhbGxiYWNrMSkubm90LnRvSGF2ZUJlZW5DYWxsZWQoKTtcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2syKS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIC8vIFByaW9yaXR5IHRlc3RzXG4gIGRlc2NyaWJlKCdMaXN0ZW5lciBwcmlvcml0aWVzJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBleGVjdXRlIGxpc3RlbmVycyBpbiBvcmRlciBvZiBwcmlvcml0eScsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBjb25zdCBvcmRlciA9IFtdO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5vbigndGVzdEV2ZW50JywgKCkgPT4gb3JkZXIucHVzaCgnbG93JyksIDEpO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsICgpID0+IG9yZGVyLnB1c2goJ2hpZ2gnKSwgMTApO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsICgpID0+IG9yZGVyLnB1c2goJ21lZGl1bScpLCA1KTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndGVzdEV2ZW50Jyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChvcmRlcikudG9FcXVhbChbJ2hpZ2gnLCAnbWVkaXVtJywgJ2xvdyddKTtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICAvLyBOYW1lc3BhY2Ugc3VwcG9ydCB0ZXN0c1xuICBkZXNjcmliZSgnTmFtZXNwYWNlIHN1cHBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHByb3BhZ2F0ZSBldmVudHMgdG8gcGFyZW50IG5hbWVzcGFjZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSh7IGVuYWJsZU5hbWVzcGFjZXM6IHRydWUgfSk7XG4gICAgICBjb25zdCBtb2NrUGFyZW50ID0gamVzdC5mbigpO1xuICAgICAgY29uc3QgbW9ja0NoaWxkID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5vbigncGFyZW50JywgbW9ja1BhcmVudCk7XG4gICAgICBldmVudFN5c3RlbS5vbigncGFyZW50LmNoaWxkJywgbW9ja0NoaWxkKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgncGFyZW50LmNoaWxkLmdyYW5kY2hpbGQnLCAnZGF0YScpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja1BhcmVudCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgZXhwZWN0KG1vY2tDaGlsZCkudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCBub3QgcHJvcGFnYXRlIGV2ZW50cyB3aGVuIG5hbWVzcGFjZXMgYXJlIGRpc2FibGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oeyBlbmFibGVOYW1lc3BhY2VzOiBmYWxzZSB9KTtcbiAgICAgIGNvbnN0IG1vY2tQYXJlbnQgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCdwYXJlbnQnLCBtb2NrUGFyZW50KTtcbiAgICAgIGV2ZW50U3lzdGVtLmVtaXQoJ3BhcmVudC5jaGlsZCcsICdkYXRhJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrUGFyZW50KS5ub3QudG9IYXZlQmVlbkNhbGxlZCgpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIC8vIFdpbGRjYXJkIHN1cHBvcnQgdGVzdHNcbiAgZGVzY3JpYmUoJ1dpbGRjYXJkIHN1cHBvcnQnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIG1hdGNoIHNpbmdsZS1sZXZlbCB3aWxkY2FyZHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSh7IGVuYWJsZVdpbGRjYXJkczogdHJ1ZSB9KTtcbiAgICAgIGNvbnN0IG1vY2tDYWxsYmFjayA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3VzZXIuKi5hY3Rpb24nLCBtb2NrQ2FsbGJhY2spO1xuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndXNlci5qb2huLmFjdGlvbicsICdkYXRhJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2spLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgbWF0Y2ggbXVsdGktbGV2ZWwgd2lsZGNhcmRzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oeyBlbmFibGVXaWxkY2FyZHM6IHRydWUgfSk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2sgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCdnYW1lLioqJywgbW9ja0NhbGxiYWNrKTtcbiAgICAgIGV2ZW50U3lzdGVtLmVtaXQoJ2dhbWUucGhhc2UubmlnaHQuc3RhcnQnLCAnZGF0YScpO1xuICAgICAgXG4gICAgICBleHBlY3QobW9ja0NhbGxiYWNrKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgnc2hvdWxkIG5vdCBtYXRjaCB3aWxkY2FyZHMgd2hlbiBkaXNhYmxlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKHsgZW5hYmxlV2lsZGNhcmRzOiBmYWxzZSB9KTtcbiAgICAgIGNvbnN0IG1vY2tDYWxsYmFjayA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3VzZXIuKi5hY3Rpb24nLCBtb2NrQ2FsbGJhY2spO1xuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndXNlci5qb2huLmFjdGlvbicsICdkYXRhJyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2spLm5vdC50b0hhdmVCZWVuQ2FsbGVkKCk7XG4gICAgfSk7XG4gIH0pO1xuICBcbiAgLy8gRXJyb3IgaGFuZGxpbmcgdGVzdHNcbiAgZGVzY3JpYmUoJ0Vycm9yIGhhbmRsaW5nJywgKCkgPT4ge1xuICAgIHRlc3QoJ3Nob3VsZCBjb250aW51ZSBleGVjdXRpbmcgbGlzdGVuZXJzIHdoZW4gb25lIHRocm93cyBhbiBlcnJvcicsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2sxID0gamVzdC5mbigpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGVzdCBlcnJvcicpO1xuICAgICAgfSk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2syID0gamVzdC5mbigpO1xuICAgICAgXG4gICAgICAvLyBNb2NrIGNvbnNvbGUuZXJyb3IgdG8gcHJldmVudCB0ZXN0IG91dHB1dCBwb2xsdXRpb25cbiAgICAgIGNvbnN0IG9yaWdpbmFsQ29uc29sZUVycm9yID0gY29uc29sZS5lcnJvcjtcbiAgICAgIGNvbnNvbGUuZXJyb3IgPSBqZXN0LmZuKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCd0ZXN0RXZlbnQnLCBtb2NrQ2FsbGJhY2sxKTtcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCd0ZXN0RXZlbnQnLCBtb2NrQ2FsbGJhY2syKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgndGVzdEV2ZW50Jyk7XG4gICAgICBcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2sxKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICBleHBlY3QobW9ja0NhbGxiYWNrMikudG9IYXZlQmVlbkNhbGxlZFRpbWVzKDEpO1xuICAgICAgXG4gICAgICAvLyBSZXN0b3JlIGNvbnNvbGUuZXJyb3JcbiAgICAgIGNvbnNvbGUuZXJyb3IgPSBvcmlnaW5hbENvbnNvbGVFcnJvcjtcbiAgICB9KTtcbiAgfSk7XG4gIFxuICAvLyBVdGlsaXR5IG1ldGhvZCB0ZXN0c1xuICBkZXNjcmliZSgnVXRpbGl0eSBtZXRob2RzJywgKCkgPT4ge1xuICAgIHRlc3QoJ2hhc0xpc3RlbmVycyBzaG91bGQgZGV0ZWN0IHJlZ2lzdGVyZWQgbGlzdGVuZXJzJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oKTtcbiAgICAgIGNvbnN0IG1vY2tDYWxsYmFjayA9IGplc3QuZm4oKTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjayk7XG4gICAgICBcbiAgICAgIGV4cGVjdChldmVudFN5c3RlbS5oYXNMaXN0ZW5lcnMoJ3Rlc3RFdmVudCcpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KGV2ZW50U3lzdGVtLmhhc0xpc3RlbmVycygnbm9uRXhpc3RlbnRFdmVudCcpKS50b0JlKGZhbHNlKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdsaXN0ZW5lckNvdW50IHNob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgbnVtYmVyIG9mIGxpc3RlbmVycycsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCd0ZXN0RXZlbnQnLCAoKSA9PiB7fSk7XG4gICAgICBldmVudFN5c3RlbS5vbigndGVzdEV2ZW50JywgKCkgPT4ge30pO1xuICAgICAgXG4gICAgICBleHBlY3QoZXZlbnRTeXN0ZW0ubGlzdGVuZXJDb3VudCgndGVzdEV2ZW50JykpLnRvQmUoMik7XG4gICAgICBleHBlY3QoZXZlbnRTeXN0ZW0ubGlzdGVuZXJDb3VudCgnbm9uRXhpc3RlbnRFdmVudCcpKS50b0JlKDApO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ2V2ZW50TmFtZXMgc2hvdWxkIHJldHVybiBhbGwgcmVnaXN0ZXJlZCBldmVudCBuYW1lcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCdldmVudDEnLCAoKSA9PiB7fSk7XG4gICAgICBldmVudFN5c3RlbS5vbignZXZlbnQyJywgKCkgPT4ge30pO1xuICAgICAgXG4gICAgICBleHBlY3QoZXZlbnRTeXN0ZW0uZXZlbnROYW1lcygpKS50b0NvbnRhaW4oJ2V2ZW50MScpO1xuICAgICAgZXhwZWN0KGV2ZW50U3lzdGVtLmV2ZW50TmFtZXMoKSkudG9Db250YWluKCdldmVudDInKTtcbiAgICAgIGV4cGVjdChldmVudFN5c3RlbS5ldmVudE5hbWVzKCkubGVuZ3RoKS50b0JlKDIpO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIC8vIERlYnVnIG1vZGUgYW5kIGV2ZW50IGhpc3RvcnkgdGVzdHNcbiAgZGVzY3JpYmUoJ0RlYnVnIG1vZGUgYW5kIGV2ZW50IGhpc3RvcnknLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIHJlY29yZCBldmVudCBoaXN0b3J5IGluIGRlYnVnIG1vZGUnLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSh7IGRlYnVnTW9kZTogdHJ1ZSB9KTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgnZXZlbnQxJywgeyBkYXRhOiAxIH0pO1xuICAgICAgZXZlbnRTeXN0ZW0uZW1pdCgnZXZlbnQyJywgeyBkYXRhOiAyIH0pO1xuICAgICAgXG4gICAgICBjb25zdCBoaXN0b3J5ID0gZXZlbnRTeXN0ZW0uZ2V0RXZlbnRIaXN0b3J5KCk7XG4gICAgICBcbiAgICAgIGV4cGVjdChoaXN0b3J5Lmxlbmd0aCkudG9CZSgyKTtcbiAgICAgIGV4cGVjdChoaXN0b3J5WzBdLmV2ZW50TmFtZSkudG9CZSgnZXZlbnQxJyk7XG4gICAgICBleHBlY3QoaGlzdG9yeVsxXS5ldmVudE5hbWUpLnRvQmUoJ2V2ZW50MicpO1xuICAgIH0pO1xuICAgIFxuICAgIHRlc3QoJ3Nob3VsZCBub3QgcmVjb3JkIGV2ZW50IGhpc3Rvcnkgd2hlbiBkZWJ1ZyBtb2RlIGlzIGRpc2FibGVkJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oeyBkZWJ1Z01vZGU6IGZhbHNlIH0pO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5lbWl0KCdldmVudDEnLCB7IGRhdGE6IDEgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IGhpc3RvcnkgPSBldmVudFN5c3RlbS5nZXRFdmVudEhpc3RvcnkoKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KGhpc3RvcnkubGVuZ3RoKS50b0JlKDApO1xuICAgIH0pO1xuICB9KTtcbiAgXG4gIC8vIEVkZ2UgY2FzZXNcbiAgZGVzY3JpYmUoJ0VkZ2UgY2FzZXMnLCAoKSA9PiB7XG4gICAgdGVzdCgnc2hvdWxkIGhhbmRsZSBuZXN0ZWQgZXZlbnQgZW1pc3Npb25zJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oKTtcbiAgICAgIGNvbnN0IG9yZGVyID0gW107XG4gICAgICBcbiAgICAgIGV2ZW50U3lzdGVtLm9uKCdldmVudDEnLCAoKSA9PiB7XG4gICAgICAgIG9yZGVyLnB1c2goJ2V2ZW50MScpO1xuICAgICAgICBldmVudFN5c3RlbS5lbWl0KCdldmVudDInKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5vbignZXZlbnQyJywgKCkgPT4ge1xuICAgICAgICBvcmRlci5wdXNoKCdldmVudDInKTtcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5lbWl0KCdldmVudDEnKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KG9yZGVyKS50b0VxdWFsKFsnZXZlbnQxJywgJ2V2ZW50MiddKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgaGFuZGxlIGFkZGluZy9yZW1vdmluZyBsaXN0ZW5lcnMgZHVyaW5nIGVtaXNzaW9uJywgKCkgPT4ge1xuICAgICAgY29uc3QgZXZlbnRTeXN0ZW0gPSBuZXcgRXZlbnRTeXN0ZW0oKTtcbiAgICAgIGNvbnN0IG1vY2tDYWxsYmFjazEgPSBqZXN0LmZuKCk7XG4gICAgICBjb25zdCBtb2NrQ2FsbGJhY2syID0gamVzdC5mbigpO1xuICAgICAgLy8g5L+u5q2jOiDku6XliY3jga7jg4bjgrnjg4jjgafjga/oh6rliIboh6rouqvjgpLlho3luqbjg6rjgrnjg4rjg7zjgajjgZfjgabov73liqDjgZfjgabjgYTjgZ9cbiAgICAgIC8vIOOBk+OCjOOBr+ODoeODouODquODquODvOOCr+OBruWOn+WboOOBqOOBquOCi+OBn+OCgeS/ruato1xuICAgICAgbGV0IGFscmVhZHlSYW4gPSBmYWxzZTtcbiAgICAgIGNvbnN0IG1vY2tDYWxsYmFjazMgPSBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKCgpID0+IHtcbiAgICAgICAgaWYgKCFhbHJlYWR5UmFuKSB7XG4gICAgICAgICAgYWxyZWFkeVJhbiA9IHRydWU7XG4gICAgICAgICAgLy8gQWRkIGEgZGlmZmVyZW50IGNhbGxiYWNrIGFuZCByZW1vdmUgdGhlIGZpcnN0IG9uZSBkdXJpbmcgZW1pc3Npb25cbiAgICAgICAgICBjb25zdCBuZXdDYWxsYmFjayA9IGplc3QuZm4oKTtcbiAgICAgICAgICBldmVudFN5c3RlbS5vbigndGVzdEV2ZW50MicsIG5ld0NhbGxiYWNrKTtcbiAgICAgICAgICBldmVudFN5c3RlbS5vZmYoJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazEpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazEpO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazMpO1xuICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG1vY2tDYWxsYmFjazIpO1xuICAgICAgXG4gICAgICBldmVudFN5c3RlbS5lbWl0KCd0ZXN0RXZlbnQnKTtcbiAgICAgIFxuICAgICAgLy8gVGhlIGZpcnN0IGxpc3RlbmVyIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIG9uY2VcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2sxKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAvLyBUaGUgc2Vjb25kIGxpc3RlbmVyIHNob3VsZCBoYXZlIGJlZW4gY2FsbGVkIG9uY2VcbiAgICAgIGV4cGVjdChtb2NrQ2FsbGJhY2szKS50b0hhdmVCZWVuQ2FsbGVkVGltZXMoMSk7XG4gICAgICAvLyBUaGUgdGhpcmQgbGlzdGVuZXIgc2hvdWxkIGhhdmUgYmVlbiBjYWxsZWQgb25jZVxuICAgICAgZXhwZWN0KG1vY2tDYWxsYmFjazIpLnRvSGF2ZUJlZW5DYWxsZWRUaW1lcygxKTtcbiAgICB9KTtcbiAgICBcbiAgICB0ZXN0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgZm9yIGludmFsaWQgZXZlbnQgbmFtZXMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBldmVudFN5c3RlbSA9IG5ldyBFdmVudFN5c3RlbSgpO1xuICAgICAgXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBldmVudFN5c3RlbS5vbignJywgKCkgPT4ge30pO1xuICAgICAgfSkudG9UaHJvdygpO1xuICAgICAgXG4gICAgICBleHBlY3QoKCkgPT4ge1xuICAgICAgICBldmVudFN5c3RlbS5vbihudWxsLCAoKSA9PiB7fSk7XG4gICAgICB9KS50b1Rocm93KCk7XG4gICAgfSk7XG4gICAgXG4gICAgdGVzdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGZvciBpbnZhbGlkIGNhbGxiYWNrcycsICgpID0+IHtcbiAgICAgIGNvbnN0IGV2ZW50U3lzdGVtID0gbmV3IEV2ZW50U3lzdGVtKCk7XG4gICAgICBcbiAgICAgIGV4cGVjdCgoKSA9PiB7XG4gICAgICAgIGV2ZW50U3lzdGVtLm9uKCd0ZXN0RXZlbnQnLCAnbm90IGEgZnVuY3Rpb24nKTtcbiAgICAgIH0pLnRvVGhyb3coKTtcbiAgICAgIFxuICAgICAgZXhwZWN0KCgpID0+IHtcbiAgICAgICAgZXZlbnRTeXN0ZW0ub24oJ3Rlc3RFdmVudCcsIG51bGwpO1xuICAgICAgfSkudG9UaHJvdygpO1xuICAg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