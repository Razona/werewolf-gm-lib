{"version":3,"names":["EventSystem","constructor","options","enableNamespaces","debugMode","enableWildcards","historyLimit","shareOnceListeners","listeners","Map","_sharedOnceCallbacks","eventHistory","_emitting","_pendingAdditions","_pendingRemovals","_currentEventName","on","eventName","callback","priority","trim","Error","push","once","has","set","get","existingIndex","findIndex","listener","sort","a","b","Set","add","wrappedCallback","args","off","events","event","delete","apply","_originalCallback","originalCallback","size","isWrappedCallback","undefined","filteredListeners","filter","length","target","emit","data","wasEmitting","previousEventName","listenersCalled","sharedCallbacksToRemove","_addToHistory","eventNamesToEmit","_getEventNamesForEmission","listenersToRemove","name","error","console","updatedListeners","l","updated","_processPendingOperations","hasListeners","checked","maxToCheck","entries","includes","_matchesWildcard","listenerCount","count","eventNames","Array","from","keys","getEventHistory","limit","actualLimit","Math","min","slice","removeAllListeners","clear","maxOperations","removalsToProcess","i","additionsToProcess","timestamp","Date","shift","parts","split","parentName","maxListenersToCheck","checkedCount","pattern","startsWith","endsWith","patternParts","eventParts","module","exports"],"sources":["EventSystem.js"],"sourcesContent":["/**\n * EventSystem - Core event management module for the werewolf game GM support library\n *\n * This module provides the foundation for the event-driven architecture,\n * enabling communication between different modules through events.\n */\n\nclass EventSystem {\n  /**\n   * Creates a new EventSystem instance\n   * @param {Object} options - Configuration options\n   * @param {boolean} [options.enableNamespaces=true] - Enable hierarchical event namespaces\n   * @param {boolean} [options.debugMode=false] - Enable debug mode with event history\n   * @param {boolean} [options.enableWildcards=false] - Enable wildcard event matching\n   * @param {number} [options.historyLimit=100] - Maximum number of events to keep in history\n   * @param {boolean} [options.shareOnceListeners=false] - Whether once listeners should be shared across event names\n   */\n  constructor(options = {}) {\n    // Default options\n    this.options = {\n      enableNamespaces: true,\n      debugMode: false,\n      enableWildcards: false, \n      historyLimit: 100,\n      shareOnceListeners: false,\n      ...options\n    };\n\n    // Map to store event listeners: { eventName => [{ callback, once, priority }] }\n    this.listeners = new Map();\n\n    // Map to track original callbacks to event names for shared once listeners\n    this._sharedOnceCallbacks = new Map();\n\n    // Event history for debugging (only active in debug mode)\n    this.eventHistory = [];\n\n    // Flag to track if we're currently emitting an event (to handle nested emissions)\n    this._emitting = false;\n\n    // Queue for listeners to be added/removed during emission\n    this._pendingAdditions = [];\n    this._pendingRemovals = [];\n    \n    // Current event being processed (for once listeners)\n    this._currentEventName = null;\n  }\n\n  /**\n   * Register an event listener\n   * @param {string} eventName - Name of the event to listen for\n   * @param {Function} callback - Function to call when the event is emitted\n   * @param {number} [priority=0] - Priority of the listener (higher executes first)\n   * @return {EventSystem} - Returns this instance for chaining\n   * @throws {Error} If eventName is not a string or callback is not a function\n   */\n  on(eventName, callback, priority = 0) {\n    // Validate arguments\n    if (typeof eventName !== 'string' || eventName.trim() === '') {\n      throw new Error('Event name must be a non-empty string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    // If we're currently emitting, queue the addition\n    if (this._emitting) {\n      this._pendingAdditions.push({ eventName, callback, priority, once: false });\n      return this;\n    }\n\n    // Get or create the listeners array for this event\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n\n    const listeners = this.listeners.get(eventName);\n\n    // Check for duplicate listener\n    const existingIndex = listeners.findIndex(listener => listener.callback === callback);\n    if (existingIndex !== -1) {\n      // Update the existing listener's priority\n      listeners[existingIndex].priority = priority;\n    } else {\n      // Add the new listener\n      listeners.push({ callback, once: false, priority });\n\n      // Sort listeners by priority (highest first)\n      listeners.sort((a, b) => b.priority - a.priority);\n    }\n\n    return this;\n  }\n\n  /**\n   * Register a one-time event listener that will be removed after execution\n   * @param {string} eventName - Name of the event to listen for\n   * @param {Function} callback - Function to call when the event is emitted\n   * @param {number} [priority=0] - Priority of the listener (higher executes first)\n   * @return {EventSystem} - Returns this instance for chaining\n   * @throws {Error} If eventName is not a string or callback is not a function\n   */\n  once(eventName, callback, priority = 0) {\n    // Validate arguments\n    if (typeof eventName !== 'string' || eventName.trim() === '') {\n      throw new Error('Event name must be a non-empty string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n    \n    // Handle shared once listeners (common between events)\n    if (this.options.shareOnceListeners) {\n      // Track which events this callback is registered for\n      if (!this._sharedOnceCallbacks.has(callback)) {\n        this._sharedOnceCallbacks.set(callback, new Set([eventName]));\n      } else {\n        this._sharedOnceCallbacks.get(callback).add(eventName);\n      }\n    }\n\n    // Create wrapped callback function\n    const wrappedCallback = (...args) => {\n      // First remove the listener to prevent recursion\n      this.off(eventName, wrappedCallback);\n      \n      // If using shared once listeners, remove all instances of this callback\n      if (this.options.shareOnceListeners && this._sharedOnceCallbacks.has(callback)) {\n        const events = this._sharedOnceCallbacks.get(callback);\n        for (const event of events) {\n          if (event !== eventName) { // Already removed from current event\n            this.off(event, wrappedCallback);\n          }\n        }\n        // Clear tracking\n        this._sharedOnceCallbacks.delete(callback);\n      }\n      \n      // Now call the original callback\n      return callback.apply(this, args);\n    };\n    \n    // Store a reference to the original callback\n    wrappedCallback._originalCallback = callback;\n\n    // If we're currently emitting, queue the addition\n    if (this._emitting) {\n      this._pendingAdditions.push({ eventName, callback: wrappedCallback, priority, once: true });\n      return this;\n    }\n\n    // Get or create the listeners array for this event\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n\n    const listeners = this.listeners.get(eventName);\n\n    // Add the once listener with the wrapped callback\n    listeners.push({ callback: wrappedCallback, once: true, priority });\n\n    // Sort listeners by priority (highest first)\n    listeners.sort((a, b) => b.priority - a.priority);\n\n    return this;\n  }\n\n  /**\n   * Remove an event listener\n   * @param {string} eventName - Name of the event to remove listener from\n   * @param {Function} [callback] - Specific callback to remove (if omitted, all listeners for the event are removed)\n   * @return {EventSystem} - Returns this instance for chaining\n   */\n  off(eventName, callback = null) {\n    // If we're currently emitting, queue the removal\n    if (this._emitting) {\n      this._pendingRemovals.push({ eventName, callback });\n      return this;\n    }\n\n    // If eventName doesn't exist, nothing to do\n    if (!this.listeners.has(eventName)) {\n      return this;\n    }\n\n    // If callback is null, remove all listeners for this event\n    if (callback === null) {\n      // Handle shared once listeners\n      if (this.options.shareOnceListeners) {\n        const listeners = this.listeners.get(eventName);\n        for (const listener of listeners) {\n          if (listener.once && listener.callback._originalCallback) {\n            const originalCallback = listener.callback._originalCallback;\n            if (this._sharedOnceCallbacks.has(originalCallback)) {\n              const events = this._sharedOnceCallbacks.get(originalCallback);\n              events.delete(eventName);\n              if (events.size === 0) {\n                this._sharedOnceCallbacks.delete(originalCallback);\n              }\n            }\n          }\n        }\n      }\n      \n      this.listeners.delete(eventName);\n      return this;\n    }\n\n    // Otherwise, only remove the specific callback\n    const listeners = this.listeners.get(eventName);\n    \n    // Check if we're looking for a wrapped callback (once listener)\n    let originalCallback = null;\n    const isWrappedCallback = callback._originalCallback !== undefined;\n    if (isWrappedCallback) {\n      originalCallback = callback._originalCallback;\n    }\n    \n    // Filter out the callback or its wrapper\n    const filteredListeners = listeners.filter(listener => {\n      // Direct match\n      if (listener.callback === callback) {\n        return false;\n      }\n      \n      // Match based on original callback for once listeners\n      if (isWrappedCallback && listener.once && \n          listener.callback._originalCallback === originalCallback) {\n        return false;\n      }\n      \n      // If the callback is an original one, check wrapped callbacks\n      if (listener.once && listener.callback._originalCallback === callback) {\n        return false;\n      }\n      \n      return true;\n    });\n\n    if (filteredListeners.length === 0) {\n      // If no listeners remain, remove the event entirely\n      this.listeners.delete(eventName);\n    } else {\n      // Otherwise, update the listeners array\n      this.listeners.set(eventName, filteredListeners);\n    }\n    \n    // Update shared once callback tracking if appropriate\n    if (this.options.shareOnceListeners) {\n      // Find the original callback\n      const target = originalCallback || callback;\n      \n      if (this._sharedOnceCallbacks.has(target)) {\n        const events = this._sharedOnceCallbacks.get(target);\n        events.delete(eventName);\n        if (events.size === 0) {\n          this._sharedOnceCallbacks.delete(target);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Emit an event to all registered listeners\n   * @param {string} eventName - Name of the event to emit\n   * @param {*} [data] - Data to pass to the listeners\n   * @return {boolean} - True if the event had listeners, false otherwise\n   */\n  emit(eventName, data) {\n    // Mark that we're emitting an event\n    const wasEmitting = this._emitting;\n    this._emitting = true;\n    \n    // Save previous event name\n    const previousEventName = this._currentEventName;\n    this._currentEventName = eventName;\n\n    // Track whether any listeners were called\n    let listenersCalled = false;\n    \n    // Track callbacks that need to be removed from all events (shareOnceListeners mode)\n    const sharedCallbacksToRemove = new Set();\n\n    try {\n      // Add to history if debug mode is enabled\n      if (this.options.debugMode) {\n        this._addToHistory(eventName, data);\n      }\n\n      // Get all event names to emit based on the options\n      const eventNamesToEmit = this._getEventNamesForEmission(eventName);\n      \n      // Track listeners to remove after all are executed\n      const listenersToRemove = [];\n\n      // Emit to each matched event name\n      for (const name of eventNamesToEmit) {\n        if (!this.listeners.has(name)) continue;\n        \n        // Clone the listeners array to avoid issues if modified during iteration\n        const listeners = [...this.listeners.get(name)];\n\n        // Call each listener\n        for (const listener of listeners) {\n          const { callback, once } = listener;\n          \n          // If using shared once listeners and this callback is marked for removal, skip it\n          if (this.options.shareOnceListeners && once && \n              callback._originalCallback && \n              sharedCallbacksToRemove.has(callback._originalCallback)) {\n            listenersToRemove.push({ name, callback });\n            continue;\n          }\n\n          try {\n            // Call the listener with the event data\n            callback(data);\n            listenersCalled = true;\n\n            // If it's a once listener, mark for removal\n            if (once) {\n              listenersToRemove.push({ name, callback });\n              \n              // If shared once listeners is enabled, track the original callback\n              if (this.options.shareOnceListeners && callback._originalCallback) {\n                sharedCallbacksToRemove.add(callback._originalCallback);\n              }\n            }\n          } catch (error) {\n            // Log the error but continue with other listeners\n            console.error(`Error in event listener for '${name}':`, error);\n          }\n        }\n      }\n\n      // Remove all marked listeners\n      for (const { name, callback } of listenersToRemove) {\n        if (this.listeners.has(name)) {\n          const listeners = this.listeners.get(name);\n          const updatedListeners = listeners.filter(l => l.callback !== callback);\n          \n          if (updatedListeners.length === 0) {\n            this.listeners.delete(name);\n          } else {\n            this.listeners.set(name, updatedListeners);\n          }\n        }\n      }\n      \n      // If using shared once listeners, remove all instances of callbacks that were executed\n      if (this.options.shareOnceListeners && sharedCallbacksToRemove.size > 0) {\n        for (const originalCallback of sharedCallbacksToRemove) {\n          if (this._sharedOnceCallbacks.has(originalCallback)) {\n            const events = this._sharedOnceCallbacks.get(originalCallback);\n            for (const eventName of events) {\n              if (this.listeners.has(eventName)) {\n                const listeners = this.listeners.get(eventName);\n                const updated = listeners.filter(listener => \n                  !(listener.once && \n                    listener.callback._originalCallback === originalCallback));\n                \n                if (updated.length === 0) {\n                  this.listeners.delete(eventName);\n                } else {\n                  this.listeners.set(eventName, updated);\n                }\n              }\n            }\n            // Clean up tracking\n            this._sharedOnceCallbacks.delete(originalCallback);\n          }\n        }\n      }\n\n      // Process pending additions and removals (if we're not in a nested emit)\n      if (!wasEmitting) {\n        this._processPendingOperations();\n      }\n\n      return listenersCalled;\n    } finally {\n      // Restore the previous event name\n      this._currentEventName = previousEventName;\n      \n      // Only reset the emitting flag if we're the outermost emit call\n      if (!wasEmitting) {\n        this._emitting = false;\n      }\n    }\n  }\n\n  /**\n   * Check if an event has any listeners\n   * @param {string} eventName - Name of the event to check\n   * @return {boolean} - True if the event has listeners, false otherwise\n   */\n  hasListeners(eventName) {\n    // Direct match\n    if (this.listeners.has(eventName) && this.listeners.get(eventName).length > 0) {\n      return true;\n    }\n\n    // If wildcards are enabled, check for wildcard matches\n    if (this.options.enableWildcards) {\n      // 最適化: 最大チェック数を制限\n      let checked = 0;\n      const maxToCheck = 100;\n      \n      for (const [name, listeners] of this.listeners.entries()) {\n        if (++checked > maxToCheck) break;\n        \n        if (listeners.length > 0 && name.includes('*') && this._matchesWildcard(name, eventName)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event to check\n   * @return {number} - Number of listeners for the event\n   */\n  listenerCount(eventName) {\n    let count = 0;\n\n    // Direct match\n    if (this.listeners.has(eventName)) {\n      count += this.listeners.get(eventName).length;\n    }\n\n    // If wildcards are enabled, check for wildcard matches\n    if (this.options.enableWildcards) {\n      // 最適化: 最大チェック数を制限\n      let checked = 0;\n      const maxToCheck = 100;\n      \n      for (const [name, listeners] of this.listeners.entries()) {\n        if (++checked > maxToCheck) break;\n        \n        if (name !== eventName && name.includes('*') && this._matchesWildcard(name, eventName)) {\n          count += listeners.length;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  /**\n   * Get all registered event names\n   * @return {string[]} - Array of registered event names\n   */\n  eventNames() {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * Get the recent event history (only available in debug mode)\n   * @param {number} [limit=10] - Maximum number of events to return\n   * @return {Array} - Array of recent events or empty array if debug mode is disabled\n   */\n  getEventHistory(limit = 10) {\n    if (!this.options.debugMode) {\n      return [];\n    }\n\n    const actualLimit = Math.min(limit, this.eventHistory.length);\n    return this.eventHistory.slice(-actualLimit);\n  }\n\n  /**\n   * Clear all event listeners\n   * @return {EventSystem} - Returns this instance for chaining\n   */\n  removeAllListeners() {\n    this.listeners.clear();\n    this._sharedOnceCallbacks.clear();\n    return this;\n  }\n\n  /**\n   * Process pending listener additions and removals\n   * @private\n   */\n  _processPendingOperations() {\n    // 最適化: 大量のペンディング操作がある場合のガード\n    const maxOperations = 1000;\n    \n    // Process removals first to avoid issues with additions that would be immediately removed\n    const removalsToProcess = Math.min(this._pendingRemovals.length, maxOperations);\n    for (let i = 0; i < removalsToProcess; i++) {\n      const { eventName, callback } = this._pendingRemovals[i];\n      this.off(eventName, callback);\n    }\n    \n    // 処理した分だけ配列から削除\n    if (removalsToProcess === this._pendingRemovals.length) {\n      this._pendingRemovals = [];\n    } else {\n      this._pendingRemovals = this._pendingRemovals.slice(removalsToProcess);\n    }\n\n    // Then process additions\n    const additionsToProcess = Math.min(this._pendingAdditions.length, maxOperations);\n    for (let i = 0; i < additionsToProcess; i++) {\n      const { eventName, callback, priority, once } = this._pendingAdditions[i];\n      if (once) {\n        this.once(eventName, callback, priority);\n      } else {\n        this.on(eventName, callback, priority);\n      }\n    }\n    \n    // 処理した分だけ配列から削除\n    if (additionsToProcess === this._pendingAdditions.length) {\n      this._pendingAdditions = [];\n    } else {\n      this._pendingAdditions = this._pendingAdditions.slice(additionsToProcess);\n    }\n  }\n\n  /**\n   * Add an event to the history\n   * @param {string} eventName - Name of the emitted event\n   * @param {*} data - Data passed with the event\n   * @private\n   */\n  _addToHistory(eventName, data) {\n    // Add to history with timestamp\n    this.eventHistory.push({\n      eventName,\n      data,\n      timestamp: new Date()\n    });\n\n    // Trim history if it exceeds the limit\n    if (this.eventHistory.length > this.options.historyLimit) {\n      this.eventHistory.shift();\n    }\n  }\n\n  /**\n   * Get all event names to emit based on the original event and options\n   * @param {string} eventName - The original event name\n   * @return {string[]} - Array of event names to emit\n   * @private\n   */\n  _getEventNamesForEmission(eventName) {\n    const eventNames = [eventName];\n\n    // Add namespace parent events if enabled\n    if (this.options.enableNamespaces && eventName.includes('.')) {\n      const parts = eventName.split('.');\n      // 最適化: 一度に全部を計算せず徐々に親名前空間を構築\n      let parentName = '';\n      for (let i = 0; i < parts.length - 1; i++) {\n        parentName = parentName ? `${parentName}.${parts[i]}` : parts[i];\n        eventNames.push(parentName);\n      }\n    }\n\n    // 最適化: ワイルドカードが有効な場合は、必要なリスナーのみマッチングする\n    if (this.options.enableWildcards) {\n      // 最適化: リスナーの数が多すぎる場合は制限する\n      const maxListenersToCheck = 100;\n      let checkedCount = 0;\n      \n      for (const name of this.listeners.keys()) {\n        // ワイルドカード文字を含む場合のみチェック\n        if (!name.includes('*')) continue;\n        \n        // 処理済みのイベント名はスキップ\n        if (eventNames.includes(name)) continue;\n        \n        // 最大制限に達したら停止\n        if (++checkedCount > maxListenersToCheck) {\n          break;\n        }\n        \n        // ワイルドカードパターンの簡易チェック\n        if (this._matchesWildcard(name, eventName)) {\n          eventNames.push(name);\n        }\n      }\n    }\n\n    return eventNames;\n  }\n\n  /**\n   * Check if a wildcard pattern matches an event name\n   * @param {string} pattern - The wildcard pattern to check\n   * @param {string} eventName - The event name to match against\n   * @return {boolean} - True if the pattern matches the event name\n   * @private\n   */\n  _matchesWildcard(pattern, eventName) {\n    // パターンや名前が異常に長い場合はマッチングを諦める（安全対策）\n    if (pattern.length > 1000 || eventName.length > 1000) {\n      return false;\n    }\n\n    // 単純なチェック\n    if (pattern === eventName) {\n      return true;\n    }\n\n    // 単純なワイルドカードチェック\n    if (pattern === '*') {\n      return !eventName.includes('.');\n    }\n\n    if (pattern === '**') {\n      return true;\n    }\n\n    // 複数階層のワイルドカード (**) の処理\n    if (pattern.includes('**')) {\n      const parts = pattern.split('**');\n      \n      // 最適化: 最大2つのパートのみをサポート\n      if (parts.length > 2) {\n        return false;\n      }\n\n      // パターンが 'game.**' のような形式の場合\n      if (parts.length === 2 && parts[1] === '') {\n        return eventName.startsWith(parts[0]);\n      }\n\n      // パターンが '**.end' のような形式の場合\n      if (parts.length === 2 && parts[0] === '') {\n        return eventName.endsWith(parts[1]);\n      }\n\n      // パターンが 'start.**.end' のような形式の場合\n      if (parts.length === 2) {\n        return eventName.startsWith(parts[0]) && eventName.endsWith(parts[1]);\n      }\n    }\n\n    // 単一階層のワイルドカード (*) の処理\n    if (pattern.includes('*') && !pattern.includes('**')) {\n      // 正規表現を使わない最適化された方法\n      const patternParts = pattern.split('.');\n      const eventParts = eventName.split('.');\n      \n      if (patternParts.length !== eventParts.length) {\n        return false;\n      }\n      \n      for (let i = 0; i < patternParts.length; i++) {\n        if (patternParts[i] === '*') {\n          continue; // ワイルドカードは何にもマッチする\n        }\n        if (patternParts[i] !== eventParts[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = EventSystem;"],"mappings":"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","ignoreList":[]}