{"version":3,"names":["ErrorHandler","require","ErrorCatalog","ErrorLevel","MockEventSystem","constructor","emittedEvents","emit","eventName","data","push","getEmittedEvents","clearEmittedEvents","findEvents","pattern","filter","e","test","describe","eventSystem","errorHandler","consoleErrorSpy","consoleWarnSpy","consoleInfoSpy","beforeEach","jest","spyOn","console","mockImplementation","afterEach","mockRestore","expect","toBeInstanceOf","policy","toBeDefined","errorHistory","toEqual","unhandledErrors","errorCounts","Map","customOptions","throwOnLevel","FATAL","logLevel","ERROR","historyLimit","customHandler","toBe","handlerWithoutEvents","createError","not","toThrow","emitAll","WARNING","recordHistory","toBeGreaterThan","diagnosticInfo","setErrorPolicy","policyEvents","length","testCases","name","code","PLAYER","INVALID_PLAYER_ID","context","playerId","ROLE","RESTRICTED_ABILITY","roleName","ability","ACTION","INVALID_ACTION_TARGET","action","target","each","error","register","message","level","timestamp","customMessage","error1","SYSTEM","INTERNAL_ERROR","originalCode","error2","error3","error4","operation","details","errorLevelTestCases","shouldThrow","consoleMethod","DEPRECATED_FEATURE","INFO","GAME_STATE_CHANGE","handleError","consoleSpy","toHaveBeenCalled","fatalError","warningError","errorCode","phase","actionType","clearErrorHistory","i","index","history","getErrorHistory","errorA","PHASE","GAME_NOT_STARTED","errorB","ACTION_PHASE_MISMATCH","causedBy","errorC","get","errors","feature","state","forEach","report","createErrorReport","totalErrors","toBeUndefined","levelCounts","lastError","toBeNull","clearEvent","VOTE","INVALID_VOTE_TARGET","limitedHistory","clearUnhandledErrors","size","resetErrorCounts","resetEvent","UNEXPECTED_STATE","errorLevelErrors","getErrorsByLevel","warningLevelErrors","infoLevelErrors","fatalLevelErrors","undefined","errorMsg","Error","stack","mockStack"],"sources":["ErrorHandler.test.js"],"sourcesContent":["/**\n * ErrorHandler unit tests\n */\n\nconst { ErrorHandler } = require('../../../../src/core/error/ErrorHandler');\nconst { ErrorCatalog, ErrorLevel } = require('../../../../src/core/error/ErrorCatalog');\n\n// Mock EventSystem\nclass MockEventSystem {\n  constructor() {\n    this.emittedEvents = [];\n  }\n  \n  emit(eventName, data) {\n    this.emittedEvents.push({ eventName, data });\n    return true;\n  }\n  \n  getEmittedEvents() {\n    return this.emittedEvents;\n  }\n  \n  clearEmittedEvents() {\n    this.emittedEvents = [];\n  }\n  \n  // Helper to find events by name pattern\n  findEvents(pattern) {\n    return this.emittedEvents.filter(e => \n      typeof pattern === 'string' \n        ? e.eventName === pattern \n        : pattern.test(e.eventName)\n    );\n  }\n}\n\ndescribe('ErrorHandler', () => {\n  let eventSystem;\n  let errorHandler;\n  let consoleErrorSpy;\n  let consoleWarnSpy;\n  let consoleInfoSpy;\n  \n  beforeEach(() => {\n    // Spy on console methods\n    consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n    consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});\n    consoleInfoSpy = jest.spyOn(console, 'info').mockImplementation(() => {});\n    \n    eventSystem = new MockEventSystem();\n    errorHandler = new ErrorHandler(eventSystem);\n  });\n  \n  afterEach(() => {\n    consoleErrorSpy.mockRestore();\n    consoleWarnSpy.mockRestore();\n    consoleInfoSpy.mockRestore();\n    \n    eventSystem.clearEmittedEvents();\n  });\n  \n  // Test creation\n  describe('Initialization', () => {\n    test('should create a new error handler with default policy', () => {\n      expect(errorHandler).toBeInstanceOf(ErrorHandler);\n      expect(errorHandler.policy).toBeDefined();\n      expect(errorHandler.errorHistory).toEqual([]);\n      expect(errorHandler.unhandledErrors).toEqual([]);\n      expect(errorHandler.errorCounts).toBeInstanceOf(Map);\n    });\n    \n    test('should create error handler with custom policy', () => {\n      const customOptions = {\n        policy: {\n          throwOnLevel: ErrorLevel.FATAL,\n          logLevel: ErrorLevel.ERROR,\n          historyLimit: 100\n        }\n      };\n      \n      const customHandler = new ErrorHandler(eventSystem, customOptions);\n      \n      expect(customHandler.policy.throwOnLevel).toBe(ErrorLevel.FATAL);\n      expect(customHandler.policy.logLevel).toBe(ErrorLevel.ERROR);\n      expect(customHandler.policy.historyLimit).toBe(100);\n    });\n    \n    test('should handle creation without event system', () => {\n      const handlerWithoutEvents = new ErrorHandler();\n      \n      // Should still be able to create and handle errors\n      expect(() => {\n        handlerWithoutEvents.createError('E0101', 'Test error');\n      }).not.toThrow();\n    });\n  });\n  \n  // Test error policy\n  describe('Error Policy', () => {\n    test('should have default error policy values', () => {\n      // Check default policy values\n      expect(errorHandler.policy.throwOnLevel).toBe(ErrorLevel.ERROR);\n      expect(errorHandler.policy.emitAll).toBe(true);\n      expect(errorHandler.policy.logLevel).toBe(ErrorLevel.WARNING);\n      expect(errorHandler.policy.recordHistory).toBe(true);\n      expect(errorHandler.policy.historyLimit).toBeGreaterThan(0);\n      expect(errorHandler.policy.diagnosticInfo).toBe(true);\n    });\n    \n    test('should update error policy partially', () => {\n      // Update only some policy settings\n      errorHandler.setErrorPolicy({\n        throwOnLevel: ErrorLevel.FATAL,\n        emitAll: false\n      });\n      \n      // Changed settings should be updated\n      expect(errorHandler.policy.throwOnLevel).toBe(ErrorLevel.FATAL);\n      expect(errorHandler.policy.emitAll).toBe(false);\n      \n      // Other settings should remain default\n      expect(errorHandler.policy.logLevel).toBe(ErrorLevel.WARNING);\n      expect(errorHandler.policy.recordHistory).toBe(true);\n    });\n    \n    test('should emit policy change event', () => {\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      const policyEvents = eventSystem.findEvents('error.policy.change');\n      expect(policyEvents.length).toBe(1);\n      expect(policyEvents[0].data.policy.throwOnLevel).toBe(ErrorLevel.FATAL);\n    });\n    \n    test('should handle policy update without event system', () => {\n      const handlerWithoutEvents = new ErrorHandler();\n      \n      // Should not throw when updating policy without event system\n      expect(() => {\n        handlerWithoutEvents.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      }).not.toThrow();\n    });\n  });\n  \n  // Test error creation\n  describe('Creating Errors', () => {\n    const testCases = [\n      { \n        name: 'player error', \n        code: ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code, \n        context: { playerId: 123 } \n      },\n      { \n        name: 'role error', \n        code: ErrorCatalog.ROLE.RESTRICTED_ABILITY.code, \n        context: { roleName: 'seer', ability: 'guard' } \n      },\n      { \n        name: 'action error', \n        code: ErrorCatalog.ACTION.INVALID_ACTION_TARGET.code, \n        context: { action: 'fortune', target: 456 } \n      }\n    ];\n    \n    test.each(testCases)('should create a $name from error code', ({ code, context }) => {\n      const error = errorHandler.register(code, context);\n      \n      // Error structure should be correct\n      expect(error.code).toBe(code);\n      expect(error.message).toBeDefined();\n      expect(error.level).toBeDefined();\n      expect(error.context).toEqual(context);\n      expect(error.timestamp).toBeGreaterThan(0);\n    });\n    \n    test('should create error with custom message', () => {\n      const customMessage = 'カスタムエラーメッセージ';\n      const error = errorHandler.createError(\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        customMessage,\n        { playerId: 123 }\n      );\n      \n      expect(error.code).toBe(ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code);\n      expect(error.message).toBe(customMessage);\n      expect(error.context.playerId).toBe(123);\n    });\n    \n    test('should handle unknown error codes gracefully', () => {\n      // Completely unknown code\n      const error1 = errorHandler.register('UNKNOWN_CODE', { data: 'test' });\n      expect(error1.code).toBe(ErrorCatalog.SYSTEM.INTERNAL_ERROR.code);\n      expect(error1.context.originalCode).toBe('UNKNOWN_CODE');\n      \n      // Malformed but similar to real code\n      const error2 = errorHandler.register('E0100', { data: 'test' });\n      expect(error2.code).toBe(ErrorCatalog.SYSTEM.INTERNAL_ERROR.code);\n      expect(error2.context.originalCode).toBe('E0100');\n      \n      // Empty code\n      const error3 = errorHandler.register('', { data: 'test' });\n      expect(error3.code).toBe(ErrorCatalog.SYSTEM.INTERNAL_ERROR.code);\n      \n      // Non-string code\n      const error4 = errorHandler.register(12345, { data: 'test' });\n      expect(error4.code).toBe(ErrorCatalog.SYSTEM.INTERNAL_ERROR.code);\n    });\n    \n    test('should add diagnostic information for errors', () => {\n      // Create a fatal error which should include stack trace\n      const error = errorHandler.createError(\n        ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        'Fatal system error',\n        { operation: 'test' }\n      );\n      \n      expect(error.details).toBeDefined();\n      expect(error.timestamp).toBeDefined();\n    });\n  });\n  \n  // Test error handling\n  describe('Handling Errors', () => {\n    // Test cases for different error levels\n    const errorLevelTestCases = [\n      { \n        level: ErrorLevel.FATAL, \n        code: ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        shouldThrow: true,\n        consoleMethod: 'error'\n      },\n      { \n        level: ErrorLevel.ERROR, \n        code: ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        shouldThrow: true,\n        consoleMethod: 'error'\n      },\n      { \n        level: ErrorLevel.WARNING, \n        code: ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n        shouldThrow: false,\n        consoleMethod: 'warn'\n      },\n      { \n        level: ErrorLevel.INFO, \n        code: ErrorCatalog.INFO.GAME_STATE_CHANGE.code,\n        shouldThrow: false,\n        consoleMethod: 'info'\n      }\n    ];\n    \n    // Test default behavior with default policy\n    test.each(errorLevelTestCases)(\n      'should handle $level level error appropriately with default policy',\n      ({ level, code, shouldThrow, consoleMethod }) => {\n        const error = errorHandler.createError(code, `Test ${level} error`, { level });\n        \n        if (shouldThrow) {\n          expect(() => errorHandler.handleError(error)).toThrow();\n        } else {\n          expect(() => errorHandler.handleError(error)).not.toThrow();\n          expect(errorHandler.unhandledErrors.length).toBe(1);\n        }\n        \n        // Check console output\n        const consoleSpy = consoleMethod === 'error' ? consoleErrorSpy :\n                          consoleMethod === 'warn' ? consoleWarnSpy : consoleInfoSpy;\n        \n        if (level === ErrorLevel.INFO && errorHandler.policy.logLevel === ErrorLevel.WARNING) {\n          // INFO level should not be logged with default WARNING log level\n          expect(consoleSpy).not.toHaveBeenCalled();\n        } else {\n          expect(consoleSpy).toHaveBeenCalled();\n        }\n      }\n    );\n    \n    // Test with custom policy\n    test('should respect custom error policy for throwing', () => {\n      // Set policy to only throw on FATAL\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // ERROR level should not throw\n      const error = errorHandler.createError(\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        'Test error',\n        {}\n      );\n      \n      expect(() => errorHandler.handleError(error)).not.toThrow();\n      \n      // FATAL level should still throw\n      const fatalError = errorHandler.createError(\n        ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        'Test fatal error',\n        {}\n      );\n      \n      expect(() => errorHandler.handleError(fatalError)).toThrow();\n    });\n    \n    test('should respect custom error policy for logging', () => {\n      // Set policy to only log ERROR and above\n      errorHandler.setErrorPolicy({ logLevel: ErrorLevel.ERROR });\n      \n      // WARNING level should not be logged\n      const warningError = errorHandler.createError(\n        ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n        'Test warning',\n        {}\n      );\n      \n      errorHandler.handleError(warningError);\n      expect(consoleWarnSpy).not.toHaveBeenCalled();\n      \n      // ERROR level should be logged\n      const error = errorHandler.createError(\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        'Test error',\n        {}\n      );\n      \n      try {\n        errorHandler.handleError(error);\n      } catch (e) {\n        // Ignore thrown error\n      }\n      \n      expect(consoleErrorSpy).toHaveBeenCalled();\n    });\n    \n    test('should emit appropriate error events', () => {\n      // Set policy to not throw (so we can check all events)\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // Create and handle error\n      const errorCode = ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code;\n      const error = errorHandler.createError(\n        errorCode,\n        'Test error',\n        { playerId: 123, phase: 'night', actionType: 'fortune' }\n      );\n      \n      errorHandler.handleError(error);\n      \n      // Check emitted events\n      const emittedEvents = eventSystem.getEmittedEvents();\n      \n      // Should have these specific events\n      expect(eventSystem.findEvents('error').length).toBe(1);\n      expect(eventSystem.findEvents(`error.${ErrorLevel.ERROR}`).length).toBe(1);\n      expect(eventSystem.findEvents(`error.code.${errorCode}`).length).toBe(1);\n      expect(eventSystem.findEvents('error.player.123').length).toBe(1);\n      expect(eventSystem.findEvents('error.phase.night').length).toBe(1);\n      expect(eventSystem.findEvents('error.action.fortune').length).toBe(1);\n    });\n    \n    test('should disable event emission if emitAll is false', () => {\n      // Set policy to not throw and not emit\n      errorHandler.setErrorPolicy({ \n        throwOnLevel: ErrorLevel.FATAL,\n        emitAll: false\n      });\n      \n      // Create and handle error\n      const error = errorHandler.createError(\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        'Test error',\n        { playerId: 123 }\n      );\n      \n      errorHandler.handleError(error);\n      \n      // No events should be emitted\n      expect(eventSystem.getEmittedEvents().length).toBe(0);\n    });\n    \n    test('should add error to history based on policy', () => {\n      // First with recording enabled (default)\n      const error1 = errorHandler.createError(\n        ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n        'Test warning',\n        {}\n      );\n      \n      errorHandler.handleError(error1);\n      expect(errorHandler.errorHistory.length).toBe(1);\n      \n      // Now with recording disabled\n      errorHandler.clearErrorHistory();\n      errorHandler.setErrorPolicy({ recordHistory: false });\n      \n      const error2 = errorHandler.createError(\n        ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n        'Test warning 2',\n        {}\n      );\n      \n      errorHandler.handleError(error2);\n      expect(errorHandler.errorHistory.length).toBe(0);\n    });\n    \n    test('should enforce history limit', () => {\n      // Set a small history limit\n      errorHandler.setErrorPolicy({ historyLimit: 2 });\n      \n      // Create 3 errors\n      for (let i = 0; i < 3; i++) {\n        const error = errorHandler.createError(\n          ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n          `Test ${i}`,\n          { index: i }\n        );\n        \n        errorHandler.handleError(error);\n      }\n      \n      // Should only keep the latest 2\n      const history = errorHandler.getErrorHistory();\n      expect(history.length).toBe(2);\n      expect(history[0].context.index).toBe(1);\n      expect(history[1].context.index).toBe(2);\n    });\n    \n    test('should handle complex error chains', () => {\n      // Set not to throw\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // Create multiple related errors\n      const errorA = errorHandler.createError(\n        ErrorCatalog.PHASE.GAME_NOT_STARTED.code,\n        'Game not started',\n        { operation: 'startTurn' }\n      );\n      \n      const errorB = errorHandler.createError(\n        ErrorCatalog.ACTION.ACTION_PHASE_MISMATCH.code,\n        'Invalid action phase',\n        { actionType: 'startTurn', phase: null, causedBy: errorA.code }\n      );\n      \n      const errorC = errorHandler.createError(\n        ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        'System failure',\n        { operation: 'gameLoop', causedBy: errorB.code }\n      );\n      \n      // Handle the errors in sequence\n      errorHandler.handleError(errorA);\n      errorHandler.handleError(errorB);\n      try {\n        errorHandler.handleError(errorC); // Should throw as it's FATAL\n      } catch (e) {\n        // Expected\n      }\n      \n      // Should have all three in history\n      expect(errorHandler.errorHistory.length).toBe(3);\n      \n      // First two should be in unhandled\n      expect(errorHandler.unhandledErrors.length).toBe(2);\n      \n      // Error counts should reflect all three\n      expect(errorHandler.errorCounts.get(errorA.code)).toBe(1);\n      expect(errorHandler.errorCounts.get(errorB.code)).toBe(1);\n      expect(errorHandler.errorCounts.get(errorC.code)).toBe(1);\n    });\n  });\n  \n  // Test error reporting\n  describe('Error Reporting', () => {\n    beforeEach(() => {\n      // Set up a diverse set of errors for reporting\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // Create errors of different levels\n      const errors = [\n        { code: ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code, context: { playerId: 1 } },\n        { code: ErrorCatalog.ROLE.RESTRICTED_ABILITY.code, context: { roleName: 'seer' } },\n        { code: ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code, context: { playerId: 2 } }, // Duplicate\n        { code: ErrorCatalog.WARNING.DEPRECATED_FEATURE.code, context: { feature: 'old' } },\n        { code: ErrorCatalog.INFO.GAME_STATE_CHANGE.code, context: { state: 'new' } }\n      ];\n      \n      errors.forEach(({ code, context }) => {\n        const error = errorHandler.register(code, context);\n        errorHandler.handleError(error);\n      });\n    });\n    \n    test('should create basic error report', () => {\n      const report = errorHandler.createErrorReport(false);\n      \n      // Check basic properties\n      expect(report.totalErrors).toBe(5);\n      expect(report.unhandledErrors).toBe(5);\n      expect(report.timestamp).toBeGreaterThan(0);\n      expect(report.policy).toEqual(errorHandler.policy);\n      \n      // Check error counts\n      expect(report.errorCounts[ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code]).toBe(2);\n      expect(report.errorCounts[ErrorCatalog.ROLE.RESTRICTED_ABILITY.code]).toBe(1);\n      expect(report.errorCounts[ErrorCatalog.WARNING.DEPRECATED_FEATURE.code]).toBe(1);\n      expect(report.errorCounts[ErrorCatalog.INFO.GAME_STATE_CHANGE.code]).toBe(1);\n      \n      // Basic report should not include detailed info\n      expect(report.history).toBeUndefined();\n      expect(report.levelCounts).toBeUndefined();\n    });\n    \n    test('should create detailed error report', () => {\n      const report = errorHandler.createErrorReport(true);\n      \n      // Should include detailed info\n      expect(report.history).toBeDefined();\n      expect(report.history.length).toBe(5);\n      expect(report.levelCounts).toBeDefined();\n      expect(report.unhandledErrors).toBeDefined();\n      \n      // Check level counts\n      expect(report.levelCounts[ErrorLevel.ERROR]).toBe(3); // 2 player errors + 1 role error\n      expect(report.levelCounts[ErrorLevel.WARNING]).toBe(1);\n      expect(report.levelCounts[ErrorLevel.INFO]).toBe(1);\n    });\n    \n    test('should handle report creation with no errors', () => {\n      // Clear history and create report\n      errorHandler.clearErrorHistory();\n      const report = errorHandler.createErrorReport(true);\n      \n      // Should have zero counts but valid structure\n      expect(report.totalErrors).toBe(0);\n      expect(report.history).toEqual([]);\n      expect(report.lastError).toBeNull();\n      \n      // Level counts should all be zero\n      expect(report.levelCounts[ErrorLevel.FATAL]).toBe(0);\n      expect(report.levelCounts[ErrorLevel.ERROR]).toBe(0);\n      expect(report.levelCounts[ErrorLevel.WARNING]).toBe(0);\n      expect(report.levelCounts[ErrorLevel.INFO]).toBe(0);\n    });\n  });\n  \n  // Test error history management\n  describe('Error History Management', () => {\n    beforeEach(() => {\n      // Create some errors\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // Add different error types\n      [\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        ErrorCatalog.WARNING.DEPRECATED_FEATURE.code,\n        ErrorCatalog.ACTION.INVALID_ACTION_TARGET.code\n      ].forEach(code => {\n        const error = errorHandler.register(code, {});\n        errorHandler.handleError(error);\n      });\n    });\n    \n    test('should clear error history', () => {\n      // Verify errors exist\n      expect(errorHandler.getErrorHistory().length).toBe(3);\n      \n      // Clear history\n      errorHandler.clearErrorHistory();\n      \n      // Verify it's empty\n      expect(errorHandler.getErrorHistory().length).toBe(0);\n      \n      // Should emit clear event\n      const clearEvent = eventSystem.findEvents('error.history.clear');\n      expect(clearEvent.length).toBe(1);\n    });\n    \n    test('should get error history with limit', () => {\n      // Create more errors\n      [\n        ErrorCatalog.ROLE.RESTRICTED_ABILITY.code,\n        ErrorCatalog.VOTE.INVALID_VOTE_TARGET.code\n      ].forEach(code => {\n        const error = errorHandler.register(code, {});\n        errorHandler.handleError(error);\n      });\n      \n      // Get limited history\n      const limitedHistory = errorHandler.getErrorHistory(2);\n      expect(limitedHistory.length).toBe(2);\n      \n      // Should be the most recent 2 errors\n      expect(limitedHistory[0].code).toBe(ErrorCatalog.ROLE.RESTRICTED_ABILITY.code);\n      expect(limitedHistory[1].code).toBe(ErrorCatalog.VOTE.INVALID_VOTE_TARGET.code);\n    });\n    \n    test('should clear unhandled errors', () => {\n      // Verify unhandled errors exist\n      expect(errorHandler.unhandledErrors.length).toBe(3);\n      \n      // Clear unhandled errors\n      errorHandler.clearUnhandledErrors();\n      \n      // Verify it's empty\n      expect(errorHandler.unhandledErrors.length).toBe(0);\n      \n      // Should emit clear event\n      const clearEvent = eventSystem.findEvents('error.unhandled.clear');\n      expect(clearEvent.length).toBe(1);\n    });\n    \n    test('should reset error counts', () => {\n      // Verify error counts exist\n      expect(errorHandler.errorCounts.size).toBe(3);\n      \n      // Reset counts\n      errorHandler.resetErrorCounts();\n      \n      // Verify it's empty\n      expect(errorHandler.errorCounts.size).toBe(0);\n      \n      // Should emit reset event\n      const resetEvent = eventSystem.findEvents('error.counts.reset');\n      expect(resetEvent.length).toBe(1);\n    });\n    \n    test('should handle history methods without event system', () => {\n      const handlerWithoutEvents = new ErrorHandler();\n      \n      // Add some errors\n      const error = handlerWithoutEvents.createError(\n        ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code,\n        'Test error'\n      );\n      \n      try {\n        handlerWithoutEvents.handleError(error);\n      } catch (e) {\n        // Expected to throw\n      }\n      \n      // Should not throw when calling history methods\n      expect(() => {\n        handlerWithoutEvents.clearErrorHistory();\n        handlerWithoutEvents.clearUnhandledErrors();\n        handlerWithoutEvents.resetErrorCounts();\n      }).not.toThrow();\n    });\n  });\n  \n  // Test error filtering\n  describe('Error Filtering', () => {\n    beforeEach(() => {\n      // Create a diverse set of errors\n      errorHandler.setErrorPolicy({ throwOnLevel: ErrorLevel.FATAL });\n      \n      // Create errors of various levels\n      [\n        { code: ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code, level: ErrorLevel.ERROR },\n        { code: ErrorCatalog.ROLE.RESTRICTED_ABILITY.code, level: ErrorLevel.ERROR },\n        { code: ErrorCatalog.WARNING.DEPRECATED_FEATURE.code, level: ErrorLevel.WARNING },\n        { code: ErrorCatalog.WARNING.UNEXPECTED_STATE.code, level: ErrorLevel.WARNING },\n        { code: ErrorCatalog.INFO.GAME_STATE_CHANGE.code, level: ErrorLevel.INFO }\n      ].forEach(({ code }) => {\n        const error = errorHandler.register(code, {});\n        errorHandler.handleError(error);\n      });\n    });\n    \n    test('should filter errors by level', () => {\n      // Get errors by level\n      const errorLevelErrors = errorHandler.getErrorsByLevel(ErrorLevel.ERROR);\n      const warningLevelErrors = errorHandler.getErrorsByLevel(ErrorLevel.WARNING);\n      const infoLevelErrors = errorHandler.getErrorsByLevel(ErrorLevel.INFO);\n      const fatalLevelErrors = errorHandler.getErrorsByLevel(ErrorLevel.FATAL);\n      \n      // Check counts\n      expect(errorLevelErrors.length).toBe(2);\n      expect(warningLevelErrors.length).toBe(2);\n      expect(infoLevelErrors.length).toBe(1);\n      expect(fatalLevelErrors.length).toBe(0); // No fatal errors created\n      \n      // Check error types\n      expect(errorLevelErrors[0].code).toBe(ErrorCatalog.PLAYER.INVALID_PLAYER_ID.code);\n      expect(warningLevelErrors[0].code).toBe(ErrorCatalog.WARNING.DEPRECATED_FEATURE.code);\n      expect(infoLevelErrors[0].code).toBe(ErrorCatalog.INFO.GAME_STATE_CHANGE.code);\n    });\n    \n    test('should handle getErrorsByLevel with invalid parameters', () => {\n      // Test with invalid level\n      expect(errorHandler.getErrorsByLevel('INVALID_LEVEL')).toEqual([]);\n      expect(errorHandler.getErrorsByLevel(null)).toEqual([]);\n      expect(errorHandler.getErrorsByLevel(undefined)).toEqual([]);\n      expect(errorHandler.getErrorsByLevel(123)).toEqual([]);\n    });\n  });\n  \n  // Test native error creation\n  describe('Native Error Creation', () => {\n    test('should convert error structure to native Error object', () => {\n      // Create error that will be converted to native Error\n      const errorCode = ErrorCatalog.SYSTEM.INTERNAL_ERROR.code;\n      const errorMsg = 'Critical system failure';\n      const error = errorHandler.createError(errorCode, errorMsg, { operation: 'test' });\n      \n      try {\n        errorHandler.handleError(error);\n        // Should not reach here\n        expect(true).toBe(false);\n      } catch (e) {\n        // Check that the thrown error is a native Error with our properties\n        expect(e).toBeInstanceOf(Error);\n        expect(e.message).toBe(errorMsg);\n        expect(e.code).toBe(errorCode);\n        expect(e.level).toBe(error.level);\n        expect(e.context).toEqual(error.context);\n        expect(e.timestamp).toBe(error.timestamp);\n        expect(e.stack).toBeDefined();\n      }\n    });\n    \n    test('should preserve stack trace in native error', () => {\n      // Mock a stack trace\n      const mockStack = 'Error: Test\\n    at line1\\n    at line2';\n      \n      // Create error with mock stack\n      const error = errorHandler.createError(\n        ErrorCatalog.SYSTEM.INTERNAL_ERROR.code,\n        'Test error',\n        {}\n      );\n      \n      error.stack = mockStack;\n      \n      try {\n        errorHandler.handleError(error);\n        // Should not reach here\n        expect(true).toBe(false);\n      } catch (e) {\n        // Native error should have the mock stack\n        expect(e.stack).toBe(mockStack);\n      }\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}