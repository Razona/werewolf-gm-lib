4670ae63bc353e5b0598a6ae94fa410e
/**
 * Validator unit tests
 */

const Validator = require('../../../../src/core/error/Validator');
const {
  ErrorCatalog
} = require('../../../../src/core/error/ErrorCatalog');

// Mock ErrorHandler
class MockErrorHandler {
  constructor() {
    this.errors = [];
    this.shouldThrow = false;
  }
  createError(code, message, context) {
    const error = {
      code,
      message,
      context
    };
    return error;
  }
  handleError(error) {
    this.errors.push(error);
    if (this.shouldThrow) {
      throw new Error(error.message || `Error: ${error.code}`);
    }
    return false;
  }
  getErrors() {
    return this.errors;
  }
  clearErrors() {
    this.errors = [];
  }
  setShouldThrow(shouldThrow) {
    this.shouldThrow = shouldThrow;
  }
}
describe('Validator', () => {
  let errorHandler;
  let validator;
  beforeEach(() => {
    errorHandler = new MockErrorHandler();
    validator = new Validator(errorHandler);
  });
  afterEach(() => {
    errorHandler.clearErrors();
  });

  // Test creation
  describe('Initialization', () => {
    test('should create new validator instance', () => {
      expect(validator).toBeInstanceOf(Validator);
      expect(validator.errorHandler).toBe(errorHandler);
      expect(validator.customValidators).toBeInstanceOf(Map);
      expect(validator.customValidators.size).toBe(0);
    });
    test('should work without error handler', () => {
      // Should not throw when created without errorHandler
      const validatorWithoutHandler = new Validator();

      // Should gracefully handle validation without error handler
      expect(() => {
        validatorWithoutHandler.validateExists(null, 'E0001');
      }).not.toThrow();
    });
  });

  // Test basic validations
  describe('Basic Validations', () => {
    describe('validateExists', () => {
      const validValues = [{
        value: 'test',
        desc: 'string'
      }, {
        value: 0,
        desc: 'zero'
      }, {
        value: false,
        desc: 'false'
      }, {
        value: {},
        desc: 'empty object'
      }, {
        value: [],
        desc: 'empty array'
      }, {
        value: '',
        desc: 'empty string'
      }, {
        value: NaN,
        desc: 'NaN'
      }];
      const invalidValues = [{
        value: null,
        desc: 'null'
      }, {
        value: undefined,
        desc: 'undefined'
      }];
      test.each(validValues)('should pass for non-null/undefined value: $desc', ({
        value
      }) => {
        expect(validator.validateExists(value, 'E0001')).toBe(true);
        expect(errorHandler.errors.length).toBe(0);
      });
      test.each(invalidValues)('should fail for $desc value', ({
        value
      }) => {
        expect(validator.validateExists(value, 'E0001')).toBe(false);
        expect(errorHandler.errors.length).toBe(1);
        expect(errorHandler.errors[0].code).toBe('E0001');
      });
      test('should include custom error message', () => {
        const customMessage = 'Custom error message';
        validator.validateExists(null, 'E0001', customMessage);
        expect(errorHandler.errors[0].message).toBe(customMessage);
      });
      test('should include context in error', () => {
        const context = {
          key: 'value',
          operation: 'test'
        };
        validator.validateExists(null, 'E0001', null, context);
        expect(errorHandler.errors[0].context).toEqual(context);
      });
    });
    describe('validateCondition', () => {
      const testCases = [{
        condition: true,
        desc: 'true',
        shouldPass: true
      }, {
        condition: 1 === 1,
        desc: 'expression that evaluates to true',
        shouldPass: true
      }, {
        condition: false,
        desc: 'false',
        shouldPass: false
      }, {
        condition: 1 > 2,
        desc: 'expression that evaluates to false',
        shouldPass: false
      }];
      test.each(testCases)('should $shouldPass ? "pass" : "fail" for condition: $desc', ({
        condition,
        shouldPass
      }) => {
        expect(validator.validateCondition(condition, 'E0001')).toBe(shouldPass);
        expect(errorHandler.errors.length).toBe(shouldPass ? 0 : 1);
        if (!shouldPass) {
          expect(errorHandler.errors[0].code).toBe('E0001');
        }
      });
      test('should include custom error message and context', () => {
        const customMessage = 'Custom error message';
        const context = {
          key: 'value',
          operation: 'test'
        };
        validator.validateCondition(false, 'E0001', customMessage, context);
        expect(errorHandler.errors[0].message).toBe(customMessage);
        expect(errorHandler.errors[0].context).toEqual(context);
      });
      test('should handle complex conditions', () => {
        const values = [1, 2, 3, 4, 5];
        const condition = values.every(v => v > 0) && values.some(v => v > 4);
        expect(validator.validateCondition(condition, 'E0001')).toBe(true);
        expect(errorHandler.errors.length).toBe(0);
      });
    });
  });

  // Test type validation
  describe('Type Validation', () => {
    const typeTestCases = [
    // Valid cases
    {
      value: 'test',
      type: 'string',
      desc: 'string value with string type',
      shouldPass: true
    }, {
      value: 123,
      type: 'number',
      desc: 'number value with number type',
      shouldPass: true
    }, {
      value: true,
      type: 'boolean',
      desc: 'boolean value with boolean type',
      shouldPass: true
    }, {
      value: {},
      type: 'object',
      desc: 'object value with object type',
      shouldPass: true
    }, {
      value: [],
      type: 'array',
      desc: 'array value with array type',
      shouldPass: true
    }, {
      value: () => {},
      type: 'function',
      desc: 'function value with function type',
      shouldPass: true
    }, {
      value: null,
      type: 'null',
      desc: 'null value with null type',
      shouldPass: true
    }, {
      value: undefined,
      type: 'undefined',
      desc: 'undefined value with undefined type',
      shouldPass: true
    }, {
      value: 42,
      type: 'integer',
      desc: 'integer value with integer type',
      shouldPass: true
    }, {
      value: 3.14,
      type: 'number',
      desc: 'float value with number type',
      shouldPass: true
    }, {
      value: 42,
      type: 'positive',
      desc: 'positive number with positive type',
      shouldPass: true
    }, {
      value: 0,
      type: 'nonnegative',
      desc: 'zero with nonnegative type',
      shouldPass: true
    },
    // Invalid cases
    {
      value: 'test',
      type: 'number',
      desc: 'string value with number type',
      shouldPass: false
    }, {
      value: 123,
      type: 'string',
      desc: 'number value with string type',
      shouldPass: false
    }, {
      value: true,
      type: 'object',
      desc: 'boolean value with object type',
      shouldPass: false
    }, {
      value: {},
      type: 'array',
      desc: 'object value with array type',
      shouldPass: false
    }, {
      value: [],
      type: 'function',
      desc: 'array value with function type',
      shouldPass: false
    }, {
      value: NaN,
      type: 'number',
      desc: 'NaN with number type',
      shouldPass: false
    }, {
      value: -5,
      type: 'positive',
      desc: 'negative number with positive type',
      shouldPass: false
    }, {
      value: -1,
      type: 'nonnegative',
      desc: 'negative number with nonnegative type',
      shouldPass: false
    }, {
      value: 3.14,
      type: 'integer',
      desc: 'float value with integer type',
      shouldPass: false
    }];
    test.each(typeTestCases)('validateType should $shouldPass ? "pass" : "fail" for $desc', ({
      value,
      type,
      shouldPass
    }) => {
      expect(validator.validateType(value, type, 'E0001')).toBe(shouldPass);
      expect(errorHandler.errors.length).toBe(shouldPass ? 0 : 1);
      if (!shouldPass) {
        expect(errorHandler.errors[0].code).toBe('E0001');
        // Should include type information in context
        expect(errorHandler.errors[0].context.expectedType).toBe(type);
        expect(errorHandler.errors[0].context.value).toBe(value);
      }
    });
  });

  // Test custom validators
  describe('Custom Validators', () => {
    test('should register a custom validator', () => {
      const validatorFn = value => value > 0;
      validator.registerValidator('isPositive', validatorFn);
      expect(validator.customValidators.has('isPositive')).toBe(true);
      expect(validator.customValidators.get('isPositive')).toBe(validatorFn);
    });
    test('should execute a custom validator', () => {
      // Register validator
      validator.registerValidator('isPositive', value => value > 0);

      // Test with passing value
      expect(validator.validate('isPositive', 5, 'E0001')).toBe(true);
      expect(errorHandler.errors.length).toBe(0);

      // Test with failing value
      expect(validator.validate('isPositive', -5, 'E0001')).toBe(false);
      expect(errorHandler.errors.length).toBe(1);
      expect(errorHandler.errors[0].code).toBe('E0001');
      expect(errorHandler.errors[0].context.validator).toBe('isPositive');
      expect(errorHandler.errors[0].context.value).toBe(-5);
    });
    test('should handle unregistered validator', () => {
      errorHandler.setShouldThrow(true);
      expect(() => validator.validate('nonExistentValidator', 5, 'E0001')).toThrow();
      expect(errorHandler.errors.length).toBe(1);
      expect(errorHandler.errors[0].code).toContain('VALIDATOR_NOT_FOUND');
    });
    test('should register a complex validator with context', () => {
      // Register a complex username validator
      validator.registerValidator('isValidUsername', (username, context) => {
        // Min length 3, max length 20
        if (typeof username !== 'string' || username.length < 3 || username.length > 20) {
          return false;
        }

        // Alphanumeric with underscore and hyphen only
        if (!/^[a-zA-Z0-9_-]+$/.test(username)) {
          return false;
        }

        // Must start with a letter
        if (!/^[a-zA-Z]/.test(username)) {
          return false;
        }

        // Check against reserved names if provided in context
        if (context && context.reservedNames && context.reservedNames.includes(username.toLowerCase())) {
          return false;
        }
        return true;
      });

      // Valid username, no reserved names
      expect(validator.validate('isValidUsername', 'validUser123', 'E0001')).toBe(true);

      // Invalid - too short
      expect(validator.validate('isValidUsername', 'ab', 'E0001')).toBe(false);

      // Invalid - special characters
      expect(validator.validate('isValidUsername', 'user@name', 'E0001')).toBe(false);

      // Invalid - starts with number
      expect(validator.validate('isValidUsername', '1username', 'E0001')).toBe(false);

      // Valid username, but in reserved names
      const context = {
        reservedNames: ['admin', 'root', 'system']
      };
      expect(validator.validate('isValidUsername', 'admin', 'E0001', null, context)).toBe(false);

      // Valid username, not in reserved names
      expect(validator.validate('isValidUsername', 'normalUser', 'E0001', null, context)).toBe(true);

      // Check error count (4 failures)
      expect(errorHandler.errors.length).toBe(4);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,