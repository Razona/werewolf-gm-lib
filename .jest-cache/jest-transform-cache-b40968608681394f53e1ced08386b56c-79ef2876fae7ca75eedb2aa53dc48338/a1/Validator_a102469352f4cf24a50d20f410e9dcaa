eb8aef9327d3d29957fc32976b0a287c
/**
 * Validator - Input validation and business rule enforcement
 *
 * Provides utility methods for validating input data and enforcing game rules
 * with standardized error handling
 */

const {
  ErrorCatalog
} = require('./ErrorCatalog');

/**
 * Validator class containing methods for input and business rule validation
 */
class Validator {
  /**
   * Create a new validator
   * @param {ErrorHandler} errorHandler - Error handler instance
   */
  constructor(errorHandler) {
    this.errorHandler = errorHandler;
    this.customValidators = new Map();
  }

  /**
   * Validate that a value exists (not null or undefined)
   * @param {*} value - Value to check
   * @param {string} errorCode - Error code if validation fails
   * @param {string} [customMessage] - Optional custom error message
   * @param {Object} [context] - Additional context for the error
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateExists(value, errorCode, customMessage, context = {}) {
    if (value === undefined || value === null) {
      const error = this.errorHandler.createError(errorCode, customMessage, context);
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Validate that a condition is true
   * @param {boolean} condition - Condition to check
   * @param {string} errorCode - Error code if validation fails
   * @param {string} [customMessage] - Optional custom error message
   * @param {Object} [context] - Additional context for the error
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateCondition(condition, errorCode, customMessage, context = {}) {
    if (!condition) {
      const error = this.errorHandler.createError(errorCode, customMessage, context);
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Validate that a value is of a specific type
   * @param {*} value - Value to check
   * @param {string|string[]} expectedType - Expected type(s) of the value
   * @param {string} errorCode - Error code if validation fails
   * @param {string} [customMessage] - Optional custom error message
   * @param {Object} [context] - Additional context for the error
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateType(value, expectedType, errorCode, customMessage, context = {}) {
    let valid = false;
    if (Array.isArray(expectedType)) {
      // Check against multiple possible types
      valid = expectedType.some(type => this._checkType(value, type));
    } else {
      // Check against a single type
      valid = this._checkType(value, expectedType);
    }
    if (!valid) {
      const typeName = Array.isArray(expectedType) ? expectedType.join(' or ') : expectedType;
      const error = this.errorHandler.createError(errorCode, customMessage || `期待される型: ${typeName}, 実際の型: ${typeof value}`, {
        ...context,
        expectedType,
        actualType: typeof value,
        value
      });
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Internal helper to check a value against a type
   * @param {*} value - Value to check
   * @param {string} type - Type to check against
   * @return {boolean} - True if value matches the type
   * @private
   */
  _checkType(value, type) {
    switch (type.toLowerCase()) {
      case 'string':
        return typeof value === 'string';
      case 'number':
        return typeof value === 'number' && !isNaN(value);
      case 'boolean':
        return typeof value === 'boolean';
      case 'object':
        return typeof value === 'object' && value !== null && !Array.isArray(value);
      case 'array':
        return Array.isArray(value);
      case 'function':
        return typeof value === 'function';
      case 'undefined':
        return typeof value === 'undefined';
      case 'null':
        return value === null;
      case 'integer':
        return Number.isInteger(value);
      case 'positive':
        return typeof value === 'number' && !isNaN(value) && value > 0;
      case 'nonnegative':
        return typeof value === 'number' && !isNaN(value) && value >= 0;
      default:
        return false;
    }
  }

  /**
   * Validate that a value is within a range
   * @param {number} value - Value to check
   * @param {number} min - Minimum allowed value (inclusive)
   * @param {number} max - Maximum allowed value (inclusive)
   * @param {string} errorCode - Error code if validation fails
   * @param {string} [customMessage] - Optional custom error message
   * @param {Object} [context] - Additional context for the error
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateRange(value, min, max, errorCode, customMessage, context = {}) {
    if (typeof value !== 'number' || value < min || value > max) {
      const error = this.errorHandler.createError(errorCode, customMessage || `値は${min}から${max}の範囲内である必要があります`, {
        ...context,
        min,
        max,
        value
      });
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Validate that a value is one of the allowed values
   * @param {*} value - Value to check
   * @param {Array} allowedValues - Array of allowed values
   * @param {string} errorCode - Error code if validation fails
   * @param {string} [customMessage] - Optional custom error message
   * @param {Object} [context] - Additional context for the error
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateEnum(value, allowedValues, errorCode, customMessage, context = {}) {
    if (!allowedValues.includes(value)) {
      const error = this.errorHandler.createError(errorCode, customMessage || `値は許可されたもの(${allowedValues.join(', ')})のいずれかである必要があります`, {
        ...context,
        allowedValues,
        value
      });
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Validate player action based on game rules
   * @param {Object} action - Action to validate
   * @param {Object} player - Player performing the action
   * @param {Object} gameState - Current game state
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validatePlayerAction(action, player, gameState) {
    // Validate player exists
    if (!this.validateExists(player, ErrorCatalog.PLAYER.PLAYER_NOT_FOUND.code, null, {
      actionType: action.type,
      playerId: action.actor
    })) {
      return false;
    }

    // Validate player is alive
    if (!player.isAlive) {
      const error = this.errorHandler.createError(ErrorCatalog.PLAYER.DEAD_PLAYER_ACTION.code, null, {
        playerId: player.id,
        actionType: action.type
      });
      return this.errorHandler.handleError(error);
    }

    // Validate action is allowed in current phase
    const currentPhase = gameState.currentPhase;
    const allowedInPhase = this._isActionAllowedInPhase(action.type, currentPhase);
    if (!allowedInPhase) {
      const error = this.errorHandler.createError(ErrorCatalog.ACTION.ACTION_PHASE_MISMATCH.code, null, {
        actionType: action.type,
        currentPhase: currentPhase,
        playerId: player.id
      });
      return this.errorHandler.handleError(error);
    }

    // Validate target if needed
    if (action.target !== undefined) {
      const targetPlayer = gameState.getPlayer?.(action.target);
      if (!this.validateExists(targetPlayer, ErrorCatalog.ACTION.INVALID_ACTION_TARGET.code, null, {
        actionType: action.type,
        targetId: action.target
      })) {
        return false;
      }

      // Check for self-targeting if not allowed
      if (action.actor === action.target && this._isSelfTargetForbidden(action.type)) {
        const error = this.errorHandler.createError(ErrorCatalog.PLAYER.SELF_TARGET_FORBIDDEN.code, null, {
          actionType: action.type,
          playerId: player.id
        });
        return this.errorHandler.handleError(error);
      }
    }
    return true;
  }

  /**
   * Validate role action based on role capabilities and game rules
   * @param {Object} action - Action to validate
   * @param {Object} role - Role performing the action
   * @param {Object} gameState - Current game state
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateRoleAction(action, role, gameState) {
    // Validate role exists
    if (!this.validateExists(role, ErrorCatalog.ROLE.ROLE_NOT_FOUND.code, null, {
      actionType: action.type,
      roleName: role?.name
    })) {
      return false;
    }

    // Check if role can use this action type
    if (!role.canUseAbility || !role.canUseAbility(action.type, gameState)) {
      const error = this.errorHandler.createError(ErrorCatalog.ROLE.RESTRICTED_ABILITY.code, null, {
        roleName: role.name,
        actionType: action.type,
        playerId: action.actor,
        phase: gameState.currentPhase,
        turn: gameState.currentTurn
      });
      return this.errorHandler.handleError(error);
    }

    // Check for consecutive action restriction (e.g. consecutive guard)
    if (this._hasConsecutiveActionRestriction(action.type, role.name) && this._isConsecutiveAction(action, gameState)) {
      const error = this.errorHandler.createError(ErrorCatalog.ACTION.CONSECUTIVE_ACTION_FORBIDDEN.code, null, {
        roleName: role.name,
        actionType: action.type,
        targetId: action.target,
        playerId: action.actor
      });
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Validate game state for a specific action
   * @param {Object} action - Action to validate
   * @param {Object} gameState - Current game state
   * @return {boolean} - True if validation passes, false otherwise
   * @throws {Error} - If validation fails and throwOnError is true in handler
   */
  validateGameState(action, gameState) {
    // Validate game has started
    if (!gameState.hasStarted) {
      const error = this.errorHandler.createError(ErrorCatalog.PHASE.GAME_NOT_STARTED.code, null, {
        actionType: action.type
      });
      return this.errorHandler.handleError(error);
    }

    // Validate game has not ended
    if (gameState.hasEnded) {
      const error = this.errorHandler.createError(ErrorCatalog.PHASE.GAME_ALREADY_ENDED.code, null, {
        actionType: action.type
      });
      return this.errorHandler.handleError(error);
    }
    return true;
  }

  /**
   * Register a custom validator function
   * @param {string} name - Name of the validator
   * @param {Function} validatorFn - Validator function
   * @return {Validator} - This instance for chaining
   */
  registerValidator(name, validatorFn) {
    if (typeof validatorFn !== 'function') {
      throw new Error('Validator must be a function');
    }
    this.customValidators.set(name, validatorFn);
    return this;
  }

  /**
   * Execute a custom validator
   * @param {string} name - Name of the validator to execute
   * @param {*} args - Arguments to pass to the validator
   * @return {boolean} - Result of the validation
   * @throws {Error} - If validator doesn't exist
   */
  executeCustomValidator(name, ...args) {
    const validator = this.customValidators.get(name);
    if (!validator) {
      throw new Error(`Validator '${name}' not found`);
    }
    return validator(...args);
  }

  /**
   * Check if an action is allowed in the current phase
   * @param {string} actionType - Type of action
   * @param {string} phase - Current game phase
   * @return {boolean} - True if action is allowed in this phase
   * @private
   */
  _isActionAllowedInPhase(actionType, phase) {
    // This is a simplified implementation
    // In a real implementation, this would check against a phase-action mapping

    // Example mapping:
    const phaseActionMap = {
      'night': ['fortune', 'guard', 'attack'],
      'day': ['talk', 'accuse'],
      'vote': ['vote'],
      'runoffVote': ['vote']
    };
    if (!phaseActionMap[phase]) {
      return false;
    }
    return phaseActionMap[phase].includes(actionType);
  }

  /**
   * Check if self-targeting is forbidden for an action type
   * @param {string} actionType - Type of action
   * @return {boolean} - True if self-targeting is forbidden
   * @private
   */
  _isSelfTargetForbidden(actionType) {
    // Most actions forbid self-targeting
    const selfTargetAllowed = ['talk', 'protect'];
    return !selfTargetAllowed.includes(actionType);
  }

  /**
   * Check if an action type has consecutive use restrictions
   * @param {string} actionType - Type of action
   * @param {string} roleName - Name of the role
   * @return {boolean} - True if consecutive use is restricted
   * @private
   */
  _hasConsecutiveActionRestriction(actionType, roleName) {
    // For now, only guard action by knight has this restriction
    return actionType === 'guard' && roleName === 'knight';
  }

  /**
   * Check if an action is a consecutive action (same target as last time)
   * @param {Object} action - Current action
   * @param {Object} gameState - Current game state
   * @return {boolean} - True if this is a consecutive action
   * @private
   */
  _isConsecutiveAction(action, gameState) {
    // This is a simplified implementation
    // In a real implementation, this would check the action history

    const previousActions = gameState.getActionHistory?.(action.actor, action.type) || [];
    if (previousActions.length === 0) {
      return false;
    }
    const lastAction = previousActions[previousActions.length - 1];
    return lastAction.target === action.target;
  }
}
module.exports = Validator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,