24459649a24b6d7c6088b9474d0f492c
/**
 * EventSystem - Core event management module for the werewolf game GM support library
 *
 * This module provides the foundation for the event-driven architecture,
 * enabling communication between different modules through events.
 */

class EventSystem {
  /**
   * Creates a new EventSystem instance
   * @param {Object} options - Configuration options
   * @param {boolean} [options.enableNamespaces=true] - Enable hierarchical event namespaces
   * @param {boolean} [options.debugMode=false] - Enable debug mode with event history
   * @param {boolean} [options.enableWildcards=false] - Enable wildcard event matching
   * @param {number} [options.historyLimit=100] - Maximum number of events to keep in history
   */
  constructor(options = {}) {
    // Default options
    this.options = {
      enableNamespaces: true,
      debugMode: false,
      enableWildcards: false,
      historyLimit: 100,
      ...options
    };

    // Map to store event listeners: { eventName => [{ callback, once, priority }] }
    this.listeners = new Map();

    // Event history for debugging (only active in debug mode)
    this.eventHistory = [];

    // Flag to track if we're currently emitting an event (to handle nested emissions)
    this._emitting = false;

    // Queue for listeners to be added/removed during emission
    this._pendingAdditions = [];
    this._pendingRemovals = [];
  }

  /**
   * Register an event listener
   * @param {string} eventName - Name of the event to listen for
   * @param {Function} callback - Function to call when the event is emitted
   * @param {number} [priority=0] - Priority of the listener (higher executes first)
   * @return {EventSystem} - Returns this instance for chaining
   * @throws {Error} If eventName is not a string or callback is not a function
   */
  on(eventName, callback, priority = 0) {
    // Validate arguments
    if (typeof eventName !== 'string' || eventName.trim() === '') {
      throw new Error('Event name must be a non-empty string');
    }
    if (typeof callback !== 'function') {
      throw new Error('Callback must be a function');
    }

    // If we're currently emitting, queue the addition
    if (this._emitting) {
      this._pendingAdditions.push({
        eventName,
        callback,
        priority,
        once: false
      });
      return this;
    }

    // Get or create the listeners array for this event
    if (!this.listeners.has(eventName)) {
      this.listeners.set(eventName, []);
    }
    const listeners = this.listeners.get(eventName);

    // Check for duplicate listener
    const existingIndex = listeners.findIndex(listener => listener.callback === callback);
    if (existingIndex !== -1) {
      // Update the existing listener's priority
      listeners[existingIndex].priority = priority;
    } else {
      // Add the new listener
      listeners.push({
        callback,
        once: false,
        priority
      });

      // Sort listeners by priority (highest first)
      listeners.sort((a, b) => b.priority - a.priority);
    }
    return this;
  }

  /**
   * Register a one-time event listener that will be removed after execution
   * @param {string} eventName - Name of the event to listen for
   * @param {Function} callback - Function to call when the event is emitted
   * @param {number} [priority=0] - Priority of the listener (higher executes first)
   * @return {EventSystem} - Returns this instance for chaining
   * @throws {Error} If eventName is not a string or callback is not a function
   */
  once(eventName, callback, priority = 0) {
    // Validate arguments
    if (typeof eventName !== 'string' || eventName.trim() === '') {
      throw new Error('Event name must be a non-empty string');
    }
    if (typeof callback !== 'function') {
      throw new Error('Callback must be a function');
    }

    // If we're currently emitting, queue the addition
    if (this._emitting) {
      this._pendingAdditions.push({
        eventName,
        callback,
        priority,
        once: true
      });
      return this;
    }

    // Get or create the listeners array for this event
    if (!this.listeners.has(eventName)) {
      this.listeners.set(eventName, []);
    }
    const listeners = this.listeners.get(eventName);

    // Check for duplicate listener
    const existingIndex = listeners.findIndex(listener => listener.callback === callback);
    if (existingIndex !== -1) {
      // Update the existing listener's priority and once flag
      listeners[existingIndex].priority = priority;
      listeners[existingIndex].once = true;
    } else {
      // Add the new listener
      listeners.push({
        callback,
        once: true,
        priority
      });

      // Sort listeners by priority (highest first)
      listeners.sort((a, b) => b.priority - a.priority);
    }
    return this;
  }

  /**
   * Remove an event listener
   * @param {string} eventName - Name of the event to remove listener from
   * @param {Function} [callback] - Specific callback to remove (if omitted, all listeners for the event are removed)
   * @return {EventSystem} - Returns this instance for chaining
   */
  off(eventName, callback = null) {
    // If we're currently emitting, queue the removal
    if (this._emitting) {
      this._pendingRemovals.push({
        eventName,
        callback
      });
      return this;
    }

    // If eventName doesn't exist, nothing to do
    if (!this.listeners.has(eventName)) {
      return this;
    }

    // If callback is null, remove all listeners for this event
    if (callback === null) {
      this.listeners.delete(eventName);
      return this;
    }

    // Otherwise, only remove the specific callback
    const listeners = this.listeners.get(eventName);
    const filteredListeners = listeners.filter(listener => listener.callback !== callback);
    if (filteredListeners.length === 0) {
      // If no listeners remain, remove the event entirely
      this.listeners.delete(eventName);
    } else {
      // Otherwise, update the listeners array
      this.listeners.set(eventName, filteredListeners);
    }
    return this;
  }

  /**
   * Emit an event to all registered listeners
   * @param {string} eventName - Name of the event to emit
   * @param {*} [data] - Data to pass to the listeners
   * @return {boolean} - True if the event had listeners, false otherwise
   */
  emit(eventName, data) {
    // Mark that we're emitting an event
    const wasEmitting = this._emitting;
    this._emitting = true;

    // Track whether any listeners were called
    let listenersCalled = false;
    try {
      // Add to history if debug mode is enabled
      if (this.options.debugMode) {
        this._addToHistory(eventName, data);
      }

      // Get all event names to emit based on the options
      const eventNamesToEmit = this._getEventNamesForEmission(eventName);

      // リスナーを呼び出す前にトラッキング用のセットを作成
      // これにより、同じイベント発火内での重複実行を防止
      const calledListeners = new Set();
      const listenersToRemove = [];

      // Emit to each matched event name
      for (const name of eventNamesToEmit) {
        if (this.listeners.has(name)) {
          // リスナーのリストをコピーして処理（途中で削除される可能性があるため）
          const listeners = [...this.listeners.get(name)];

          // Call each listener
          for (const listener of listeners) {
            const {
              callback,
              once
            } = listener;

            // このイベント発火内で既に呼び出されたリスナーはスキップ
            if (calledListeners.has(callback)) {
              continue;
            }
            try {
              // 呼び出し前にセットに追加
              calledListeners.add(callback);

              // Call the listener with the event data
              callback(data);
              listenersCalled = true;

              // If it's a once listener, mark it for removal
              if (once) {
                listenersToRemove.push({
                  name,
                  callback
                });
              }
            } catch (error) {
              // Log the error but continue with other listeners
              console.error(`Error in event listener for '${name}':`, error);
            }
          }
        }
      }

      // 全てのリスナー実行後に、一度だけ削除処理を行う
      for (const {
        name,
        callback
      } of listenersToRemove) {
        // リスナーを削除
        if (this.listeners.has(name)) {
          const listeners = this.listeners.get(name);
          const updatedListeners = listeners.filter(l => l.callback !== callback);
          if (updatedListeners.length === 0) {
            this.listeners.delete(name);
          } else {
            this.listeners.set(name, updatedListeners);
          }
        }
      }

      // Process pending additions and removals (if we're not in a nested emit)
      if (!wasEmitting) {
        this._processPendingOperations();
      }
      return listenersCalled;
    } finally {
      // Only reset the emitting flag if we're the outermost emit call
      if (!wasEmitting) {
        this._emitting = false;
      }
    }
  }

  /**
   * Check if an event has any listeners
   * @param {string} eventName - Name of the event to check
   * @return {boolean} - True if the event has listeners, false otherwise
   */
  hasListeners(eventName) {
    // Direct match
    if (this.listeners.has(eventName) && this.listeners.get(eventName).length > 0) {
      return true;
    }

    // If wildcards are enabled, check for wildcard matches
    if (this.options.enableWildcards) {
      // 最適化: 最大チェック数を制限
      let checked = 0;
      const maxToCheck = 100;
      for (const [name, listeners] of this.listeners.entries()) {
        if (++checked > maxToCheck) break;
        if (listeners.length > 0 && name.includes('*') && this._matchesWildcard(name, eventName)) {
          return true;
        }
      }
    }
    return false;
  }

  /**
   * Get the number of listeners for an event
   * @param {string} eventName - Name of the event to check
   * @return {number} - Number of listeners for the event
   */
  listenerCount(eventName) {
    let count = 0;

    // Direct match
    if (this.listeners.has(eventName)) {
      count += this.listeners.get(eventName).length;
    }

    // If wildcards are enabled, check for wildcard matches
    if (this.options.enableWildcards) {
      // 最適化: 最大チェック数を制限
      let checked = 0;
      const maxToCheck = 100;
      for (const [name, listeners] of this.listeners.entries()) {
        if (++checked > maxToCheck) break;
        if (name !== eventName && name.includes('*') && this._matchesWildcard(name, eventName)) {
          count += listeners.length;
        }
      }
    }
    return count;
  }

  /**
   * Get all registered event names
   * @return {string[]} - Array of registered event names
   */
  eventNames() {
    return Array.from(this.listeners.keys());
  }

  /**
   * Get the recent event history (only available in debug mode)
   * @param {number} [limit=10] - Maximum number of events to return
   * @return {Array} - Array of recent events or empty array if debug mode is disabled
   */
  getEventHistory(limit = 10) {
    if (!this.options.debugMode) {
      return [];
    }
    const actualLimit = Math.min(limit, this.eventHistory.length);
    return this.eventHistory.slice(-actualLimit);
  }

  /**
   * Clear all event listeners
   * @return {EventSystem} - Returns this instance for chaining
   */
  removeAllListeners() {
    this.listeners.clear();
    return this;
  }

  /**
   * Process pending listener additions and removals
   * @private
   */
  _processPendingOperations() {
    // 最適化: 大量のペンディング操作がある場合のガード
    const maxOperations = 1000;

    // Process removals first to avoid issues with additions that would be immediately removed
    const removalsToProcess = Math.min(this._pendingRemovals.length, maxOperations);
    for (let i = 0; i < removalsToProcess; i++) {
      const {
        eventName,
        callback
      } = this._pendingRemovals[i];
      this.off(eventName, callback);
    }

    // 処理した分だけ配列から削除
    if (removalsToProcess === this._pendingRemovals.length) {
      this._pendingRemovals = [];
    } else {
      this._pendingRemovals = this._pendingRemovals.slice(removalsToProcess);
    }

    // Then process additions
    const additionsToProcess = Math.min(this._pendingAdditions.length, maxOperations);
    for (let i = 0; i < additionsToProcess; i++) {
      const {
        eventName,
        callback,
        priority,
        once
      } = this._pendingAdditions[i];
      if (once) {
        this.once(eventName, callback, priority);
      } else {
        this.on(eventName, callback, priority);
      }
    }

    // 処理した分だけ配列から削除
    if (additionsToProcess === this._pendingAdditions.length) {
      this._pendingAdditions = [];
    } else {
      this._pendingAdditions = this._pendingAdditions.slice(additionsToProcess);
    }
  }

  /**
   * Add an event to the history
   * @param {string} eventName - Name of the emitted event
   * @param {*} data - Data passed with the event
   * @private
   */
  _addToHistory(eventName, data) {
    // Add to history with timestamp
    this.eventHistory.push({
      eventName,
      data,
      timestamp: new Date()
    });

    // Trim history if it exceeds the limit
    if (this.eventHistory.length > this.options.historyLimit) {
      this.eventHistory.shift();
    }
  }

  /**
   * Get all event names to emit based on the original event and options
   * @param {string} eventName - The original event name
   * @return {string[]} - Array of event names to emit
   * @private
   */
  _getEventNamesForEmission(eventName) {
    const eventNames = [eventName];

    // Add namespace parent events if enabled
    if (this.options.enableNamespaces && eventName.includes('.')) {
      const parts = eventName.split('.');
      // 最適化: 一度に全部を計算せず徐々に親名前空間を構築
      let parentName = '';
      for (let i = 0; i < parts.length - 1; i++) {
        parentName = parentName ? `${parentName}.${parts[i]}` : parts[i];
        eventNames.push(parentName);
      }
    }

    // 最適化: ワイルドカードが有効な場合は、必要なリスナーのみマッチングする
    if (this.options.enableWildcards) {
      // 最適化: リスナーの数が多すぎる場合は制限する
      const maxListenersToCheck = 100;
      let checkedCount = 0;
      for (const name of this.listeners.keys()) {
        // ワイルドカード文字を含む場合のみチェック
        if (!name.includes('*')) continue;

        // 処理済みのイベント名はスキップ
        if (eventNames.includes(name)) continue;

        // 最大制限に達したら停止
        if (++checkedCount > maxListenersToCheck) {
          break;
        }

        // ワイルドカードパターンの簡易チェック
        if (this._matchesWildcard(name, eventName)) {
          eventNames.push(name);
        }
      }
    }
    return eventNames;
  }

  /**
   * Check if a wildcard pattern matches an event name
   * @param {string} pattern - The wildcard pattern to check
   * @param {string} eventName - The event name to match against
   * @return {boolean} - True if the pattern matches the event name
   * @private
   */
  _matchesWildcard(pattern, eventName) {
    // パターンや名前が異常に長い場合はマッチングを諦める（安全対策）
    if (pattern.length > 1000 || eventName.length > 1000) {
      return false;
    }

    // 単純なチェック
    if (pattern === eventName) {
      return true;
    }

    // 単純なワイルドカードチェック
    if (pattern === '*') {
      return !eventName.includes('.');
    }
    if (pattern === '**') {
      return true;
    }

    // 複数階層のワイルドカード (**) の処理
    if (pattern.includes('**')) {
      const parts = pattern.split('**');

      // 最適化: 最大2つのパートのみをサポート
      if (parts.length > 2) {
        return false;
      }

      // パターンが 'game.**' のような形式の場合
      if (parts.length === 2 && parts[1] === '') {
        return eventName.startsWith(parts[0]);
      }

      // パターンが '**.end' のような形式の場合
      if (parts.length === 2 && parts[0] === '') {
        return eventName.endsWith(parts[1]);
      }

      // パターンが 'start.**.end' のような形式の場合
      if (parts.length === 2) {
        return eventName.startsWith(parts[0]) && eventName.endsWith(parts[1]);
      }
    }

    // 単一階層のワイルドカード (*) の処理
    if (pattern.includes('*') && !pattern.includes('**')) {
      // 正規表現を使わない最適化された方法
      const patternParts = pattern.split('.');
      const eventParts = eventName.split('.');
      if (patternParts.length !== eventParts.length) {
        return false;
      }
      for (let i = 0; i < patternParts.length; i++) {
        if (patternParts[i] === '*') {
          continue; // ワイルドカードは何にもマッチする
        }
        if (patternParts[i] !== eventParts[i]) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
}
module.exports = EventSystem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFdmVudFN5c3RlbSIsImNvbnN0cnVjdG9yIiwib3B0aW9ucyIsImVuYWJsZU5hbWVzcGFjZXMiLCJkZWJ1Z01vZGUiLCJlbmFibGVXaWxkY2FyZHMiLCJoaXN0b3J5TGltaXQiLCJsaXN0ZW5lcnMiLCJNYXAiLCJldmVudEhpc3RvcnkiLCJfZW1pdHRpbmciLCJfcGVuZGluZ0FkZGl0aW9ucyIsIl9wZW5kaW5nUmVtb3ZhbHMiLCJvbiIsImV2ZW50TmFtZSIsImNhbGxiYWNrIiwicHJpb3JpdHkiLCJ0cmltIiwiRXJyb3IiLCJwdXNoIiwib25jZSIsImhhcyIsInNldCIsImdldCIsImV4aXN0aW5nSW5kZXgiLCJmaW5kSW5kZXgiLCJsaXN0ZW5lciIsInNvcnQiLCJhIiwiYiIsIm9mZiIsImRlbGV0ZSIsImZpbHRlcmVkTGlzdGVuZXJzIiwiZmlsdGVyIiwibGVuZ3RoIiwiZW1pdCIsImRhdGEiLCJ3YXNFbWl0dGluZyIsImxpc3RlbmVyc0NhbGxlZCIsIl9hZGRUb0hpc3RvcnkiLCJldmVudE5hbWVzVG9FbWl0IiwiX2dldEV2ZW50TmFtZXNGb3JFbWlzc2lvbiIsImNhbGxlZExpc3RlbmVycyIsIlNldCIsImxpc3RlbmVyc1RvUmVtb3ZlIiwibmFtZSIsImFkZCIsImVycm9yIiwiY29uc29sZSIsInVwZGF0ZWRMaXN0ZW5lcnMiLCJsIiwiX3Byb2Nlc3NQZW5kaW5nT3BlcmF0aW9ucyIsImhhc0xpc3RlbmVycyIsImNoZWNrZWQiLCJtYXhUb0NoZWNrIiwiZW50cmllcyIsImluY2x1ZGVzIiwiX21hdGNoZXNXaWxkY2FyZCIsImxpc3RlbmVyQ291bnQiLCJjb3VudCIsImV2ZW50TmFtZXMiLCJBcnJheSIsImZyb20iLCJrZXlzIiwiZ2V0RXZlbnRIaXN0b3J5IiwibGltaXQiLCJhY3R1YWxMaW1pdCIsIk1hdGgiLCJtaW4iLCJzbGljZSIsInJlbW92ZUFsbExpc3RlbmVycyIsImNsZWFyIiwibWF4T3BlcmF0aW9ucyIsInJlbW92YWxzVG9Qcm9jZXNzIiwiaSIsImFkZGl0aW9uc1RvUHJvY2VzcyIsInRpbWVzdGFtcCIsIkRhdGUiLCJzaGlmdCIsInBhcnRzIiwic3BsaXQiLCJwYXJlbnROYW1lIiwibWF4TGlzdGVuZXJzVG9DaGVjayIsImNoZWNrZWRDb3VudCIsInBhdHRlcm4iLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJwYXR0ZXJuUGFydHMiLCJldmVudFBhcnRzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIkV2ZW50U3lzdGVtLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRXZlbnRTeXN0ZW0gLSBDb3JlIGV2ZW50IG1hbmFnZW1lbnQgbW9kdWxlIGZvciB0aGUgd2VyZXdvbGYgZ2FtZSBHTSBzdXBwb3J0IGxpYnJhcnlcbiAqXG4gKiBUaGlzIG1vZHVsZSBwcm92aWRlcyB0aGUgZm91bmRhdGlvbiBmb3IgdGhlIGV2ZW50LWRyaXZlbiBhcmNoaXRlY3R1cmUsXG4gKiBlbmFibGluZyBjb21tdW5pY2F0aW9uIGJldHdlZW4gZGlmZmVyZW50IG1vZHVsZXMgdGhyb3VnaCBldmVudHMuXG4gKi9cblxuY2xhc3MgRXZlbnRTeXN0ZW0ge1xuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBFdmVudFN5c3RlbSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIENvbmZpZ3VyYXRpb24gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmVuYWJsZU5hbWVzcGFjZXM9dHJ1ZV0gLSBFbmFibGUgaGllcmFyY2hpY2FsIGV2ZW50IG5hbWVzcGFjZXNcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kZWJ1Z01vZGU9ZmFsc2VdIC0gRW5hYmxlIGRlYnVnIG1vZGUgd2l0aCBldmVudCBoaXN0b3J5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZW5hYmxlV2lsZGNhcmRzPWZhbHNlXSAtIEVuYWJsZSB3aWxkY2FyZCBldmVudCBtYXRjaGluZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaGlzdG9yeUxpbWl0PTEwMF0gLSBNYXhpbXVtIG51bWJlciBvZiBldmVudHMgdG8ga2VlcCBpbiBoaXN0b3J5XG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pIHtcbiAgICAvLyBEZWZhdWx0IG9wdGlvbnNcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBlbmFibGVOYW1lc3BhY2VzOiB0cnVlLFxuICAgICAgZGVidWdNb2RlOiBmYWxzZSxcbiAgICAgIGVuYWJsZVdpbGRjYXJkczogZmFsc2UsIFxuICAgICAgaGlzdG9yeUxpbWl0OiAxMDAsXG4gICAgICAuLi5vcHRpb25zXG4gICAgfTtcblxuICAgIC8vIE1hcCB0byBzdG9yZSBldmVudCBsaXN0ZW5lcnM6IHsgZXZlbnROYW1lID0+IFt7IGNhbGxiYWNrLCBvbmNlLCBwcmlvcml0eSB9XSB9XG4gICAgdGhpcy5saXN0ZW5lcnMgPSBuZXcgTWFwKCk7XG5cbiAgICAvLyBFdmVudCBoaXN0b3J5IGZvciBkZWJ1Z2dpbmcgKG9ubHkgYWN0aXZlIGluIGRlYnVnIG1vZGUpXG4gICAgdGhpcy5ldmVudEhpc3RvcnkgPSBbXTtcblxuICAgIC8vIEZsYWcgdG8gdHJhY2sgaWYgd2UncmUgY3VycmVudGx5IGVtaXR0aW5nIGFuIGV2ZW50ICh0byBoYW5kbGUgbmVzdGVkIGVtaXNzaW9ucylcbiAgICB0aGlzLl9lbWl0dGluZyA9IGZhbHNlO1xuXG4gICAgLy8gUXVldWUgZm9yIGxpc3RlbmVycyB0byBiZSBhZGRlZC9yZW1vdmVkIGR1cmluZyBlbWlzc2lvblxuICAgIHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMgPSBbXTtcbiAgICB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMgPSBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhbiBldmVudCBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gTmFtZSBvZiB0aGUgZXZlbnQgdG8gbGlzdGVuIGZvclxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayAtIEZ1bmN0aW9uIHRvIGNhbGwgd2hlbiB0aGUgZXZlbnQgaXMgZW1pdHRlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW3ByaW9yaXR5PTBdIC0gUHJpb3JpdHkgb2YgdGhlIGxpc3RlbmVyIChoaWdoZXIgZXhlY3V0ZXMgZmlyc3QpXG4gICAqIEByZXR1cm4ge0V2ZW50U3lzdGVtfSAtIFJldHVybnMgdGhpcyBpbnN0YW5jZSBmb3IgY2hhaW5pbmdcbiAgICogQHRocm93cyB7RXJyb3J9IElmIGV2ZW50TmFtZSBpcyBub3QgYSBzdHJpbmcgb3IgY2FsbGJhY2sgaXMgbm90IGEgZnVuY3Rpb25cbiAgICovXG4gIG9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHByaW9yaXR5ID0gMCkge1xuICAgIC8vIFZhbGlkYXRlIGFyZ3VtZW50c1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lICE9PSAnc3RyaW5nJyB8fCBldmVudE5hbWUudHJpbSgpID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgZW1pdHRpbmcsIHF1ZXVlIHRoZSBhZGRpdGlvblxuICAgIGlmICh0aGlzLl9lbWl0dGluZykge1xuICAgICAgdGhpcy5fcGVuZGluZ0FkZGl0aW9ucy5wdXNoKHsgZXZlbnROYW1lLCBjYWxsYmFjaywgcHJpb3JpdHksIG9uY2U6IGZhbHNlIH0pO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gR2V0IG9yIGNyZWF0ZSB0aGUgbGlzdGVuZXJzIGFycmF5IGZvciB0aGlzIGV2ZW50XG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycy5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgdGhpcy5saXN0ZW5lcnMuc2V0KGV2ZW50TmFtZSwgW10pO1xuICAgIH1cblxuICAgIGNvbnN0IGxpc3RlbmVycyA9IHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpO1xuXG4gICAgLy8gQ2hlY2sgZm9yIGR1cGxpY2F0ZSBsaXN0ZW5lclxuICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSBsaXN0ZW5lcnMuZmluZEluZGV4KGxpc3RlbmVyID0+IGxpc3RlbmVyLmNhbGxiYWNrID09PSBjYWxsYmFjayk7XG4gICAgaWYgKGV4aXN0aW5nSW5kZXggIT09IC0xKSB7XG4gICAgICAvLyBVcGRhdGUgdGhlIGV4aXN0aW5nIGxpc3RlbmVyJ3MgcHJpb3JpdHlcbiAgICAgIGxpc3RlbmVyc1tleGlzdGluZ0luZGV4XS5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBZGQgdGhlIG5ldyBsaXN0ZW5lclxuICAgICAgbGlzdGVuZXJzLnB1c2goeyBjYWxsYmFjaywgb25jZTogZmFsc2UsIHByaW9yaXR5IH0pO1xuXG4gICAgICAvLyBTb3J0IGxpc3RlbmVycyBieSBwcmlvcml0eSAoaGlnaGVzdCBmaXJzdClcbiAgICAgIGxpc3RlbmVycy5zb3J0KChhLCBiKSA9PiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVnaXN0ZXIgYSBvbmUtdGltZSBldmVudCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgcmVtb3ZlZCBhZnRlciBleGVjdXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGxpc3RlbiBmb3JcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBGdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGV2ZW50IGlzIGVtaXR0ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmlvcml0eT0wXSAtIFByaW9yaXR5IG9mIHRoZSBsaXN0ZW5lciAoaGlnaGVyIGV4ZWN1dGVzIGZpcnN0KVxuICAgKiBAcmV0dXJuIHtFdmVudFN5c3RlbX0gLSBSZXR1cm5zIHRoaXMgaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqIEB0aHJvd3Mge0Vycm9yfSBJZiBldmVudE5hbWUgaXMgbm90IGEgc3RyaW5nIG9yIGNhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uXG4gICAqL1xuICBvbmNlKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHByaW9yaXR5ID0gMCkge1xuICAgIC8vIFZhbGlkYXRlIGFyZ3VtZW50c1xuICAgIGlmICh0eXBlb2YgZXZlbnROYW1lICE9PSAnc3RyaW5nJyB8fCBldmVudE5hbWUudHJpbSgpID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgZW1pdHRpbmcsIHF1ZXVlIHRoZSBhZGRpdGlvblxuICAgIGlmICh0aGlzLl9lbWl0dGluZykge1xuICAgICAgdGhpcy5fcGVuZGluZ0FkZGl0aW9ucy5wdXNoKHsgZXZlbnROYW1lLCBjYWxsYmFjaywgcHJpb3JpdHksIG9uY2U6IHRydWUgfSk7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBHZXQgb3IgY3JlYXRlIHRoZSBsaXN0ZW5lcnMgYXJyYXkgZm9yIHRoaXMgZXZlbnRcbiAgICBpZiAoIXRoaXMubGlzdGVuZXJzLmhhcyhldmVudE5hbWUpKSB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5zZXQoZXZlbnROYW1lLCBbXSk7XG4gICAgfVxuXG4gICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KGV2ZW50TmFtZSk7XG5cbiAgICAvLyBDaGVjayBmb3IgZHVwbGljYXRlIGxpc3RlbmVyXG4gICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IGxpc3RlbmVycy5maW5kSW5kZXgobGlzdGVuZXIgPT4gbGlzdGVuZXIuY2FsbGJhY2sgPT09IGNhbGxiYWNrKTtcbiAgICBpZiAoZXhpc3RpbmdJbmRleCAhPT0gLTEpIHtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgZXhpc3RpbmcgbGlzdGVuZXIncyBwcmlvcml0eSBhbmQgb25jZSBmbGFnXG4gICAgICBsaXN0ZW5lcnNbZXhpc3RpbmdJbmRleF0ucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgIGxpc3RlbmVyc1tleGlzdGluZ0luZGV4XS5vbmNlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWRkIHRoZSBuZXcgbGlzdGVuZXJcbiAgICAgIGxpc3RlbmVycy5wdXNoKHsgY2FsbGJhY2ssIG9uY2U6IHRydWUsIHByaW9yaXR5IH0pO1xuXG4gICAgICAvLyBTb3J0IGxpc3RlbmVycyBieSBwcmlvcml0eSAoaGlnaGVzdCBmaXJzdClcbiAgICAgIGxpc3RlbmVycy5zb3J0KChhLCBiKSA9PiBiLnByaW9yaXR5IC0gYS5wcmlvcml0eSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGV2ZW50IGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB0byByZW1vdmUgbGlzdGVuZXIgZnJvbVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gU3BlY2lmaWMgY2FsbGJhY2sgdG8gcmVtb3ZlIChpZiBvbWl0dGVkLCBhbGwgbGlzdGVuZXJzIGZvciB0aGUgZXZlbnQgYXJlIHJlbW92ZWQpXG4gICAqIEByZXR1cm4ge0V2ZW50U3lzdGVtfSAtIFJldHVybnMgdGhpcyBpbnN0YW5jZSBmb3IgY2hhaW5pbmdcbiAgICovXG4gIG9mZihldmVudE5hbWUsIGNhbGxiYWNrID0gbnVsbCkge1xuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBlbWl0dGluZywgcXVldWUgdGhlIHJlbW92YWxcbiAgICBpZiAodGhpcy5fZW1pdHRpbmcpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZW1vdmFscy5wdXNoKHsgZXZlbnROYW1lLCBjYWxsYmFjayB9KTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIElmIGV2ZW50TmFtZSBkb2Vzbid0IGV4aXN0LCBub3RoaW5nIHRvIGRvXG4gICAgaWYgKCF0aGlzLmxpc3RlbmVycy5oYXMoZXZlbnROYW1lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gSWYgY2FsbGJhY2sgaXMgbnVsbCwgcmVtb3ZlIGFsbCBsaXN0ZW5lcnMgZm9yIHRoaXMgZXZlbnRcbiAgICBpZiAoY2FsbGJhY2sgPT09IG51bGwpIHtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShldmVudE5hbWUpO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLy8gT3RoZXJ3aXNlLCBvbmx5IHJlbW92ZSB0aGUgc3BlY2lmaWMgY2FsbGJhY2tcbiAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLmxpc3RlbmVycy5nZXQoZXZlbnROYW1lKTtcbiAgICBjb25zdCBmaWx0ZXJlZExpc3RlbmVycyA9IGxpc3RlbmVycy5maWx0ZXIobGlzdGVuZXIgPT4gbGlzdGVuZXIuY2FsbGJhY2sgIT09IGNhbGxiYWNrKTtcblxuICAgIGlmIChmaWx0ZXJlZExpc3RlbmVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIC8vIElmIG5vIGxpc3RlbmVycyByZW1haW4sIHJlbW92ZSB0aGUgZXZlbnQgZW50aXJlbHlcbiAgICAgIHRoaXMubGlzdGVuZXJzLmRlbGV0ZShldmVudE5hbWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBPdGhlcndpc2UsIHVwZGF0ZSB0aGUgbGlzdGVuZXJzIGFycmF5XG4gICAgICB0aGlzLmxpc3RlbmVycy5zZXQoZXZlbnROYW1lLCBmaWx0ZXJlZExpc3RlbmVycyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogRW1pdCBhbiBldmVudCB0byBhbGwgcmVnaXN0ZXJlZCBsaXN0ZW5lcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGVtaXRcbiAgICogQHBhcmFtIHsqfSBbZGF0YV0gLSBEYXRhIHRvIHBhc3MgdG8gdGhlIGxpc3RlbmVyc1xuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIFRydWUgaWYgdGhlIGV2ZW50IGhhZCBsaXN0ZW5lcnMsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgZW1pdChldmVudE5hbWUsIGRhdGEpIHtcbiAgICAvLyBNYXJrIHRoYXQgd2UncmUgZW1pdHRpbmcgYW4gZXZlbnRcbiAgICBjb25zdCB3YXNFbWl0dGluZyA9IHRoaXMuX2VtaXR0aW5nO1xuICAgIHRoaXMuX2VtaXR0aW5nID0gdHJ1ZTtcblxuICAgIC8vIFRyYWNrIHdoZXRoZXIgYW55IGxpc3RlbmVycyB3ZXJlIGNhbGxlZFxuICAgIGxldCBsaXN0ZW5lcnNDYWxsZWQgPSBmYWxzZTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBBZGQgdG8gaGlzdG9yeSBpZiBkZWJ1ZyBtb2RlIGlzIGVuYWJsZWRcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGVidWdNb2RlKSB7XG4gICAgICAgIHRoaXMuX2FkZFRvSGlzdG9yeShldmVudE5hbWUsIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICAvLyBHZXQgYWxsIGV2ZW50IG5hbWVzIHRvIGVtaXQgYmFzZWQgb24gdGhlIG9wdGlvbnNcbiAgICAgIGNvbnN0IGV2ZW50TmFtZXNUb0VtaXQgPSB0aGlzLl9nZXRFdmVudE5hbWVzRm9yRW1pc3Npb24oZXZlbnROYW1lKTtcbiAgICAgIFxuICAgICAgLy8g44Oq44K544OK44O844KS5ZG844Gz5Ye644GZ5YmN44Gr44OI44Op44OD44Kt44Oz44Kw55So44Gu44K744OD44OI44KS5L2c5oiQXG4gICAgICAvLyDjgZPjgozjgavjgojjgorjgIHlkIzjgZjjgqTjg5njg7Pjg4jnmbrngavlhoXjgafjga7ph43opIflrp/ooYzjgpLpmLLmraJcbiAgICAgIGNvbnN0IGNhbGxlZExpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICAgIGNvbnN0IGxpc3RlbmVyc1RvUmVtb3ZlID0gW107XG5cbiAgICAgIC8vIEVtaXQgdG8gZWFjaCBtYXRjaGVkIGV2ZW50IG5hbWVcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiBldmVudE5hbWVzVG9FbWl0KSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3RlbmVycy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAvLyDjg6rjgrnjg4rjg7zjga7jg6rjgrnjg4jjgpLjgrPjg5Tjg7zjgZfjgablh6bnkIbvvIjpgJTkuK3jgafliYrpmaTjgZXjgozjgovlj6/og73mgKfjgYzjgYLjgovjgZ/jgoHvvIlcbiAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSBbLi4udGhpcy5saXN0ZW5lcnMuZ2V0KG5hbWUpXTtcblxuICAgICAgICAgIC8vIENhbGwgZWFjaCBsaXN0ZW5lclxuICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICBjb25zdCB7IGNhbGxiYWNrLCBvbmNlIH0gPSBsaXN0ZW5lcjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8g44GT44Gu44Kk44OZ44Oz44OI55m654Gr5YaF44Gn5pei44Gr5ZG844Gz5Ye644GV44KM44Gf44Oq44K544OK44O844Gv44K544Kt44OD44OXXG4gICAgICAgICAgICBpZiAoY2FsbGVkTGlzdGVuZXJzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIOWRvOOBs+WHuuOBl+WJjeOBq+OCu+ODg+ODiOOBq+i/veWKoFxuICAgICAgICAgICAgICBjYWxsZWRMaXN0ZW5lcnMuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIENhbGwgdGhlIGxpc3RlbmVyIHdpdGggdGhlIGV2ZW50IGRhdGFcbiAgICAgICAgICAgICAgY2FsbGJhY2soZGF0YSk7XG4gICAgICAgICAgICAgIGxpc3RlbmVyc0NhbGxlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgLy8gSWYgaXQncyBhIG9uY2UgbGlzdGVuZXIsIG1hcmsgaXQgZm9yIHJlbW92YWxcbiAgICAgICAgICAgICAgaWYgKG9uY2UpIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNUb1JlbW92ZS5wdXNoKHsgbmFtZSwgY2FsbGJhY2sgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIExvZyB0aGUgZXJyb3IgYnV0IGNvbnRpbnVlIHdpdGggb3RoZXIgbGlzdGVuZXJzXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycm9yIGluIGV2ZW50IGxpc3RlbmVyIGZvciAnJHtuYW1lfSc6YCwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyDlhajjgabjga7jg6rjgrnjg4rjg7zlrp/ooYzlvozjgavjgIHkuIDluqbjgaDjgZHliYrpmaTlh6bnkIbjgpLooYzjgYZcbiAgICAgIGZvciAoY29uc3QgeyBuYW1lLCBjYWxsYmFjayB9IG9mIGxpc3RlbmVyc1RvUmVtb3ZlKSB7XG4gICAgICAgIC8vIOODquOCueODiuODvOOCkuWJiumZpFxuICAgICAgICBpZiAodGhpcy5saXN0ZW5lcnMuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gdGhpcy5saXN0ZW5lcnMuZ2V0KG5hbWUpO1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGwgPT4gbC5jYWxsYmFjayAhPT0gY2FsbGJhY2spO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICh1cGRhdGVkTGlzdGVuZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMuZGVsZXRlKG5hbWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5zZXQobmFtZSwgdXBkYXRlZExpc3RlbmVycyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFByb2Nlc3MgcGVuZGluZyBhZGRpdGlvbnMgYW5kIHJlbW92YWxzIChpZiB3ZSdyZSBub3QgaW4gYSBuZXN0ZWQgZW1pdClcbiAgICAgIGlmICghd2FzRW1pdHRpbmcpIHtcbiAgICAgICAgdGhpcy5fcHJvY2Vzc1BlbmRpbmdPcGVyYXRpb25zKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnNDYWxsZWQ7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIE9ubHkgcmVzZXQgdGhlIGVtaXR0aW5nIGZsYWcgaWYgd2UncmUgdGhlIG91dGVybW9zdCBlbWl0IGNhbGxcbiAgICAgIGlmICghd2FzRW1pdHRpbmcpIHtcbiAgICAgICAgdGhpcy5fZW1pdHRpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYW4gZXZlbnQgaGFzIGFueSBsaXN0ZW5lcnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZSAtIE5hbWUgb2YgdGhlIGV2ZW50IHRvIGNoZWNrXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgZXZlbnQgaGFzIGxpc3RlbmVycywgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBoYXNMaXN0ZW5lcnMoZXZlbnROYW1lKSB7XG4gICAgLy8gRGlyZWN0IG1hdGNoXG4gICAgaWYgKHRoaXMubGlzdGVuZXJzLmhhcyhldmVudE5hbWUpICYmIHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8vIElmIHdpbGRjYXJkcyBhcmUgZW5hYmxlZCwgY2hlY2sgZm9yIHdpbGRjYXJkIG1hdGNoZXNcbiAgICBpZiAodGhpcy5vcHRpb25zLmVuYWJsZVdpbGRjYXJkcykge1xuICAgICAgLy8g5pyA6YGp5YyWOiDmnIDlpKfjg4Hjgqfjg4Pjgq/mlbDjgpLliLbpmZBcbiAgICAgIGxldCBjaGVja2VkID0gMDtcbiAgICAgIGNvbnN0IG1heFRvQ2hlY2sgPSAxMDA7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgW25hbWUsIGxpc3RlbmVyc10gb2YgdGhpcy5saXN0ZW5lcnMuZW50cmllcygpKSB7XG4gICAgICAgIGlmICgrK2NoZWNrZWQgPiBtYXhUb0NoZWNrKSBicmVhaztcbiAgICAgICAgXG4gICAgICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCAmJiBuYW1lLmluY2x1ZGVzKCcqJykgJiYgdGhpcy5fbWF0Y2hlc1dpbGRjYXJkKG5hbWUsIGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlciBvZiBsaXN0ZW5lcnMgZm9yIGFuIGV2ZW50XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBldmVudCB0byBjaGVja1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0gTnVtYmVyIG9mIGxpc3RlbmVycyBmb3IgdGhlIGV2ZW50XG4gICAqL1xuICBsaXN0ZW5lckNvdW50KGV2ZW50TmFtZSkge1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICAvLyBEaXJlY3QgbWF0Y2hcbiAgICBpZiAodGhpcy5saXN0ZW5lcnMuaGFzKGV2ZW50TmFtZSkpIHtcbiAgICAgIGNvdW50ICs9IHRoaXMubGlzdGVuZXJzLmdldChldmVudE5hbWUpLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB3aWxkY2FyZHMgYXJlIGVuYWJsZWQsIGNoZWNrIGZvciB3aWxkY2FyZCBtYXRjaGVzXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVXaWxkY2FyZHMpIHtcbiAgICAgIC8vIOacgOmBqeWMljog5pyA5aSn44OB44Kn44OD44Kv5pWw44KS5Yi26ZmQXG4gICAgICBsZXQgY2hlY2tlZCA9IDA7XG4gICAgICBjb25zdCBtYXhUb0NoZWNrID0gMTAwO1xuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IFtuYW1lLCBsaXN0ZW5lcnNdIG9mIHRoaXMubGlzdGVuZXJzLmVudHJpZXMoKSkge1xuICAgICAgICBpZiAoKytjaGVja2VkID4gbWF4VG9DaGVjaykgYnJlYWs7XG4gICAgICAgIFxuICAgICAgICBpZiAobmFtZSAhPT0gZXZlbnROYW1lICYmIG5hbWUuaW5jbHVkZXMoJyonKSAmJiB0aGlzLl9tYXRjaGVzV2lsZGNhcmQobmFtZSwgZXZlbnROYW1lKSkge1xuICAgICAgICAgIGNvdW50ICs9IGxpc3RlbmVycy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCByZWdpc3RlcmVkIGV2ZW50IG5hbWVzXG4gICAqIEByZXR1cm4ge3N0cmluZ1tdfSAtIEFycmF5IG9mIHJlZ2lzdGVyZWQgZXZlbnQgbmFtZXNcbiAgICovXG4gIGV2ZW50TmFtZXMoKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5saXN0ZW5lcnMua2V5cygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHJlY2VudCBldmVudCBoaXN0b3J5IChvbmx5IGF2YWlsYWJsZSBpbiBkZWJ1ZyBtb2RlKVxuICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0PTEwXSAtIE1heGltdW0gbnVtYmVyIG9mIGV2ZW50cyB0byByZXR1cm5cbiAgICogQHJldHVybiB7QXJyYXl9IC0gQXJyYXkgb2YgcmVjZW50IGV2ZW50cyBvciBlbXB0eSBhcnJheSBpZiBkZWJ1ZyBtb2RlIGlzIGRpc2FibGVkXG4gICAqL1xuICBnZXRFdmVudEhpc3RvcnkobGltaXQgPSAxMCkge1xuICAgIGlmICghdGhpcy5vcHRpb25zLmRlYnVnTW9kZSkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIGNvbnN0IGFjdHVhbExpbWl0ID0gTWF0aC5taW4obGltaXQsIHRoaXMuZXZlbnRIaXN0b3J5Lmxlbmd0aCk7XG4gICAgcmV0dXJuIHRoaXMuZXZlbnRIaXN0b3J5LnNsaWNlKC1hY3R1YWxMaW1pdCk7XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGV2ZW50IGxpc3RlbmVyc1xuICAgKiBAcmV0dXJuIHtFdmVudFN5c3RlbX0gLSBSZXR1cm5zIHRoaXMgaW5zdGFuY2UgZm9yIGNoYWluaW5nXG4gICAqL1xuICByZW1vdmVBbGxMaXN0ZW5lcnMoKSB7XG4gICAgdGhpcy5saXN0ZW5lcnMuY2xlYXIoKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIHBlbmRpbmcgbGlzdGVuZXIgYWRkaXRpb25zIGFuZCByZW1vdmFsc1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX3Byb2Nlc3NQZW5kaW5nT3BlcmF0aW9ucygpIHtcbiAgICAvLyDmnIDpganljJY6IOWkp+mHj+OBruODmuODs+ODh+OCo+ODs+OCsOaTjeS9nOOBjOOBguOCi+WgtOWQiOOBruOCrOODvOODiVxuICAgIGNvbnN0IG1heE9wZXJhdGlvbnMgPSAxMDAwO1xuICAgIFxuICAgIC8vIFByb2Nlc3MgcmVtb3ZhbHMgZmlyc3QgdG8gYXZvaWQgaXNzdWVzIHdpdGggYWRkaXRpb25zIHRoYXQgd291bGQgYmUgaW1tZWRpYXRlbHkgcmVtb3ZlZFxuICAgIGNvbnN0IHJlbW92YWxzVG9Qcm9jZXNzID0gTWF0aC5taW4odGhpcy5fcGVuZGluZ1JlbW92YWxzLmxlbmd0aCwgbWF4T3BlcmF0aW9ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW1vdmFsc1RvUHJvY2VzczsgaSsrKSB7XG4gICAgICBjb25zdCB7IGV2ZW50TmFtZSwgY2FsbGJhY2sgfSA9IHRoaXMuX3BlbmRpbmdSZW1vdmFsc1tpXTtcbiAgICAgIHRoaXMub2ZmKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgICBcbiAgICAvLyDlh6bnkIbjgZfjgZ/liIbjgaDjgZHphY3liJfjgYvjgonliYrpmaRcbiAgICBpZiAocmVtb3ZhbHNUb1Byb2Nlc3MgPT09IHRoaXMuX3BlbmRpbmdSZW1vdmFscy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdSZW1vdmFscyA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMgPSB0aGlzLl9wZW5kaW5nUmVtb3ZhbHMuc2xpY2UocmVtb3ZhbHNUb1Byb2Nlc3MpO1xuICAgIH1cblxuICAgIC8vIFRoZW4gcHJvY2VzcyBhZGRpdGlvbnNcbiAgICBjb25zdCBhZGRpdGlvbnNUb1Byb2Nlc3MgPSBNYXRoLm1pbih0aGlzLl9wZW5kaW5nQWRkaXRpb25zLmxlbmd0aCwgbWF4T3BlcmF0aW9ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhZGRpdGlvbnNUb1Byb2Nlc3M7IGkrKykge1xuICAgICAgY29uc3QgeyBldmVudE5hbWUsIGNhbGxiYWNrLCBwcmlvcml0eSwgb25jZSB9ID0gdGhpcy5fcGVuZGluZ0FkZGl0aW9uc1tpXTtcbiAgICAgIGlmIChvbmNlKSB7XG4gICAgICAgIHRoaXMub25jZShldmVudE5hbWUsIGNhbGxiYWNrLCBwcmlvcml0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uKGV2ZW50TmFtZSwgY2FsbGJhY2ssIHByaW9yaXR5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8g5Yem55CG44GX44Gf5YiG44Gg44GR6YWN5YiX44GL44KJ5YmK6ZmkXG4gICAgaWYgKGFkZGl0aW9uc1RvUHJvY2VzcyA9PT0gdGhpcy5fcGVuZGluZ0FkZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMgPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGVuZGluZ0FkZGl0aW9ucyA9IHRoaXMuX3BlbmRpbmdBZGRpdGlvbnMuc2xpY2UoYWRkaXRpb25zVG9Qcm9jZXNzKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIGV2ZW50IHRvIHRoZSBoaXN0b3J5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBOYW1lIG9mIHRoZSBlbWl0dGVkIGV2ZW50XG4gICAqIEBwYXJhbSB7Kn0gZGF0YSAtIERhdGEgcGFzc2VkIHdpdGggdGhlIGV2ZW50XG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfYWRkVG9IaXN0b3J5KGV2ZW50TmFtZSwgZGF0YSkge1xuICAgIC8vIEFkZCB0byBoaXN0b3J5IHdpdGggdGltZXN0YW1wXG4gICAgdGhpcy5ldmVudEhpc3RvcnkucHVzaCh7XG4gICAgICBldmVudE5hbWUsXG4gICAgICBkYXRhLFxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpXG4gICAgfSk7XG5cbiAgICAvLyBUcmltIGhpc3RvcnkgaWYgaXQgZXhjZWVkcyB0aGUgbGltaXRcbiAgICBpZiAodGhpcy5ldmVudEhpc3RvcnkubGVuZ3RoID4gdGhpcy5vcHRpb25zLmhpc3RvcnlMaW1pdCkge1xuICAgICAgdGhpcy5ldmVudEhpc3Rvcnkuc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBldmVudCBuYW1lcyB0byBlbWl0IGJhc2VkIG9uIHRoZSBvcmlnaW5hbCBldmVudCBhbmQgb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lIC0gVGhlIG9yaWdpbmFsIGV2ZW50IG5hbWVcbiAgICogQHJldHVybiB7c3RyaW5nW119IC0gQXJyYXkgb2YgZXZlbnQgbmFtZXMgdG8gZW1pdFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgX2dldEV2ZW50TmFtZXNGb3JFbWlzc2lvbihldmVudE5hbWUpIHtcbiAgICBjb25zdCBldmVudE5hbWVzID0gW2V2ZW50TmFtZV07XG5cbiAgICAvLyBBZGQgbmFtZXNwYWNlIHBhcmVudCBldmVudHMgaWYgZW5hYmxlZFxuICAgIGlmICh0aGlzLm9wdGlvbnMuZW5hYmxlTmFtZXNwYWNlcyAmJiBldmVudE5hbWUuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgY29uc3QgcGFydHMgPSBldmVudE5hbWUuc3BsaXQoJy4nKTtcbiAgICAgIC8vIOacgOmBqeWMljog5LiA5bqm44Gr5YWo6YOo44KS6KiI566X44Gb44Ga5b6Q44CF44Gr6Kaq5ZCN5YmN56m66ZaT44KS5qeL56+JXG4gICAgICBsZXQgcGFyZW50TmFtZSA9ICcnO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgcGFyZW50TmFtZSA9IHBhcmVudE5hbWUgPyBgJHtwYXJlbnROYW1lfS4ke3BhcnRzW2ldfWAgOiBwYXJ0c1tpXTtcbiAgICAgICAgZXZlbnROYW1lcy5wdXNoKHBhcmVudE5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIOacgOmBqeWMljog44Ov44Kk44Or44OJ44Kr44O844OJ44GM5pyJ5Yq544Gq5aC05ZCI44Gv44CB5b+F6KaB44Gq44Oq44K544OK44O844Gu44G/44Oe44OD44OB44Oz44Kw44GZ44KLXG4gICAgaWYgKHRoaXMub3B0aW9ucy5lbmFibGVXaWxkY2FyZHMpIHtcbiAgICAgIC8vIOacgOmBqeWMljog44Oq44K544OK44O844Gu5pWw44GM5aSa44GZ44GO44KL5aC05ZCI44Gv5Yi26ZmQ44GZ44KLXG4gICAgICBjb25zdCBtYXhMaXN0ZW5lcnNUb0NoZWNrID0gMTAwO1xuICAgICAgbGV0IGNoZWNrZWRDb3VudCA9IDA7XG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgbmFtZSBvZiB0aGlzLmxpc3RlbmVycy5rZXlzKCkpIHtcbiAgICAgICAgLy8g44Ov44Kk44Or44OJ44Kr44O844OJ5paH5a2X44KS5ZCr44KA5aC05ZCI44Gu44G/44OB44Kn44OD44KvXG4gICAgICAgIGlmICghbmFtZS5pbmNsdWRlcygnKicpKSBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgIC8vIOWHpueQhua4iOOBv+OBruOCpOODmeODs+ODiOWQjeOBr+OCueOCreODg+ODl1xuICAgICAgICBpZiAoZXZlbnROYW1lcy5pbmNsdWRlcyhuYW1lKSkgY29udGludWU7XG4gICAgICAgIFxuICAgICAgICAvLyDmnIDlpKfliLbpmZDjgavpgZTjgZfjgZ/jgonlgZzmraJcbiAgICAgICAgaWYgKCsrY2hlY2tlZENvdW50ID4gbWF4TGlzdGVuZXJzVG9DaGVjaykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyDjg6/jgqTjg6vjg4njgqvjg7zjg4njg5Hjgr/jg7zjg7Pjga7nsKHmmJPjg4Hjgqfjg4Pjgq9cbiAgICAgICAgaWYgKHRoaXMuX21hdGNoZXNXaWxkY2FyZChuYW1lLCBldmVudE5hbWUpKSB7XG4gICAgICAgICAgZXZlbnROYW1lcy5wdXNoKG5hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV2ZW50TmFtZXM7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB3aWxkY2FyZCBwYXR0ZXJuIG1hdGNoZXMgYW4gZXZlbnQgbmFtZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0dGVybiAtIFRoZSB3aWxkY2FyZCBwYXR0ZXJuIHRvIGNoZWNrXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWUgLSBUaGUgZXZlbnQgbmFtZSB0byBtYXRjaCBhZ2FpbnN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gVHJ1ZSBpZiB0aGUgcGF0dGVybiBtYXRjaGVzIHRoZSBldmVudCBuYW1lXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBfbWF0Y2hlc1dpbGRjYXJkKHBhdHRlcm4sIGV2ZW50TmFtZSkge1xuICAgIC8vIOODkeOCv+ODvOODs+OChOWQjeWJjeOBjOeVsOW4uOOBq+mVt+OBhOWgtOWQiOOBr+ODnuODg+ODgeODs+OCsOOCkuirpuOCgeOCi++8iOWuieWFqOWvvuetlu+8iVxuICAgIGlmIChwYXR0ZXJuLmxlbmd0aCA+IDEwMDAgfHwgZXZlbnROYW1lLmxlbmd0aCA+IDEwMDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyDljZjntJTjgarjg4Hjgqfjg4Pjgq9cbiAgICBpZiAocGF0dGVybiA9PT0gZXZlbnROYW1lKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDljZjntJTjgarjg6/jgqTjg6vjg4njgqvjg7zjg4njg4Hjgqfjg4Pjgq9cbiAgICBpZiAocGF0dGVybiA9PT0gJyonKSB7XG4gICAgICByZXR1cm4gIWV2ZW50TmFtZS5pbmNsdWRlcygnLicpO1xuICAgIH1cblxuICAgIGlmIChwYXR0ZXJuID09PSAnKionKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvLyDopIfmlbDpmo7lsaTjga7jg6/jgqTjg6vjg4njgqvjg7zjg4kgKCoqKSDjga7lh6bnkIZcbiAgICBpZiAocGF0dGVybi5pbmNsdWRlcygnKionKSkge1xuICAgICAgY29uc3QgcGFydHMgPSBwYXR0ZXJuLnNwbGl0KCcqKicpO1xuICAgICAgXG4gICAgICAvLyDmnIDpganljJY6IOacgOWkpzLjgaTjga7jg5Hjg7zjg4jjga7jgb/jgpLjgrXjg53jg7zjg4hcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPiAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8g44OR44K/44O844Oz44GMICdnYW1lLioqJyDjga7jgojjgYbjgarlvaLlvI/jga7loLTlkIhcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIgJiYgcGFydHNbMV0gPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBldmVudE5hbWUuc3RhcnRzV2l0aChwYXJ0c1swXSk7XG4gICAgICB9XG5cbiAgICAgIC8vIOODkeOCv+ODvOODs+OBjCAnKiouZW5kJyDjga7jgojjgYbjgarlvaLlvI/jga7loLTlkIhcbiAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDIgJiYgcGFydHNbMF0gPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBldmVudE5hbWUuZW5kc1dpdGgocGFydHNbMV0pO1xuICAgICAgfVxuXG4gICAgICAvLyDjg5Hjgr/jg7zjg7PjgYwgJ3N0YXJ0LioqLmVuZCcg44Gu44KI44GG44Gq5b2i5byP44Gu5aC05ZCIXG4gICAgICBpZiAocGFydHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHJldHVybiBldmVudE5hbWUuc3RhcnRzV2l0aChwYXJ0c1swXSkgJiYgZXZlbnROYW1lLmVuZHNXaXRoKHBhcnRzWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyDljZjkuIDpmo7lsaTjga7jg6/jgqTjg6vjg4njgqvjg7zjg4kgKCopIOOBruWHpueQhlxuICAgIGlmIChwYXR0ZXJuLmluY2x1ZGVzKCcqJykgJiYgIXBhdHRlcm4uaW5jbHVkZXMoJyoqJykpIHtcbiAgICAgIC8vIOato+imj+ihqOePvuOCkuS9v+OCj+OBquOBhOacgOmBqeWMluOBleOCjOOBn+aWueazlVxuICAgICAgY29uc3QgcGF0dGVyblBhcnRzID0gcGF0dGVybi5zcGxpdCgnLicpO1xuICAgICAgY29uc3QgZXZlbnRQYXJ0cyA9IGV2ZW50TmFtZS5zcGxpdCgnLicpO1xuICAgICAgXG4gICAgICBpZiAocGF0dGVyblBhcnRzLmxlbmd0aCAhPT0gZXZlbnRQYXJ0cy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdHRlcm5QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGF0dGVyblBhcnRzW2ldID09PSAnKicpIHtcbiAgICAgICAgICBjb250aW51ZTsgLy8g44Ov44Kk44Or44OJ44Kr44O844OJ44Gv5L2V44Gr44KC44Oe44OD44OB44GZ44KLXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdHRlcm5QYXJ0c1tpXSAhPT0gZXZlbnRQYXJ0c1tpXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXZlbnRTeXN0ZW07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsV0FBVyxDQUFDO0VBQ2hCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBQ0MsT0FBTyxHQUFHLENBQUMsQ0FBQyxFQUFFO0lBQ3hCO0lBQ0EsSUFBSSxDQUFDQSxPQUFPLEdBQUc7TUFDYkMsZ0JBQWdCLEVBQUUsSUFBSTtNQUN0QkMsU0FBUyxFQUFFLEtBQUs7TUFDaEJDLGVBQWUsRUFBRSxLQUFLO01BQ3RCQyxZQUFZLEVBQUUsR0FBRztNQUNqQixHQUFHSjtJQUNMLENBQUM7O0lBRUQ7SUFDQSxJQUFJLENBQUNLLFNBQVMsR0FBRyxJQUFJQyxHQUFHLENBQUMsQ0FBQzs7SUFFMUI7SUFDQSxJQUFJLENBQUNDLFlBQVksR0FBRyxFQUFFOztJQUV0QjtJQUNBLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEtBQUs7O0lBRXRCO0lBQ0EsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxFQUFFO0lBQzNCLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUcsRUFBRTtFQUM1Qjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VDLEVBQUVB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