{"version":3,"names":["EventSystem","constructor","options","enableNamespaces","debugMode","enableWildcards","historyLimit","listeners","Map","eventHistory","_emitting","_pendingAdditions","_pendingRemovals","on","eventName","callback","priority","trim","Error","push","once","has","set","get","existingIndex","findIndex","listener","sort","a","b","off","delete","filteredListeners","filter","length","emit","data","wasEmitting","listenersCalled","_addToHistory","eventNamesToEmit","_getEventNamesForEmission","calledListeners","Set","listenersToRemove","name","add","error","console","updatedListeners","l","_processPendingOperations","hasListeners","checked","maxToCheck","entries","includes","_matchesWildcard","listenerCount","count","eventNames","Array","from","keys","getEventHistory","limit","actualLimit","Math","min","slice","removeAllListeners","clear","maxOperations","removalsToProcess","i","additionsToProcess","timestamp","Date","shift","parts","split","parentName","maxListenersToCheck","checkedCount","pattern","startsWith","endsWith","patternParts","eventParts","module","exports"],"sources":["EventSystem.js"],"sourcesContent":["/**\n * EventSystem - Core event management module for the werewolf game GM support library\n *\n * This module provides the foundation for the event-driven architecture,\n * enabling communication between different modules through events.\n */\n\nclass EventSystem {\n  /**\n   * Creates a new EventSystem instance\n   * @param {Object} options - Configuration options\n   * @param {boolean} [options.enableNamespaces=true] - Enable hierarchical event namespaces\n   * @param {boolean} [options.debugMode=false] - Enable debug mode with event history\n   * @param {boolean} [options.enableWildcards=false] - Enable wildcard event matching\n   * @param {number} [options.historyLimit=100] - Maximum number of events to keep in history\n   */\n  constructor(options = {}) {\n    // Default options\n    this.options = {\n      enableNamespaces: true,\n      debugMode: false,\n      enableWildcards: false, \n      historyLimit: 100,\n      ...options\n    };\n\n    // Map to store event listeners: { eventName => [{ callback, once, priority }] }\n    this.listeners = new Map();\n\n    // Event history for debugging (only active in debug mode)\n    this.eventHistory = [];\n\n    // Flag to track if we're currently emitting an event (to handle nested emissions)\n    this._emitting = false;\n\n    // Queue for listeners to be added/removed during emission\n    this._pendingAdditions = [];\n    this._pendingRemovals = [];\n  }\n\n  /**\n   * Register an event listener\n   * @param {string} eventName - Name of the event to listen for\n   * @param {Function} callback - Function to call when the event is emitted\n   * @param {number} [priority=0] - Priority of the listener (higher executes first)\n   * @return {EventSystem} - Returns this instance for chaining\n   * @throws {Error} If eventName is not a string or callback is not a function\n   */\n  on(eventName, callback, priority = 0) {\n    // Validate arguments\n    if (typeof eventName !== 'string' || eventName.trim() === '') {\n      throw new Error('Event name must be a non-empty string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    // If we're currently emitting, queue the addition\n    if (this._emitting) {\n      this._pendingAdditions.push({ eventName, callback, priority, once: false });\n      return this;\n    }\n\n    // Get or create the listeners array for this event\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n\n    const listeners = this.listeners.get(eventName);\n\n    // Check for duplicate listener\n    const existingIndex = listeners.findIndex(listener => listener.callback === callback);\n    if (existingIndex !== -1) {\n      // Update the existing listener's priority\n      listeners[existingIndex].priority = priority;\n    } else {\n      // Add the new listener\n      listeners.push({ callback, once: false, priority });\n\n      // Sort listeners by priority (highest first)\n      listeners.sort((a, b) => b.priority - a.priority);\n    }\n\n    return this;\n  }\n\n  /**\n   * Register a one-time event listener that will be removed after execution\n   * @param {string} eventName - Name of the event to listen for\n   * @param {Function} callback - Function to call when the event is emitted\n   * @param {number} [priority=0] - Priority of the listener (higher executes first)\n   * @return {EventSystem} - Returns this instance for chaining\n   * @throws {Error} If eventName is not a string or callback is not a function\n   */\n  once(eventName, callback, priority = 0) {\n    // Validate arguments\n    if (typeof eventName !== 'string' || eventName.trim() === '') {\n      throw new Error('Event name must be a non-empty string');\n    }\n\n    if (typeof callback !== 'function') {\n      throw new Error('Callback must be a function');\n    }\n\n    // If we're currently emitting, queue the addition\n    if (this._emitting) {\n      this._pendingAdditions.push({ eventName, callback, priority, once: true });\n      return this;\n    }\n\n    // Get or create the listeners array for this event\n    if (!this.listeners.has(eventName)) {\n      this.listeners.set(eventName, []);\n    }\n\n    const listeners = this.listeners.get(eventName);\n\n    // Check for duplicate listener\n    const existingIndex = listeners.findIndex(listener => listener.callback === callback);\n    if (existingIndex !== -1) {\n      // Update the existing listener's priority and once flag\n      listeners[existingIndex].priority = priority;\n      listeners[existingIndex].once = true;\n    } else {\n      // Add the new listener\n      listeners.push({ callback, once: true, priority });\n\n      // Sort listeners by priority (highest first)\n      listeners.sort((a, b) => b.priority - a.priority);\n    }\n\n    return this;\n  }\n\n  /**\n   * Remove an event listener\n   * @param {string} eventName - Name of the event to remove listener from\n   * @param {Function} [callback] - Specific callback to remove (if omitted, all listeners for the event are removed)\n   * @return {EventSystem} - Returns this instance for chaining\n   */\n  off(eventName, callback = null) {\n    // If we're currently emitting, queue the removal\n    if (this._emitting) {\n      this._pendingRemovals.push({ eventName, callback });\n      return this;\n    }\n\n    // If eventName doesn't exist, nothing to do\n    if (!this.listeners.has(eventName)) {\n      return this;\n    }\n\n    // If callback is null, remove all listeners for this event\n    if (callback === null) {\n      this.listeners.delete(eventName);\n      return this;\n    }\n\n    // Otherwise, only remove the specific callback\n    const listeners = this.listeners.get(eventName);\n    const filteredListeners = listeners.filter(listener => listener.callback !== callback);\n\n    if (filteredListeners.length === 0) {\n      // If no listeners remain, remove the event entirely\n      this.listeners.delete(eventName);\n    } else {\n      // Otherwise, update the listeners array\n      this.listeners.set(eventName, filteredListeners);\n    }\n\n    return this;\n  }\n\n  /**\n   * Emit an event to all registered listeners\n   * @param {string} eventName - Name of the event to emit\n   * @param {*} [data] - Data to pass to the listeners\n   * @return {boolean} - True if the event had listeners, false otherwise\n   */\n  emit(eventName, data) {\n    // Mark that we're emitting an event\n    const wasEmitting = this._emitting;\n    this._emitting = true;\n\n    // Track whether any listeners were called\n    let listenersCalled = false;\n\n    try {\n      // Add to history if debug mode is enabled\n      if (this.options.debugMode) {\n        this._addToHistory(eventName, data);\n      }\n\n      // Get all event names to emit based on the options\n      const eventNamesToEmit = this._getEventNamesForEmission(eventName);\n      \n      // リスナーを呼び出す前にトラッキング用のセットを作成\n      // これにより、同じイベント発火内での重複実行を防止\n      const calledListeners = new Set();\n      const listenersToRemove = [];\n\n      // Emit to each matched event name\n      for (const name of eventNamesToEmit) {\n        if (this.listeners.has(name)) {\n          // リスナーのリストをコピーして処理（途中で削除される可能性があるため）\n          const listeners = [...this.listeners.get(name)];\n\n          // Call each listener\n          for (const listener of listeners) {\n            const { callback, once } = listener;\n            \n            // このイベント発火内で既に呼び出されたリスナーはスキップ\n            if (calledListeners.has(callback)) {\n              continue;\n            }\n\n            try {\n              // 呼び出し前にセットに追加\n              calledListeners.add(callback);\n              \n              // Call the listener with the event data\n              callback(data);\n              listenersCalled = true;\n\n              // If it's a once listener, mark it for removal\n              if (once) {\n                listenersToRemove.push({ name, callback });\n              }\n            } catch (error) {\n              // Log the error but continue with other listeners\n              console.error(`Error in event listener for '${name}':`, error);\n            }\n          }\n        }\n      }\n\n      // 全てのリスナー実行後に、一度だけ削除処理を行う\n      for (const { name, callback } of listenersToRemove) {\n        // リスナーを削除\n        if (this.listeners.has(name)) {\n          const listeners = this.listeners.get(name);\n          const updatedListeners = listeners.filter(l => l.callback !== callback);\n          \n          if (updatedListeners.length === 0) {\n            this.listeners.delete(name);\n          } else {\n            this.listeners.set(name, updatedListeners);\n          }\n        }\n      }\n\n      // Process pending additions and removals (if we're not in a nested emit)\n      if (!wasEmitting) {\n        this._processPendingOperations();\n      }\n\n      return listenersCalled;\n    } finally {\n      // Only reset the emitting flag if we're the outermost emit call\n      if (!wasEmitting) {\n        this._emitting = false;\n      }\n    }\n  }\n\n  /**\n   * Check if an event has any listeners\n   * @param {string} eventName - Name of the event to check\n   * @return {boolean} - True if the event has listeners, false otherwise\n   */\n  hasListeners(eventName) {\n    // Direct match\n    if (this.listeners.has(eventName) && this.listeners.get(eventName).length > 0) {\n      return true;\n    }\n\n    // If wildcards are enabled, check for wildcard matches\n    if (this.options.enableWildcards) {\n      // 最適化: 最大チェック数を制限\n      let checked = 0;\n      const maxToCheck = 100;\n      \n      for (const [name, listeners] of this.listeners.entries()) {\n        if (++checked > maxToCheck) break;\n        \n        if (listeners.length > 0 && name.includes('*') && this._matchesWildcard(name, eventName)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the number of listeners for an event\n   * @param {string} eventName - Name of the event to check\n   * @return {number} - Number of listeners for the event\n   */\n  listenerCount(eventName) {\n    let count = 0;\n\n    // Direct match\n    if (this.listeners.has(eventName)) {\n      count += this.listeners.get(eventName).length;\n    }\n\n    // If wildcards are enabled, check for wildcard matches\n    if (this.options.enableWildcards) {\n      // 最適化: 最大チェック数を制限\n      let checked = 0;\n      const maxToCheck = 100;\n      \n      for (const [name, listeners] of this.listeners.entries()) {\n        if (++checked > maxToCheck) break;\n        \n        if (name !== eventName && name.includes('*') && this._matchesWildcard(name, eventName)) {\n          count += listeners.length;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  /**\n   * Get all registered event names\n   * @return {string[]} - Array of registered event names\n   */\n  eventNames() {\n    return Array.from(this.listeners.keys());\n  }\n\n  /**\n   * Get the recent event history (only available in debug mode)\n   * @param {number} [limit=10] - Maximum number of events to return\n   * @return {Array} - Array of recent events or empty array if debug mode is disabled\n   */\n  getEventHistory(limit = 10) {\n    if (!this.options.debugMode) {\n      return [];\n    }\n\n    const actualLimit = Math.min(limit, this.eventHistory.length);\n    return this.eventHistory.slice(-actualLimit);\n  }\n\n  /**\n   * Clear all event listeners\n   * @return {EventSystem} - Returns this instance for chaining\n   */\n  removeAllListeners() {\n    this.listeners.clear();\n    return this;\n  }\n\n  /**\n   * Process pending listener additions and removals\n   * @private\n   */\n  _processPendingOperations() {\n    // 最適化: 大量のペンディング操作がある場合のガード\n    const maxOperations = 1000;\n    \n    // Process removals first to avoid issues with additions that would be immediately removed\n    const removalsToProcess = Math.min(this._pendingRemovals.length, maxOperations);\n    for (let i = 0; i < removalsToProcess; i++) {\n      const { eventName, callback } = this._pendingRemovals[i];\n      this.off(eventName, callback);\n    }\n    \n    // 処理した分だけ配列から削除\n    if (removalsToProcess === this._pendingRemovals.length) {\n      this._pendingRemovals = [];\n    } else {\n      this._pendingRemovals = this._pendingRemovals.slice(removalsToProcess);\n    }\n\n    // Then process additions\n    const additionsToProcess = Math.min(this._pendingAdditions.length, maxOperations);\n    for (let i = 0; i < additionsToProcess; i++) {\n      const { eventName, callback, priority, once } = this._pendingAdditions[i];\n      if (once) {\n        this.once(eventName, callback, priority);\n      } else {\n        this.on(eventName, callback, priority);\n      }\n    }\n    \n    // 処理した分だけ配列から削除\n    if (additionsToProcess === this._pendingAdditions.length) {\n      this._pendingAdditions = [];\n    } else {\n      this._pendingAdditions = this._pendingAdditions.slice(additionsToProcess);\n    }\n  }\n\n  /**\n   * Add an event to the history\n   * @param {string} eventName - Name of the emitted event\n   * @param {*} data - Data passed with the event\n   * @private\n   */\n  _addToHistory(eventName, data) {\n    // Add to history with timestamp\n    this.eventHistory.push({\n      eventName,\n      data,\n      timestamp: new Date()\n    });\n\n    // Trim history if it exceeds the limit\n    if (this.eventHistory.length > this.options.historyLimit) {\n      this.eventHistory.shift();\n    }\n  }\n\n  /**\n   * Get all event names to emit based on the original event and options\n   * @param {string} eventName - The original event name\n   * @return {string[]} - Array of event names to emit\n   * @private\n   */\n  _getEventNamesForEmission(eventName) {\n    const eventNames = [eventName];\n\n    // Add namespace parent events if enabled\n    if (this.options.enableNamespaces && eventName.includes('.')) {\n      const parts = eventName.split('.');\n      // 最適化: 一度に全部を計算せず徐々に親名前空間を構築\n      let parentName = '';\n      for (let i = 0; i < parts.length - 1; i++) {\n        parentName = parentName ? `${parentName}.${parts[i]}` : parts[i];\n        eventNames.push(parentName);\n      }\n    }\n\n    // 最適化: ワイルドカードが有効な場合は、必要なリスナーのみマッチングする\n    if (this.options.enableWildcards) {\n      // 最適化: リスナーの数が多すぎる場合は制限する\n      const maxListenersToCheck = 100;\n      let checkedCount = 0;\n      \n      for (const name of this.listeners.keys()) {\n        // ワイルドカード文字を含む場合のみチェック\n        if (!name.includes('*')) continue;\n        \n        // 処理済みのイベント名はスキップ\n        if (eventNames.includes(name)) continue;\n        \n        // 最大制限に達したら停止\n        if (++checkedCount > maxListenersToCheck) {\n          break;\n        }\n        \n        // ワイルドカードパターンの簡易チェック\n        if (this._matchesWildcard(name, eventName)) {\n          eventNames.push(name);\n        }\n      }\n    }\n\n    return eventNames;\n  }\n\n  /**\n   * Check if a wildcard pattern matches an event name\n   * @param {string} pattern - The wildcard pattern to check\n   * @param {string} eventName - The event name to match against\n   * @return {boolean} - True if the pattern matches the event name\n   * @private\n   */\n  _matchesWildcard(pattern, eventName) {\n    // パターンや名前が異常に長い場合はマッチングを諦める（安全対策）\n    if (pattern.length > 1000 || eventName.length > 1000) {\n      return false;\n    }\n\n    // 単純なチェック\n    if (pattern === eventName) {\n      return true;\n    }\n\n    // 単純なワイルドカードチェック\n    if (pattern === '*') {\n      return !eventName.includes('.');\n    }\n\n    if (pattern === '**') {\n      return true;\n    }\n\n    // 複数階層のワイルドカード (**) の処理\n    if (pattern.includes('**')) {\n      const parts = pattern.split('**');\n      \n      // 最適化: 最大2つのパートのみをサポート\n      if (parts.length > 2) {\n        return false;\n      }\n\n      // パターンが 'game.**' のような形式の場合\n      if (parts.length === 2 && parts[1] === '') {\n        return eventName.startsWith(parts[0]);\n      }\n\n      // パターンが '**.end' のような形式の場合\n      if (parts.length === 2 && parts[0] === '') {\n        return eventName.endsWith(parts[1]);\n      }\n\n      // パターンが 'start.**.end' のような形式の場合\n      if (parts.length === 2) {\n        return eventName.startsWith(parts[0]) && eventName.endsWith(parts[1]);\n      }\n    }\n\n    // 単一階層のワイルドカード (*) の処理\n    if (pattern.includes('*') && !pattern.includes('**')) {\n      // 正規表現を使わない最適化された方法\n      const patternParts = pattern.split('.');\n      const eventParts = eventName.split('.');\n      \n      if (patternParts.length !== eventParts.length) {\n        return false;\n      }\n      \n      for (let i = 0; i < patternParts.length; i++) {\n        if (patternParts[i] === '*') {\n          continue; // ワイルドカードは何にもマッチする\n        }\n        if (patternParts[i] !== eventParts[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = EventSystem;"],"mappings":"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","ignoreList":[]}